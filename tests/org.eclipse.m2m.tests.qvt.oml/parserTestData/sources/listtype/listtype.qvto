import org.bar.Foo;

library listtype;

helper testCase() : Boolean {

	var c : Collection(String) := Set { 'a', 'b'};
	/*<error>*/var setElements : Set(String) := newList(c)/*</error>*/;
	/*<error>*/var bagElements : Bag(String) := newList(c)/*</error>*/;
	/*<error>*/var seqElements : Sequence(String) := newList(c)/*</error>*/;	
	/*<error>*/var oSetElements : OrderedSet(String) := newList(c)/*</error>*/;	
	
	var chars := OrderedSet{ 'a', 'b', 'c'  };
	var listElements := newList(chars);
	/*<error>*/listElements/*</error>*/ := Set { '' };
	/*<error>*/listElements/*</error>*/ := Bag { '' }; 
	/*<error>*/listElements/*</error>*/ := Sequence { '' };
	/*<error>*/listElements/*</error>*/ := OrderedSet { '' };

	-- correct samples
	var conformantCollection : Collection(OclAny) := listElements;
	/*<error>*/var nonconFormantCollection : Collection(Real) := listElements/*</error>*/; 
	
	var listCopy := echoList(listElements);
	-- check List is conformant to Collection type 
	-- and can be used as normal collection
	assert fatal (chars->includesAll(listCopy));
	
	-- test all List operations
	listElements->add('x');
	listElements->prepend('y');	
	var element : String :=listElements->genericListElementAt(1);
	element :=listElements->genericListElementAt(listElements->size());	

	return true;
}