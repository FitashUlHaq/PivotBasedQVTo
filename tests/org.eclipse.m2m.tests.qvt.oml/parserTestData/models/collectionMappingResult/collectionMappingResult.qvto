modeltype ECORE uses 'http://www.eclipse.org/emf/2002/Ecore';
	        
transformation collectionMappingResult(in m : ECORE, out x  : ECORE); 


main() {
	var xx := null;
	m.rootObjects()[EPackage]->map fooNestedDefaultInstantiate();
	m.rootObjects()[EPackage]->map fooDefaultInstantiate();	 	
	m.rootObjects()[EPackage]->map fooExplicitInstantiate();	
	m.rootObjects()[EPackage]->map fooNestedExplicitInistantiate();
}


mapping EPackage::fooDefaultInstantiate() : Set(EClass) {
	end {
		-- check resolves
		assert fatal (self.resolve()->notEmpty());		
		--assert fatal (self.resolveIn(EClass::fooNestedDefaultInstantiate, true)->size() = 1);		
		assert fatal (self.resolveone() <> null);
		assert fatal (self.invresolveone() = null);		
		assert fatal (self.resolveone(e : EClass | true) = null);
	}
}

mapping EPackage::fooExplicitInstantiate() : Set(EClass) {
	init {
		result := Set { 
			object EClass { name := 'fooExplicitInstantiate1' },
			object EClass { name := 'fooExplicitInstantiate2' }  
		}
	}
	end {
		-- check resolves
		assert fatal (self.resolve()->notEmpty());		
		--assert fatal (self.resolveIn(EClass::fooNestedDefaultInstantiate, true)->size() = 1);		
		assert fatal (self.resolveone() <> null);
		assert fatal (self.invresolveone() = null);		
		assert fatal (self.resolveone(e : EClass | true) = null);
	}
}


mapping EPackage::fooNestedDefaultInstantiate() : Set(EClass) {
	end {
		-- check resolves
		assert fatal (self.resolve()->notEmpty());		
		--assert fatal (self.resolveIn(EClass::fooNestedDefaultInstantiate, true)->size() = 1);		
		assert fatal (self.resolveone() <> null);
		assert fatal (self.invresolveone() = null);		
		assert fatal (self.resolveone(e : EClass | true) = null);
	}
}

mapping EPackage::fooNestedExplicitInistantiate() : Sequence(Sequence(EClass)) {
	init {
		
		var c1:EClass := object EClass { name:='fooNestedExplicitInistantiate1' };
		var c2:EClass := object EClass { name:='fooNestedExplicitInistantiate2' };
		result := Sequence { Sequence { 
			c1, 
			c2
		} };	
	}	
}
