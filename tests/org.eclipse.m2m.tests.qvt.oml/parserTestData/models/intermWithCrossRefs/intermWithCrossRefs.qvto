modeltype Ecore uses 'http://www.eclipse.org/emf/2002/Ecore';

transformation intermWithCrossRefs(out Ecore);

intermediate class MyBase {
	n : String = 'n';
}

intermediate class MyClass extends MyBase {
	refBase : MyBase = object MyBase{n := 'n_n'};
}

intermediate class MyClass2 extends MyClass {
	refSelf : MyClass2;
	listRefs : Sequence(MyBase) = Sequence{object MyClass{}, object MyClass2{}} 
}


main() {
	var v0 := object MyBase{};
	assert fatal (v0.eClass() = MyBase);

	var v1 := object MyClass{};
	assert fatal (v1.refBase.n = 'n_n');
	assert fatal (v1.eClass() = MyClass);
	
	var v2 := v1.map toMyClass2();
	assert fatal (v2.refBase.n = 'n');
	assert fatal (v2.eClass() = MyClass2);
	assert fatal (v2.refBase = v1);
	assert fatal (v2.refSelf = v2);
	assert fatal (MyBase.oclAsType(EClass).isSuperTypeOf(v2.listRefs->any(true).eClass()));
	
	v2.listRefs->xmap toEClass();
}

mapping MyClass::toMyClass2() : MyClass2 {
	refBase := self;
	refSelf := result;
}

mapping MyBase::toEClass() : EClass {
	name := self.n;
}

