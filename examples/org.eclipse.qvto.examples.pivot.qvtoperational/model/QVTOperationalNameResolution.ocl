import '/resource/org.eclipse.ocl.examples.pivot/model/Environment.ecore'
import '/resource/org.eclipse.ocl.examples.pivot/model/Pivot.ecore'
import '/resource/org.eclipse.ocl.examples.pivot/model/PivotNameResolution.ocl'
import '/resource/org.eclipse.qvto.examples.pivot.imperativeocl/model/ImperativeOCL.ecore'
import 'QVTOperational.ecore'

package env

context Environment
def : addElementsOf(element : pivot::Element) : Environment =
	null

def : addElementsOf(elements : Collection(pivot::Element)) : Environment =
	null
endpackage

package qvtoperational

context Module
def : _env(child : pivot::Element) : env::Environment =
	parentEnv().nestedEnv()		
			.addElementsOf(self.moduleImport.module)
			.nestedEnv()			
			.addElements(self.ownedAttribute)
			-- .addElements(self.ownedOperation->excluding(self.ownedOperation->any(oclIsKindOf(EntryOperation)))) -- To discuss, can entry main() operation be called ?
			.addElements(self.ownedOperation) 
			.addElements(self.ownedType)
			.addElements(self.nestedPackage)
			--.addElements(self.ownedTag)
			.addElements(self.ownedVariable)

context ModuleImport
def : _env(child : pivot::Element) : env::Environment =
	parentEnv()	

context OperationalTransformation
def : _env(child : pivot::Element) : env::Environment =

	if self.modelParameter->includes(child) then
		parentEnv().nestedEnv()
			.addElementsOf(self.moduleImport.module)
			.nestedEnv()
			.addElements(self.ownedAttribute)
			-- .addElements(self.ownedOperation->excluding(self.ownedOperation->any(oclIsKindOf(EntryOperation)))) -- To discuss, can entry main() operation be called ?
			.addElements(self.ownedOperation) 
			.addElements(self.ownedType)
			.addElements(self.nestedPackage)
			--.addElements(self.ownedTag)
			.addElements(self.ownedVariable)
	else
		parentEnv().nestedEnv()
			.addElementsOf(self.moduleImport.module)
			.nestedEnv()			
			.addElements(self.ownedAttribute)
			-- .addElements(self.ownedOperation->excluding(self.ownedOperation->any(oclIsKindOf(EntryOperation)))) -- To discuss, can entry main() operation be called ?
			.addElements(self.ownedOperation)
			.addElements(self.ownedType)
			.addElements(self.nestedPackage)
			--.addElements(self.ownedTag)
			.addElements(self.ownedVariable)
			.addElements(self.modelParameter)
	endif


-- Overwritten. This will be autogenerated	
context Library
def : _env(child : pivot::Element) : env::Environment =
	parentEnv()

context ModelType
def : _env(child : pivot::Element) : env::Environment =
	if self.additionalCondition->includes(child) then
		parentEnv().nestedEnv()
			.addElements(self.metamodel) -- Note this plays the role of the "import package" in OCL/QVTd 
			-- .addElement(ADD SELF VAR FROM WHERE ???? -> OMG fix)
	else
		parentEnv().nestedEnv()
			.addElements(self.metamodel)
	endif

-- Overwritten. This will be autogenerated	
context VarParameter
def : _env(child : pivot::Element) : env::Environment =
	parentEnv()

context ImperativeOperation
def : _env(child : pivot::Element) : env::Environment =
	if (self._body = child) then
		parentEnv().nestedEnv()
			.addElement(self._context)
			.addElements(self.result)
			.addElements(self.ownedParameter)
	else -- any other 
		parentEnv()
	endif

-- Overwritten. This will be autogenerated	
context EntryOperation
def : _env(child : pivot::Element) : env::Environment =
	parentEnv()

-- Overwritten. This will be autogenerated	
context Helper
def : _env(child : pivot::Element) : env::Environment =
	parentEnv()

-- Overwritten. This will be autogenerated	
context Constructor
def : _env(child : pivot::Element) : env::Environment =
	parentEnv()

-- Overwritten. This will be autogenerated	
context ContextualProperty
def : _env(child : pivot::Element) : env::Environment =
	parentEnv()

context  MappingOperation
def : _env(child : pivot::Element) : env::Environment =
	if (self._body = child) then
		parentEnv().nestedEnv()
		.addElement(self._context)
		.addElements(self.result)
		.addElements(self.ownedParameter)
	else if (self.when = child) then
		parentEnv().nestedEnv()
		.addElement(self._context)
		.addElements(self.ownedParameter)
	else if (self.where = child) then
		parentEnv().nestedEnv()
		.addElement(self._context)
		.addElements(self.ownedParameter)
		.addElements(self.result)
	else
		parentEnv()
	endif endif endif
	
-- Overwritten. This will be autogenerated	
context MappingParameter
def : _env(child : pivot::Element) : env::Environment =
	parentEnv()
	

context OperationBody
def : _env(child : pivot::Element) : env::Environment =
	if self.content->includes(child) then
		parentEnv().nestedEnv()
			.addElements(self.variable)
			.addElements(self.content->select(x | self.content->indexOf(x) < self.content->indexOf(child))
									->selectByKind(imperativeocl::VariableInitExp).referredVariable)
	else
		parentEnv()
	endif

-- Overwritten. This will be autogenerated	
context ConstructorBody
def : _env(child : pivot::Element) : env::Environment =
	if self.content->includes(child) then
		parentEnv().nestedEnv()
			.addElements(self.variable)
			.addElements(self.content->select(x | self.content->indexOf(x) < self.content->indexOf(child))
									->selectByKind(imperativeocl::VariableInitExp).referredVariable)
	else
		parentEnv()
	endif

context MappingBody
def : _env(child : pivot::Element) : env::Environment =
	if self.content->includes(child) then
		parentEnv().nestedEnv()
			.addElements(self.variable)
			.addElements(self.content->select(x | self.content->indexOf(x) < self.content->indexOf(child))
									->selectByKind(imperativeocl::VariableInitExp).referredVariable)
	else if self.initSection->includes(child) then
		parentEnv().nestedEnv()
			.addElements(self.variable)
			.addElements(self.content->select(x | self.initSection->indexOf(x) < self.initSection->indexOf(child))
									->selectByKind(imperativeocl::VariableInitExp).referredVariable)
	else if self.endSection->includes(child) then
		parentEnv().nestedEnv()
			.addElements(self.variable)
			.addElements(self.content->select(x | self.endSection->indexOf(x) < self.endSection->indexOf(child))
									->selectByKind(imperativeocl::VariableInitExp).referredVariable)
	else									
		parentEnv()
	endif endif endif
	

-- Overwritten. This will be autogenerated	
context ImperativeCallExp
def : _env(child : pivot::Element) : env::Environment =
	parentEnv()
	

-- Overwritten. This will be autogenerated	
context MappingCallExp
def : _env(child : pivot::Element) : env::Environment =
	parentEnv()
	
context ResolveExp
def : _env(child : pivot::Element) : env::Environment =
	if self.condition = child then
		parentEnv().nestedEnv()
			.addElement(self.target)
	else
		parentEnv()
	endif
	

-- Overwritten. This will be autogenerated	
context ResolveInExp
def : _env(child : pivot::Element) : env::Environment =
	parentEnv()

-- Overwritten. This will be autogenerated	
context ObjectExp
def : _env(child : pivot::Element) : env::Environment =
	parentEnv()

-- Overwritten. This will be autogenerated	
context DummyRelation
def : _env(child : pivot::Element) : env::Environment =
	parentEnv()
	
-- Overwritten. This will be autogenerated		
context DummyRelationalTransformation
def : _env(child : pivot::Element) : env::Environment =
	parentEnv()
	
-- Overwritten. This will be autogenerated	
context DummyRelationDomain
def : _env(child : pivot::Element) : env::Environment =
	parentEnv()
	
-- Overwritten. This will be autogenerated	
context Tag
def : _env(child : pivot::Element) : env::Environment =
	parentEnv()
	
-- Overwritten. This will be autogenerated	
context ModelParameter
def : _env(child : pivot::Element) : env::Environment =
	parentEnv()
		
endpackage