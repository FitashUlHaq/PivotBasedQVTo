/*
* generated by Xtext
*/
package org.eclipse.qvto.examples.xtext.qvtoperational.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.qvto.examples.xtext.imperativeocl.services.ImperativeOCLGrammarAccess;
import org.eclipse.ocl.examples.xtext.essentialocl.services.EssentialOCLGrammarAccess;

@Singleton
public class QVTOperationalGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TopLevelCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportImportCSParserRuleCall_0_0 = (RuleCall)cImportAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitUnitElementCSParserRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//TopLevelCS:
		//
		//	^import+=ImportCS* unit+=UnitElementCS*;
		public ParserRule getRule() { return rule; }

		//^import+=ImportCS* unit+=UnitElementCS*
		public Group getGroup() { return cGroup; }

		//^import+=ImportCS*
		public Assignment getImportAssignment_0() { return cImportAssignment_0; }

		//ImportCS
		public RuleCall getImportImportCSParserRuleCall_0_0() { return cImportImportCSParserRuleCall_0_0; }

		//unit+=UnitElementCS*
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//UnitElementCS
		public RuleCall getUnitUnitElementCSParserRuleCall_1_0() { return cUnitUnitElementCSParserRuleCall_1_0; }
	}

	public class ImportCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cImportKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cUnitAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cUnitUnitCSParserRuleCall_0_1_0 = (RuleCall)cUnitAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFromKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUnitAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnitUnitCSParserRuleCall_1_1_0 = (RuleCall)cUnitAssignment_1_1.eContents().get(0);
		private final Keyword cImportKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cGroup_1.eContents().get(3);
		private final Group cGroup_1_3_0 = (Group)cAlternatives_1_3.eContents().get(0);
		private final Assignment cNameAssignment_1_3_0_0 = (Assignment)cGroup_1_3_0.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_1_3_0_0_0 = (RuleCall)cNameAssignment_1_3_0_0.eContents().get(0);
		private final Group cGroup_1_3_0_1 = (Group)cGroup_1_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_0_1_0 = (Keyword)cGroup_1_3_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1_3_0_1_1 = (Assignment)cGroup_1_3_0_1.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_3_0_1_1_0 = (RuleCall)cNameAssignment_1_3_0_1_1.eContents().get(0);
		private final Assignment cAllAssignment_1_3_1 = (Assignment)cAlternatives_1_3.eContents().get(1);
		private final Keyword cAllAsteriskKeyword_1_3_1_0 = (Keyword)cAllAssignment_1_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//// ****** Imports ******
		// ImportCS:
		//
		//	"import" unit=UnitCS ";" | "from" unit=UnitCS "import" (name+=Identifier ("," name+=Identifier)* | all?="*") ";";
		public ParserRule getRule() { return rule; }

		//"import" unit=UnitCS ";" | "from" unit=UnitCS "import" (name+=Identifier ("," name+=Identifier)* | all?="*") ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"import" unit=UnitCS ";"
		public Group getGroup_0() { return cGroup_0; }

		//"import"
		public Keyword getImportKeyword_0_0() { return cImportKeyword_0_0; }

		//unit=UnitCS
		public Assignment getUnitAssignment_0_1() { return cUnitAssignment_0_1; }

		//UnitCS
		public RuleCall getUnitUnitCSParserRuleCall_0_1_0() { return cUnitUnitCSParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//"from" unit=UnitCS "import" (name+=Identifier ("," name+=Identifier)* | all?="*") ";"
		public Group getGroup_1() { return cGroup_1; }

		//"from"
		public Keyword getFromKeyword_1_0() { return cFromKeyword_1_0; }

		//unit=UnitCS
		public Assignment getUnitAssignment_1_1() { return cUnitAssignment_1_1; }

		//UnitCS
		public RuleCall getUnitUnitCSParserRuleCall_1_1_0() { return cUnitUnitCSParserRuleCall_1_1_0; }

		//"import"
		public Keyword getImportKeyword_1_2() { return cImportKeyword_1_2; }

		//name+=Identifier ("," name+=Identifier)* | all?="*"
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }

		//name+=Identifier ("," name+=Identifier)*
		public Group getGroup_1_3_0() { return cGroup_1_3_0; }

		//name+=Identifier
		public Assignment getNameAssignment_1_3_0_0() { return cNameAssignment_1_3_0_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_3_0_0_0() { return cNameIdentifierParserRuleCall_1_3_0_0_0; }

		//("," name+=Identifier)*
		public Group getGroup_1_3_0_1() { return cGroup_1_3_0_1; }

		//","
		public Keyword getCommaKeyword_1_3_0_1_0() { return cCommaKeyword_1_3_0_1_0; }

		//name+=Identifier
		public Assignment getNameAssignment_1_3_0_1_1() { return cNameAssignment_1_3_0_1_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_3_0_1_1_0() { return cNameIdentifierParserRuleCall_1_3_0_1_1_0; }

		//all?="*"
		public Assignment getAllAssignment_1_3_1() { return cAllAssignment_1_3_1; }

		//"*"
		public Keyword getAllAsteriskKeyword_1_3_1_0() { return cAllAsteriskKeyword_1_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }
	}

	public class UnitCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSegmentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSegmentIdentifierParserRuleCall_0_0 = (RuleCall)cSegmentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSegmentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSegmentIdentifierParserRuleCall_1_1_0 = (RuleCall)cSegmentAssignment_1_1.eContents().get(0);
		
		//UnitCS:
		//
		//	segment+=Identifier ("." segment+=Identifier)*;
		public ParserRule getRule() { return rule; }

		//segment+=Identifier ("." segment+=Identifier)*
		public Group getGroup() { return cGroup; }

		//segment+=Identifier
		public Assignment getSegmentAssignment_0() { return cSegmentAssignment_0; }

		//Identifier
		public RuleCall getSegmentIdentifierParserRuleCall_0_0() { return cSegmentIdentifierParserRuleCall_0_0; }

		//("." segment+=Identifier)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//segment+=Identifier
		public Assignment getSegmentAssignment_1_1() { return cSegmentAssignment_1_1; }

		//Identifier
		public RuleCall getSegmentIdentifierParserRuleCall_1_1_0() { return cSegmentIdentifierParserRuleCall_1_1_0; }
	}

	public class UnitElementCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitElementCS");
		private final RuleCall cMetamodelCSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// ****** definitions in a compilation unit *******
		// UnitElementCS:
		//
		//	MetamodelCS;
		public ParserRule getRule() { return rule; }

		//MetamodelCS
		public RuleCall getMetamodelCSParserRuleCall() { return cMetamodelCSParserRuleCall; }
	}

	public class CompleteSignatureCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompleteSignatureCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleSignatureCSParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cParamAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cParamParamCSParserRuleCall_1_1_0_0 = (RuleCall)cParamAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cParamAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cParamParamCSParserRuleCall_1_1_1_1_0 = (RuleCall)cParamAssignment_1_1_1_1.eContents().get(0);
		
		//// ****** General rules ******
		// CompleteSignatureCS:
		//
		//	SimpleSignatureCS (":" (param+=ParamCS ("," param+=ParamCS)*))?;
		public ParserRule getRule() { return rule; }

		//SimpleSignatureCS (":" (param+=ParamCS ("," param+=ParamCS)*))?
		public Group getGroup() { return cGroup; }

		//SimpleSignatureCS
		public RuleCall getSimpleSignatureCSParserRuleCall_0() { return cSimpleSignatureCSParserRuleCall_0; }

		//(":" (param+=ParamCS ("," param+=ParamCS)*))?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//param+=ParamCS ("," param+=ParamCS)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//param+=ParamCS
		public Assignment getParamAssignment_1_1_0() { return cParamAssignment_1_1_0; }

		//ParamCS
		public RuleCall getParamParamCSParserRuleCall_1_1_0_0() { return cParamParamCSParserRuleCall_1_1_0_0; }

		//("," param+=ParamCS)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//param+=ParamCS
		public Assignment getParamAssignment_1_1_1_1() { return cParamAssignment_1_1_1_1; }

		//ParamCS
		public RuleCall getParamParamCSParserRuleCall_1_1_1_1_0() { return cParamParamCSParserRuleCall_1_1_1_1_0; }
	}

	public class SimpleSignatureCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleSignatureCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleSignatureCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamParamCSParserRuleCall_2_0_0 = (RuleCall)cParamAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamParamCSParserRuleCall_2_1_1_0 = (RuleCall)cParamAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SimpleSignatureCS:
		//
		//	{SimpleSignatureCS} "(" (param+=ParamCS ("," param+=ParamCS)*)? ")";
		public ParserRule getRule() { return rule; }

		//{SimpleSignatureCS} "(" (param+=ParamCS ("," param+=ParamCS)*)? ")"
		public Group getGroup() { return cGroup; }

		//{SimpleSignatureCS}
		public Action getSimpleSignatureCSAction_0() { return cSimpleSignatureCSAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(param+=ParamCS ("," param+=ParamCS)*)?
		public Group getGroup_2() { return cGroup_2; }

		//param+=ParamCS
		public Assignment getParamAssignment_2_0() { return cParamAssignment_2_0; }

		//ParamCS
		public RuleCall getParamParamCSParserRuleCall_2_0_0() { return cParamParamCSParserRuleCall_2_0_0; }

		//("," param+=ParamCS)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//param+=ParamCS
		public Assignment getParamAssignment_2_1_1() { return cParamAssignment_2_1_1; }

		//ParamCS
		public RuleCall getParamParamCSParserRuleCall_2_1_1_0() { return cParamParamCSParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ParamCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionParamDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPathNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPathNamePathNameCSParserRuleCall_1_0_0 = (RuleCall)cPathNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypespecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypespecTypeExpCSParserRuleCall_2_0 = (RuleCall)cTypespecAssignment_2.eContents().get(0);
		private final Assignment cInitPartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitPartInitPartCSParserRuleCall_3_0 = (RuleCall)cInitPartAssignment_3.eContents().get(0);
		
		//ParamCS:
		//
		//	direction=ParamDirection? (pathName=PathNameCS ":") typespec=TypeExpCS initPart=InitPartCS?;
		public ParserRule getRule() { return rule; }

		//direction=ParamDirection? (pathName=PathNameCS ":") typespec=TypeExpCS initPart=InitPartCS?
		public Group getGroup() { return cGroup; }

		//direction=ParamDirection?
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }

		//ParamDirection
		public RuleCall getDirectionParamDirectionEnumRuleCall_0_0() { return cDirectionParamDirectionEnumRuleCall_0_0; }

		//pathName=PathNameCS ":"
		public Group getGroup_1() { return cGroup_1; }

		//pathName=PathNameCS
		public Assignment getPathNameAssignment_1_0() { return cPathNameAssignment_1_0; }

		//PathNameCS
		public RuleCall getPathNamePathNameCSParserRuleCall_1_0_0() { return cPathNamePathNameCSParserRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//typespec=TypeExpCS
		public Assignment getTypespecAssignment_2() { return cTypespecAssignment_2; }

		//TypeExpCS
		public RuleCall getTypespecTypeExpCSParserRuleCall_2_0() { return cTypespecTypeExpCSParserRuleCall_2_0; }

		//initPart=InitPartCS?
		public Assignment getInitPartAssignment_3() { return cInitPartAssignment_3; }

		//InitPartCS
		public RuleCall getInitPartInitPartCSParserRuleCall_3_0() { return cInitPartInitPartCSParserRuleCall_3_0; }
	}

	public class InitPartCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitPartCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInitOpInitOpEnumRuleCall_0_0 = (RuleCall)cInitOpAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpCSParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//InitPartCS:
		//
		//	initOp=InitOp expression=ExpCS;
		public ParserRule getRule() { return rule; }

		//initOp=InitOp expression=ExpCS
		public Group getGroup() { return cGroup; }

		//initOp=InitOp
		public Assignment getInitOpAssignment_0() { return cInitOpAssignment_0; }

		//InitOp
		public RuleCall getInitOpInitOpEnumRuleCall_0_0() { return cInitOpInitOpEnumRuleCall_0_0; }

		//expression=ExpCS
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//ExpCS
		public RuleCall getExpressionExpCSParserRuleCall_1_0() { return cExpressionExpCSParserRuleCall_1_0; }
	}

	public class MetamodelCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetamodelCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeywordMetamodelKindEnumRuleCall_0_0 = (RuleCall)cKeywordAssignment_0.eContents().get(0);
		private final Assignment cPathNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathNamePathNameCSParserRuleCall_1_0 = (RuleCall)cPathNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementMetamodelElementCSParserRuleCall_2_1_1_0 = (RuleCall)cElementAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//// General rules END
		// // ****** Syntax for defining explicitly metamodel contents ******
		// MetamodelCS:
		//
		//	keyword=MetamodelKind pathName=PathNameCS (";" | "{" element+=MetamodelElementCS* "}" ";"?);
		public ParserRule getRule() { return rule; }

		//keyword=MetamodelKind pathName=PathNameCS (";" | "{" element+=MetamodelElementCS* "}" ";"?)
		public Group getGroup() { return cGroup; }

		//keyword=MetamodelKind
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }

		//MetamodelKind
		public RuleCall getKeywordMetamodelKindEnumRuleCall_0_0() { return cKeywordMetamodelKindEnumRuleCall_0_0; }

		//pathName=PathNameCS
		public Assignment getPathNameAssignment_1() { return cPathNameAssignment_1; }

		//PathNameCS
		public RuleCall getPathNamePathNameCSParserRuleCall_1_0() { return cPathNamePathNameCSParserRuleCall_1_0; }

		//";" | "{" element+=MetamodelElementCS* "}" ";"?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//"{" element+=MetamodelElementCS* "}" ";"?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		//element+=MetamodelElementCS*
		public Assignment getElementAssignment_2_1_1() { return cElementAssignment_2_1_1; }

		//MetamodelElementCS
		public RuleCall getElementMetamodelElementCSParserRuleCall_2_1_1_0() { return cElementMetamodelElementCSParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }

		//";"?
		public Keyword getSemicolonKeyword_2_1_3() { return cSemicolonKeyword_2_1_3; }
	}

	public class MetamodelElementCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetamodelElementCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassifierCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerationCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTagCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//MetamodelElementCS:
		//
		//	ClassifierCS | EnumerationCS | TagCS;
		public ParserRule getRule() { return rule; }

		//ClassifierCS | EnumerationCS | TagCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassifierCS
		public RuleCall getClassifierCSParserRuleCall_0() { return cClassifierCSParserRuleCall_0; }

		//EnumerationCS
		public RuleCall getEnumerationCSParserRuleCall_1() { return cEnumerationCSParserRuleCall_1; }

		//TagCS
		public RuleCall getTagCSParserRuleCall_2() { return cTagCSParserRuleCall_2; }
	}

	public class ClassifierCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIntermediateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIntermediateIntermediateKeyword_0_0 = (Keyword)cIntermediateAssignment_0.eContents().get(0);
		private final Assignment cQualifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifierQualifierEnumRuleCall_1_0 = (RuleCall)cQualifierAssignment_1.eContents().get(0);
		private final Assignment cKeywordAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeywordClassifierKindEnumRuleCall_2_0 = (RuleCall)cKeywordAssignment_2.eContents().get(0);
		private final Assignment cPathNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathNamePathNameCSParserRuleCall_3_0 = (RuleCall)cPathNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cExtendsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cExtendsPathNameCSParserRuleCall_4_1_0_0 = (RuleCall)cExtendsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cExtendsAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cExtendsPathNameCSParserRuleCall_4_1_1_1_0 = (RuleCall)cExtendsAssignment_4_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cGroup_5_1.eContents().get(1);
		private final Assignment cFeatureAssignment_5_1_1_0 = (Assignment)cGroup_5_1_1.eContents().get(0);
		private final RuleCall cFeatureClassifierFeatureCSParserRuleCall_5_1_1_0_0 = (RuleCall)cFeatureAssignment_5_1_1_0.eContents().get(0);
		private final Group cGroup_5_1_1_1 = (Group)cGroup_5_1_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_5_1_1_1_0 = (Keyword)cGroup_5_1_1_1.eContents().get(0);
		private final Assignment cFeatureAssignment_5_1_1_1_1 = (Assignment)cGroup_5_1_1_1.eContents().get(1);
		private final RuleCall cFeatureClassifierFeatureCSParserRuleCall_5_1_1_1_1_0 = (RuleCall)cFeatureAssignment_5_1_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1_1_2 = (Keyword)cGroup_5_1_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_5_1_2 = (Keyword)cGroup_5_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_5_1_3 = (Keyword)cGroup_5_1.eContents().get(3);
		
		//ClassifierCS:
		//
		//	intermediate?="intermediate"? qualifier+=Qualifier* keyword=ClassifierKind pathName=PathNameCS ("extends"
		//
		//	(extends+=PathNameCS ("," extends+=PathNameCS)*))? (";" | "{" (feature+=ClassifierFeatureCS (";"
		//
		//	feature+=ClassifierFeatureCS)* ";"?)? "}" ";"?);
		public ParserRule getRule() { return rule; }

		//intermediate?="intermediate"? qualifier+=Qualifier* keyword=ClassifierKind pathName=PathNameCS ("extends"
		//
		//(extends+=PathNameCS ("," extends+=PathNameCS)*))? (";" | "{" (feature+=ClassifierFeatureCS (";"
		//
		//feature+=ClassifierFeatureCS)* ";"?)? "}" ";"?)
		public Group getGroup() { return cGroup; }

		//intermediate?="intermediate"?
		public Assignment getIntermediateAssignment_0() { return cIntermediateAssignment_0; }

		//"intermediate"
		public Keyword getIntermediateIntermediateKeyword_0_0() { return cIntermediateIntermediateKeyword_0_0; }

		//qualifier+=Qualifier*
		public Assignment getQualifierAssignment_1() { return cQualifierAssignment_1; }

		//Qualifier
		public RuleCall getQualifierQualifierEnumRuleCall_1_0() { return cQualifierQualifierEnumRuleCall_1_0; }

		//keyword=ClassifierKind
		public Assignment getKeywordAssignment_2() { return cKeywordAssignment_2; }

		//ClassifierKind
		public RuleCall getKeywordClassifierKindEnumRuleCall_2_0() { return cKeywordClassifierKindEnumRuleCall_2_0; }

		//pathName=PathNameCS
		public Assignment getPathNameAssignment_3() { return cPathNameAssignment_3; }

		//PathNameCS
		public RuleCall getPathNamePathNameCSParserRuleCall_3_0() { return cPathNamePathNameCSParserRuleCall_3_0; }

		//("extends" (extends+=PathNameCS ("," extends+=PathNameCS)*))?
		public Group getGroup_4() { return cGroup_4; }

		//"extends"
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }

		//extends+=PathNameCS ("," extends+=PathNameCS)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//extends+=PathNameCS
		public Assignment getExtendsAssignment_4_1_0() { return cExtendsAssignment_4_1_0; }

		//PathNameCS
		public RuleCall getExtendsPathNameCSParserRuleCall_4_1_0_0() { return cExtendsPathNameCSParserRuleCall_4_1_0_0; }

		//("," extends+=PathNameCS)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }

		//extends+=PathNameCS
		public Assignment getExtendsAssignment_4_1_1_1() { return cExtendsAssignment_4_1_1_1; }

		//PathNameCS
		public RuleCall getExtendsPathNameCSParserRuleCall_4_1_1_1_0() { return cExtendsPathNameCSParserRuleCall_4_1_1_1_0; }

		//";" | "{" (feature+=ClassifierFeatureCS (";" feature+=ClassifierFeatureCS)* ";"?)? "}" ";"?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//";"
		public Keyword getSemicolonKeyword_5_0() { return cSemicolonKeyword_5_0; }

		//"{" (feature+=ClassifierFeatureCS (";" feature+=ClassifierFeatureCS)* ";"?)? "}" ";"?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1_0() { return cLeftCurlyBracketKeyword_5_1_0; }

		//(feature+=ClassifierFeatureCS (";" feature+=ClassifierFeatureCS)* ";"?)?
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//feature+=ClassifierFeatureCS
		public Assignment getFeatureAssignment_5_1_1_0() { return cFeatureAssignment_5_1_1_0; }

		//ClassifierFeatureCS
		public RuleCall getFeatureClassifierFeatureCSParserRuleCall_5_1_1_0_0() { return cFeatureClassifierFeatureCSParserRuleCall_5_1_1_0_0; }

		//(";" feature+=ClassifierFeatureCS)*
		public Group getGroup_5_1_1_1() { return cGroup_5_1_1_1; }

		//";"
		public Keyword getSemicolonKeyword_5_1_1_1_0() { return cSemicolonKeyword_5_1_1_1_0; }

		//feature+=ClassifierFeatureCS
		public Assignment getFeatureAssignment_5_1_1_1_1() { return cFeatureAssignment_5_1_1_1_1; }

		//ClassifierFeatureCS
		public RuleCall getFeatureClassifierFeatureCSParserRuleCall_5_1_1_1_1_0() { return cFeatureClassifierFeatureCSParserRuleCall_5_1_1_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_5_1_1_2() { return cSemicolonKeyword_5_1_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_1_2() { return cRightCurlyBracketKeyword_5_1_2; }

		//";"?
		public Keyword getSemicolonKeyword_5_1_3() { return cSemicolonKeyword_5_1_3; }
	}

	public class ClassifierFeatureCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierFeatureCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassifierPropertyCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassifierOperationCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTagCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ClassifierFeatureCS:
		//
		//	ClassifierPropertyCS | ClassifierOperationCS | TagCS;
		public ParserRule getRule() { return rule; }

		//ClassifierPropertyCS | ClassifierOperationCS | TagCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassifierPropertyCS
		public RuleCall getClassifierPropertyCSParserRuleCall_0() { return cClassifierPropertyCSParserRuleCall_0; }

		//ClassifierOperationCS
		public RuleCall getClassifierOperationCSParserRuleCall_1() { return cClassifierOperationCSParserRuleCall_1; }

		//TagCS
		public RuleCall getTagCSParserRuleCall_2() { return cTagCSParserRuleCall_2; }
	}

	public class ClassifierPropertyCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierPropertyCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cStereotypeAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cStereotypeIdentifierParserRuleCall_0_1_0_0 = (RuleCall)cStereotypeAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cStereotypeAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cStereotypeIdentifierParserRuleCall_0_1_1_1_0 = (RuleCall)cStereotypeAssignment_0_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cFeatureKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureKeyFeatureKeyEnumRuleCall_1_0 = (RuleCall)cFeatureKeyAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypespecAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypespecTypeExpCSParserRuleCall_4_0 = (RuleCall)cTypespecAssignment_4.eContents().get(0);
		private final Assignment cInitPartAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInitPartInitPartCSParserRuleCall_5_0 = (RuleCall)cInitPartAssignment_5.eContents().get(0);
		private final Assignment cMultiplicityAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMultiplicityMultiplicityCSParserRuleCall_6_0 = (RuleCall)cMultiplicityAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cOppositesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cTildeAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final Keyword cTildeTildeKeyword_7_1_0 = (Keyword)cTildeAssignment_7_1.eContents().get(0);
		private final Assignment cOppositeIdentifierAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cOppositeIdentifierIdentifierParserRuleCall_7_2_0 = (RuleCall)cOppositeIdentifierAssignment_7_2.eContents().get(0);
		private final Assignment cOppositeMultiplicityAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cOppositeMultiplicityMultiplicityCSParserRuleCall_7_3_0 = (RuleCall)cOppositeMultiplicityAssignment_7_3.eContents().get(0);
		
		//ClassifierPropertyCS:
		//
		//	("<<" (stereotype+=Identifier ("," stereotype+=Identifier)*) ">>")? featureKey+=FeatureKey* name=Identifier ":"
		//
		//	typespec=TypeExpCS initPart=InitPartCS? multiplicity=MultiplicityCS? ("opposites" tilde?="~"?
		//
		//	oppositeIdentifier=Identifier oppositeMultiplicity=MultiplicityCS?)?;
		public ParserRule getRule() { return rule; }

		//("<<" (stereotype+=Identifier ("," stereotype+=Identifier)*) ">>")? featureKey+=FeatureKey* name=Identifier ":"
		//
		//typespec=TypeExpCS initPart=InitPartCS? multiplicity=MultiplicityCS? ("opposites" tilde?="~"?
		//
		//oppositeIdentifier=Identifier oppositeMultiplicity=MultiplicityCS?)?
		public Group getGroup() { return cGroup; }

		//("<<" (stereotype+=Identifier ("," stereotype+=Identifier)*) ">>")?
		public Group getGroup_0() { return cGroup_0; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_0_0() { return cLessThanSignLessThanSignKeyword_0_0; }

		//stereotype+=Identifier ("," stereotype+=Identifier)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//stereotype+=Identifier
		public Assignment getStereotypeAssignment_0_1_0() { return cStereotypeAssignment_0_1_0; }

		//Identifier
		public RuleCall getStereotypeIdentifierParserRuleCall_0_1_0_0() { return cStereotypeIdentifierParserRuleCall_0_1_0_0; }

		//("," stereotype+=Identifier)*
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//","
		public Keyword getCommaKeyword_0_1_1_0() { return cCommaKeyword_0_1_1_0; }

		//stereotype+=Identifier
		public Assignment getStereotypeAssignment_0_1_1_1() { return cStereotypeAssignment_0_1_1_1; }

		//Identifier
		public RuleCall getStereotypeIdentifierParserRuleCall_0_1_1_1_0() { return cStereotypeIdentifierParserRuleCall_0_1_1_1_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_0_2() { return cGreaterThanSignGreaterThanSignKeyword_0_2; }

		//featureKey+=FeatureKey*
		public Assignment getFeatureKeyAssignment_1() { return cFeatureKeyAssignment_1; }

		//FeatureKey
		public RuleCall getFeatureKeyFeatureKeyEnumRuleCall_1_0() { return cFeatureKeyFeatureKeyEnumRuleCall_1_0; }

		//name=Identifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_2_0() { return cNameIdentifierParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//typespec=TypeExpCS
		public Assignment getTypespecAssignment_4() { return cTypespecAssignment_4; }

		//TypeExpCS
		public RuleCall getTypespecTypeExpCSParserRuleCall_4_0() { return cTypespecTypeExpCSParserRuleCall_4_0; }

		//initPart=InitPartCS?
		public Assignment getInitPartAssignment_5() { return cInitPartAssignment_5; }

		//InitPartCS
		public RuleCall getInitPartInitPartCSParserRuleCall_5_0() { return cInitPartInitPartCSParserRuleCall_5_0; }

		//multiplicity=MultiplicityCS?
		public Assignment getMultiplicityAssignment_6() { return cMultiplicityAssignment_6; }

		//MultiplicityCS
		public RuleCall getMultiplicityMultiplicityCSParserRuleCall_6_0() { return cMultiplicityMultiplicityCSParserRuleCall_6_0; }

		//("opposites" tilde?="~"? oppositeIdentifier=Identifier oppositeMultiplicity=MultiplicityCS?)?
		public Group getGroup_7() { return cGroup_7; }

		//"opposites"
		public Keyword getOppositesKeyword_7_0() { return cOppositesKeyword_7_0; }

		//tilde?="~"?
		public Assignment getTildeAssignment_7_1() { return cTildeAssignment_7_1; }

		//"~"
		public Keyword getTildeTildeKeyword_7_1_0() { return cTildeTildeKeyword_7_1_0; }

		//oppositeIdentifier=Identifier
		public Assignment getOppositeIdentifierAssignment_7_2() { return cOppositeIdentifierAssignment_7_2; }

		//Identifier
		public RuleCall getOppositeIdentifierIdentifierParserRuleCall_7_2_0() { return cOppositeIdentifierIdentifierParserRuleCall_7_2_0; }

		//oppositeMultiplicity=MultiplicityCS?
		public Assignment getOppositeMultiplicityAssignment_7_3() { return cOppositeMultiplicityAssignment_7_3; }

		//MultiplicityCS
		public RuleCall getOppositeMultiplicityMultiplicityCSParserRuleCall_7_3_0() { return cOppositeMultiplicityMultiplicityCSParserRuleCall_7_3_0; }
	}

	public class MultiplicityCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicityCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLowerAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLowerLOWERParserRuleCall_1_0_0 = (RuleCall)cLowerAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cUpperAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUpperUPPERParserRuleCall_2_0 = (RuleCall)cUpperAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MultiplicityCS:
		//
		//	"[" (lower=LOWER "...")? upper=UPPER "]";
		public ParserRule getRule() { return rule; }

		//"[" (lower=LOWER "...")? upper=UPPER "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//(lower=LOWER "...")?
		public Group getGroup_1() { return cGroup_1; }

		//lower=LOWER
		public Assignment getLowerAssignment_1_0() { return cLowerAssignment_1_0; }

		//LOWER
		public RuleCall getLowerLOWERParserRuleCall_1_0_0() { return cLowerLOWERParserRuleCall_1_0_0; }

		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_1_1() { return cFullStopFullStopFullStopKeyword_1_1; }

		//upper=UPPER
		public Assignment getUpperAssignment_2() { return cUpperAssignment_2; }

		//UPPER
		public RuleCall getUpperUPPERParserRuleCall_2_0() { return cUpperUPPERParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ClassifierOperationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierOperationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cStereotypeAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cStereotypeIdentifierParserRuleCall_0_1_0_0 = (RuleCall)cStereotypeAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cStereotypeAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cStereotypeIdentifierParserRuleCall_0_1_1_1_0 = (RuleCall)cStereotypeAssignment_0_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cFeatureKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureKeyFeatureKeyEnumRuleCall_1_0 = (RuleCall)cFeatureKeyAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypespecAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypespecTypeExpCSParserRuleCall_4_0 = (RuleCall)cTypespecAssignment_4.eContents().get(0);
		private final Assignment cSignatureAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSignatureCompleteSignatureCSParserRuleCall_5_0 = (RuleCall)cSignatureAssignment_5.eContents().get(0);
		
		//ClassifierOperationCS:
		//
		//	("<<" (stereotype+=Identifier ("," stereotype+=Identifier)*) ">>")? featureKey+=FeatureKey* name=Identifier ":"
		//
		//	typespec=TypeExpCS signature=CompleteSignatureCS;
		public ParserRule getRule() { return rule; }

		//("<<" (stereotype+=Identifier ("," stereotype+=Identifier)*) ">>")? featureKey+=FeatureKey* name=Identifier ":"
		//
		//typespec=TypeExpCS signature=CompleteSignatureCS
		public Group getGroup() { return cGroup; }

		//("<<" (stereotype+=Identifier ("," stereotype+=Identifier)*) ">>")?
		public Group getGroup_0() { return cGroup_0; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_0_0() { return cLessThanSignLessThanSignKeyword_0_0; }

		//stereotype+=Identifier ("," stereotype+=Identifier)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//stereotype+=Identifier
		public Assignment getStereotypeAssignment_0_1_0() { return cStereotypeAssignment_0_1_0; }

		//Identifier
		public RuleCall getStereotypeIdentifierParserRuleCall_0_1_0_0() { return cStereotypeIdentifierParserRuleCall_0_1_0_0; }

		//("," stereotype+=Identifier)*
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//","
		public Keyword getCommaKeyword_0_1_1_0() { return cCommaKeyword_0_1_1_0; }

		//stereotype+=Identifier
		public Assignment getStereotypeAssignment_0_1_1_1() { return cStereotypeAssignment_0_1_1_1; }

		//Identifier
		public RuleCall getStereotypeIdentifierParserRuleCall_0_1_1_1_0() { return cStereotypeIdentifierParserRuleCall_0_1_1_1_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_0_2() { return cGreaterThanSignGreaterThanSignKeyword_0_2; }

		//featureKey+=FeatureKey*
		public Assignment getFeatureKeyAssignment_1() { return cFeatureKeyAssignment_1; }

		//FeatureKey
		public RuleCall getFeatureKeyFeatureKeyEnumRuleCall_1_0() { return cFeatureKeyFeatureKeyEnumRuleCall_1_0; }

		//name=Identifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_2_0() { return cNameIdentifierParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//typespec=TypeExpCS
		public Assignment getTypespecAssignment_4() { return cTypespecAssignment_4; }

		//TypeExpCS
		public RuleCall getTypespecTypeExpCSParserRuleCall_4_0() { return cTypespecTypeExpCSParserRuleCall_4_0; }

		//signature=CompleteSignatureCS
		public Assignment getSignatureAssignment_5() { return cSignatureAssignment_5; }

		//CompleteSignatureCS
		public RuleCall getSignatureCompleteSignatureCSParserRuleCall_5_0() { return cSignatureCompleteSignatureCSParserRuleCall_5_0; }
	}

	public class EnumerationCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Assignment cLiteralAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cLiteralIdentifierParserRuleCall_2_1_1_0_0 = (RuleCall)cLiteralAssignment_2_1_1_0.eContents().get(0);
		private final Group cGroup_2_1_1_1 = (Group)cGroup_2_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_1_0 = (Keyword)cGroup_2_1_1_1.eContents().get(0);
		private final Assignment cLiteralAssignment_2_1_1_1_1 = (Assignment)cGroup_2_1_1_1.eContents().get(1);
		private final RuleCall cLiteralIdentifierParserRuleCall_2_1_1_1_1_0 = (RuleCall)cLiteralAssignment_2_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//EnumerationCS:
		//
		//	"enum" name=Identifier (";" | "{" (literal+=Identifier ("," literal+=Identifier)*) "}" ";"?);
		public ParserRule getRule() { return rule; }

		//"enum" name=Identifier (";" | "{" (literal+=Identifier ("," literal+=Identifier)*) "}" ";"?)
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//";" | "{" (literal+=Identifier ("," literal+=Identifier)*) "}" ";"?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//"{" (literal+=Identifier ("," literal+=Identifier)*) "}" ";"?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		//literal+=Identifier ("," literal+=Identifier)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//literal+=Identifier
		public Assignment getLiteralAssignment_2_1_1_0() { return cLiteralAssignment_2_1_1_0; }

		//Identifier
		public RuleCall getLiteralIdentifierParserRuleCall_2_1_1_0_0() { return cLiteralIdentifierParserRuleCall_2_1_1_0_0; }

		//("," literal+=Identifier)*
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }

		//","
		public Keyword getCommaKeyword_2_1_1_1_0() { return cCommaKeyword_2_1_1_1_0; }

		//literal+=Identifier
		public Assignment getLiteralAssignment_2_1_1_1_1() { return cLiteralAssignment_2_1_1_1_1; }

		//Identifier
		public RuleCall getLiteralIdentifierParserRuleCall_2_1_1_1_1_0() { return cLiteralIdentifierParserRuleCall_2_1_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }

		//";"?
		public Keyword getSemicolonKeyword_2_1_3() { return cSemicolonKeyword_2_1_3; }
	}

	public class TagCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TagCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTagKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdStringLiteralParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cPathNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathNamePathNameCSParserRuleCall_2_0 = (RuleCall)cPathNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpCSParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TagCS:
		//
		//	"tag" id=StringLiteral pathName=PathNameCS ("=" expression=ExpCS)? ";";
		public ParserRule getRule() { return rule; }

		//"tag" id=StringLiteral pathName=PathNameCS ("=" expression=ExpCS)? ";"
		public Group getGroup() { return cGroup; }

		//"tag"
		public Keyword getTagKeyword_0() { return cTagKeyword_0; }

		//id=StringLiteral
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//StringLiteral
		public RuleCall getIdStringLiteralParserRuleCall_1_0() { return cIdStringLiteralParserRuleCall_1_0; }

		//pathName=PathNameCS
		public Assignment getPathNameAssignment_2() { return cPathNameAssignment_2; }

		//PathNameCS
		public RuleCall getPathNamePathNameCSParserRuleCall_2_0() { return cPathNamePathNameCSParserRuleCall_2_0; }

		//("=" expression=ExpCS)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//expression=ExpCS
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }

		//ExpCS
		public RuleCall getExpressionExpCSParserRuleCall_3_1_0() { return cExpressionExpCSParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TypedefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedefCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypespecAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypespecTypeExpCSParserRuleCall_3_0 = (RuleCall)cTypespecAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConditionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConditionExpCSParserRuleCall_4_1_0 = (RuleCall)cConditionAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// typedefs
		// TypedefCS:
		//
		//	"typedef" name=Identifier "=" typespec=TypeExpCS ("[" condition=ExpCS "]")? ";";
		public ParserRule getRule() { return rule; }

		//"typedef" name=Identifier "=" typespec=TypeExpCS ("[" condition=ExpCS "]")? ";"
		public Group getGroup() { return cGroup; }

		//"typedef"
		public Keyword getTypedefKeyword_0() { return cTypedefKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//typespec=TypeExpCS
		public Assignment getTypespecAssignment_3() { return cTypespecAssignment_3; }

		//TypeExpCS
		public RuleCall getTypespecTypeExpCSParserRuleCall_3_0() { return cTypespecTypeExpCSParserRuleCall_3_0; }

		//("[" condition=ExpCS "]")?
		public Group getGroup_4() { return cGroup_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }

		//condition=ExpCS
		public Assignment getConditionAssignment_4_1() { return cConditionAssignment_4_1; }

		//ExpCS
		public RuleCall getConditionExpCSParserRuleCall_4_1_0() { return cConditionExpCSParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	
	
	public class ClassifierKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDATATYPEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDATATYPEDatatypeKeyword_0_0 = (Keyword)cDATATYPEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPRIMITIVEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPRIMITIVEPrimitiveKeyword_1_0 = (Keyword)cPRIMITIVEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEXCEPTIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEXCEPTIONExceptionKeyword_2_0 = (Keyword)cEXCEPTIONEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCLASSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCLASSClassKeyword_3_0 = (Keyword)cCLASSEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ClassifierKind:
		//
		//	DATATYPE="datatype" | PRIMITIVE="primitive" | EXCEPTION="exception" | CLASS="class";
		public EnumRule getRule() { return rule; }

		//DATATYPE="datatype" | PRIMITIVE="primitive" | EXCEPTION="exception" | CLASS="class"
		public Alternatives getAlternatives() { return cAlternatives; }

		//DATATYPE="datatype"
		public EnumLiteralDeclaration getDATATYPEEnumLiteralDeclaration_0() { return cDATATYPEEnumLiteralDeclaration_0; }

		//"datatype"
		public Keyword getDATATYPEDatatypeKeyword_0_0() { return cDATATYPEDatatypeKeyword_0_0; }

		//PRIMITIVE="primitive"
		public EnumLiteralDeclaration getPRIMITIVEEnumLiteralDeclaration_1() { return cPRIMITIVEEnumLiteralDeclaration_1; }

		//"primitive"
		public Keyword getPRIMITIVEPrimitiveKeyword_1_0() { return cPRIMITIVEPrimitiveKeyword_1_0; }

		//EXCEPTION="exception"
		public EnumLiteralDeclaration getEXCEPTIONEnumLiteralDeclaration_2() { return cEXCEPTIONEnumLiteralDeclaration_2; }

		//"exception"
		public Keyword getEXCEPTIONExceptionKeyword_2_0() { return cEXCEPTIONExceptionKeyword_2_0; }

		//CLASS="class"
		public EnumLiteralDeclaration getCLASSEnumLiteralDeclaration_3() { return cCLASSEnumLiteralDeclaration_3; }

		//"class"
		public Keyword getCLASSClassKeyword_3_0() { return cCLASSClassKeyword_3_0; }
	}

	public class FeatureKeyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCOMPOSESEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCOMPOSESComposesKeyword_0_0 = (Keyword)cCOMPOSESEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cREFERRENCESEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cREFERRENCESReferencesKeyword_1_0 = (Keyword)cREFERRENCESEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREADONLYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREADONLYReadonlyKeyword_2_0 = (Keyword)cREADONLYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDERIVEDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDERIVEDDerivedKeyword_3_0 = (Keyword)cDERIVEDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSTATICEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSTATICStaticKeyword_4_0 = (Keyword)cSTATICEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum FeatureKey:
		//
		//	COMPOSES="composes" | REFERRENCES="references" | READONLY="readonly" | DERIVED="derived" | STATIC="static";
		public EnumRule getRule() { return rule; }

		//COMPOSES="composes" | REFERRENCES="references" | READONLY="readonly" | DERIVED="derived" | STATIC="static"
		public Alternatives getAlternatives() { return cAlternatives; }

		//COMPOSES="composes"
		public EnumLiteralDeclaration getCOMPOSESEnumLiteralDeclaration_0() { return cCOMPOSESEnumLiteralDeclaration_0; }

		//"composes"
		public Keyword getCOMPOSESComposesKeyword_0_0() { return cCOMPOSESComposesKeyword_0_0; }

		//REFERRENCES="references"
		public EnumLiteralDeclaration getREFERRENCESEnumLiteralDeclaration_1() { return cREFERRENCESEnumLiteralDeclaration_1; }

		//"references"
		public Keyword getREFERRENCESReferencesKeyword_1_0() { return cREFERRENCESReferencesKeyword_1_0; }

		//READONLY="readonly"
		public EnumLiteralDeclaration getREADONLYEnumLiteralDeclaration_2() { return cREADONLYEnumLiteralDeclaration_2; }

		//"readonly"
		public Keyword getREADONLYReadonlyKeyword_2_0() { return cREADONLYReadonlyKeyword_2_0; }

		//DERIVED="derived"
		public EnumLiteralDeclaration getDERIVEDEnumLiteralDeclaration_3() { return cDERIVEDEnumLiteralDeclaration_3; }

		//"derived"
		public Keyword getDERIVEDDerivedKeyword_3_0() { return cDERIVEDDerivedKeyword_3_0; }

		//STATIC="static"
		public EnumLiteralDeclaration getSTATICEnumLiteralDeclaration_4() { return cSTATICEnumLiteralDeclaration_4; }

		//"static"
		public Keyword getSTATICStaticKeyword_4_0() { return cSTATICStaticKeyword_4_0; }
	}

	public class InitOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "InitOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALSEqualsSignKeyword_0_0 = (Keyword)cEQUALSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCOLON_EQUALSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCOLON_EQUALSColonEqualsSignKeyword_1_0 = (Keyword)cCOLON_EQUALSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCOLON_COLON_EQUALSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCOLON_COLON_EQUALSColonColonEqualsSignKeyword_2_0 = (Keyword)cCOLON_COLON_EQUALSEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum InitOp:
		//
		//	EQUALS="=" | COLON_EQUALS=":=" | COLON_COLON_EQUALS="::=";
		public EnumRule getRule() { return rule; }

		//EQUALS="=" | COLON_EQUALS=":=" | COLON_COLON_EQUALS="::="
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQUALS="="
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_0() { return cEQUALSEnumLiteralDeclaration_0; }

		//"="
		public Keyword getEQUALSEqualsSignKeyword_0_0() { return cEQUALSEqualsSignKeyword_0_0; }

		//COLON_EQUALS=":="
		public EnumLiteralDeclaration getCOLON_EQUALSEnumLiteralDeclaration_1() { return cCOLON_EQUALSEnumLiteralDeclaration_1; }

		//":="
		public Keyword getCOLON_EQUALSColonEqualsSignKeyword_1_0() { return cCOLON_EQUALSColonEqualsSignKeyword_1_0; }

		//COLON_COLON_EQUALS="::="
		public EnumLiteralDeclaration getCOLON_COLON_EQUALSEnumLiteralDeclaration_2() { return cCOLON_COLON_EQUALSEnumLiteralDeclaration_2; }

		//"::="
		public Keyword getCOLON_COLON_EQUALSColonColonEqualsSignKeyword_2_0() { return cCOLON_COLON_EQUALSColonColonEqualsSignKeyword_2_0; }
	}

	public class MetamodelKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MetamodelKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMETAMODELEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMETAMODELMetamodelKeyword_0_0 = (Keyword)cMETAMODELEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPACKAGEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPACKAGEPackageKeyword_1_0 = (Keyword)cPACKAGEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MetamodelKind:
		//
		//	METAMODEL="metamodel" | PACKAGE="package";
		public EnumRule getRule() { return rule; }

		//METAMODEL="metamodel" | PACKAGE="package"
		public Alternatives getAlternatives() { return cAlternatives; }

		//METAMODEL="metamodel"
		public EnumLiteralDeclaration getMETAMODELEnumLiteralDeclaration_0() { return cMETAMODELEnumLiteralDeclaration_0; }

		//"metamodel"
		public Keyword getMETAMODELMetamodelKeyword_0_0() { return cMETAMODELMetamodelKeyword_0_0; }

		//PACKAGE="package"
		public EnumLiteralDeclaration getPACKAGEEnumLiteralDeclaration_1() { return cPACKAGEEnumLiteralDeclaration_1; }

		//"package"
		public Keyword getPACKAGEPackageKeyword_1_0() { return cPACKAGEPackageKeyword_1_0; }
	}

	public class ParamDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ParamDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINInKeyword_0_0 = (Keyword)cINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINOUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINOUTInoutKeyword_1_0 = (Keyword)cINOUTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOUTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOUTOutKeyword_2_0 = (Keyword)cOUTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ParamDirection:
		//
		//	IN="in" | INOUT="inout" | OUT="out";
		public EnumRule getRule() { return rule; }

		//IN="in" | INOUT="inout" | OUT="out"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IN="in"
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_0() { return cINEnumLiteralDeclaration_0; }

		//"in"
		public Keyword getINInKeyword_0_0() { return cINInKeyword_0_0; }

		//INOUT="inout"
		public EnumLiteralDeclaration getINOUTEnumLiteralDeclaration_1() { return cINOUTEnumLiteralDeclaration_1; }

		//"inout"
		public Keyword getINOUTInoutKeyword_1_0() { return cINOUTInoutKeyword_1_0; }

		//OUT="out"
		public EnumLiteralDeclaration getOUTEnumLiteralDeclaration_2() { return cOUTEnumLiteralDeclaration_2; }

		//"out"
		public Keyword getOUTOutKeyword_2_0() { return cOUTOutKeyword_2_0; }
	}

	public class QualifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Qualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBLACKBOXEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBLACKBOXBlackboxKeyword_0_0 = (Keyword)cBLACKBOXEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cABSTRACTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cABSTRACTAbstractKeyword_1_0 = (Keyword)cABSTRACTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTATICEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTATICStaticKeyword_2_0 = (Keyword)cSTATICEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Qualifier:
		//
		//	BLACKBOX="blackbox" | ABSTRACT="abstract" | STATIC="static";
		public EnumRule getRule() { return rule; }

		//BLACKBOX="blackbox" | ABSTRACT="abstract" | STATIC="static"
		public Alternatives getAlternatives() { return cAlternatives; }

		//BLACKBOX="blackbox"
		public EnumLiteralDeclaration getBLACKBOXEnumLiteralDeclaration_0() { return cBLACKBOXEnumLiteralDeclaration_0; }

		//"blackbox"
		public Keyword getBLACKBOXBlackboxKeyword_0_0() { return cBLACKBOXBlackboxKeyword_0_0; }

		//ABSTRACT="abstract"
		public EnumLiteralDeclaration getABSTRACTEnumLiteralDeclaration_1() { return cABSTRACTEnumLiteralDeclaration_1; }

		//"abstract"
		public Keyword getABSTRACTAbstractKeyword_1_0() { return cABSTRACTAbstractKeyword_1_0; }

		//STATIC="static"
		public EnumLiteralDeclaration getSTATICEnumLiteralDeclaration_2() { return cSTATICEnumLiteralDeclaration_2; }

		//"static"
		public Keyword getSTATICStaticKeyword_2_0() { return cSTATICStaticKeyword_2_0; }
	}
	
	private TopLevelCSElements pTopLevelCS;
	private ClassifierKindElements unknownRuleClassifierKind;
	private FeatureKeyElements unknownRuleFeatureKey;
	private InitOpElements unknownRuleInitOp;
	private MetamodelKindElements unknownRuleMetamodelKind;
	private ParamDirectionElements unknownRuleParamDirection;
	private QualifierElements unknownRuleQualifier;
	private ImportCSElements pImportCS;
	private UnitCSElements pUnitCS;
	private UnitElementCSElements pUnitElementCS;
	private CompleteSignatureCSElements pCompleteSignatureCS;
	private SimpleSignatureCSElements pSimpleSignatureCS;
	private ParamCSElements pParamCS;
	private InitPartCSElements pInitPartCS;
	private MetamodelCSElements pMetamodelCS;
	private MetamodelElementCSElements pMetamodelElementCS;
	private ClassifierCSElements pClassifierCS;
	private ClassifierFeatureCSElements pClassifierFeatureCS;
	private ClassifierPropertyCSElements pClassifierPropertyCS;
	private MultiplicityCSElements pMultiplicityCS;
	private ClassifierOperationCSElements pClassifierOperationCS;
	private EnumerationCSElements pEnumerationCS;
	private TagCSElements pTagCS;
	private TypedefCSElements pTypedefCS;
	
	private final Grammar grammar;

	private ImperativeOCLGrammarAccess gaImperativeOCL;

	@Inject
	public QVTOperationalGrammarAccess(GrammarProvider grammarProvider,
		ImperativeOCLGrammarAccess gaImperativeOCL) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaImperativeOCL = gaImperativeOCL;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.qvto.examples.xtext.qvtoperational.QVTOperational".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ImperativeOCLGrammarAccess getImperativeOCLGrammarAccess() {
		return gaImperativeOCL;
	}

	
	//TopLevelCS:
	//
	//	^import+=ImportCS* unit+=UnitElementCS*;
	public TopLevelCSElements getTopLevelCSAccess() {
		return (pTopLevelCS != null) ? pTopLevelCS : (pTopLevelCS = new TopLevelCSElements());
	}
	
	public ParserRule getTopLevelCSRule() {
		return getTopLevelCSAccess().getRule();
	}

	//enum ClassifierKind:
	//
	//	DATATYPE="datatype" | PRIMITIVE="primitive" | EXCEPTION="exception" | CLASS="class";
	public ClassifierKindElements getClassifierKindAccess() {
		return (unknownRuleClassifierKind != null) ? unknownRuleClassifierKind : (unknownRuleClassifierKind = new ClassifierKindElements());
	}
	
	public EnumRule getClassifierKindRule() {
		return getClassifierKindAccess().getRule();
	}

	//enum FeatureKey:
	//
	//	COMPOSES="composes" | REFERRENCES="references" | READONLY="readonly" | DERIVED="derived" | STATIC="static";
	public FeatureKeyElements getFeatureKeyAccess() {
		return (unknownRuleFeatureKey != null) ? unknownRuleFeatureKey : (unknownRuleFeatureKey = new FeatureKeyElements());
	}
	
	public EnumRule getFeatureKeyRule() {
		return getFeatureKeyAccess().getRule();
	}

	//enum InitOp:
	//
	//	EQUALS="=" | COLON_EQUALS=":=" | COLON_COLON_EQUALS="::=";
	public InitOpElements getInitOpAccess() {
		return (unknownRuleInitOp != null) ? unknownRuleInitOp : (unknownRuleInitOp = new InitOpElements());
	}
	
	public EnumRule getInitOpRule() {
		return getInitOpAccess().getRule();
	}

	//enum MetamodelKind:
	//
	//	METAMODEL="metamodel" | PACKAGE="package";
	public MetamodelKindElements getMetamodelKindAccess() {
		return (unknownRuleMetamodelKind != null) ? unknownRuleMetamodelKind : (unknownRuleMetamodelKind = new MetamodelKindElements());
	}
	
	public EnumRule getMetamodelKindRule() {
		return getMetamodelKindAccess().getRule();
	}

	//enum ParamDirection:
	//
	//	IN="in" | INOUT="inout" | OUT="out";
	public ParamDirectionElements getParamDirectionAccess() {
		return (unknownRuleParamDirection != null) ? unknownRuleParamDirection : (unknownRuleParamDirection = new ParamDirectionElements());
	}
	
	public EnumRule getParamDirectionRule() {
		return getParamDirectionAccess().getRule();
	}

	//enum Qualifier:
	//
	//	BLACKBOX="blackbox" | ABSTRACT="abstract" | STATIC="static";
	public QualifierElements getQualifierAccess() {
		return (unknownRuleQualifier != null) ? unknownRuleQualifier : (unknownRuleQualifier = new QualifierElements());
	}
	
	public EnumRule getQualifierRule() {
		return getQualifierAccess().getRule();
	}

	//// ****** Imports ******
	// ImportCS:
	//
	//	"import" unit=UnitCS ";" | "from" unit=UnitCS "import" (name+=Identifier ("," name+=Identifier)* | all?="*") ";";
	public ImportCSElements getImportCSAccess() {
		return (pImportCS != null) ? pImportCS : (pImportCS = new ImportCSElements());
	}
	
	public ParserRule getImportCSRule() {
		return getImportCSAccess().getRule();
	}

	//UnitCS:
	//
	//	segment+=Identifier ("." segment+=Identifier)*;
	public UnitCSElements getUnitCSAccess() {
		return (pUnitCS != null) ? pUnitCS : (pUnitCS = new UnitCSElements());
	}
	
	public ParserRule getUnitCSRule() {
		return getUnitCSAccess().getRule();
	}

	//// ****** definitions in a compilation unit *******
	// UnitElementCS:
	//
	//	MetamodelCS;
	public UnitElementCSElements getUnitElementCSAccess() {
		return (pUnitElementCS != null) ? pUnitElementCS : (pUnitElementCS = new UnitElementCSElements());
	}
	
	public ParserRule getUnitElementCSRule() {
		return getUnitElementCSAccess().getRule();
	}

	//// ****** General rules ******
	// CompleteSignatureCS:
	//
	//	SimpleSignatureCS (":" (param+=ParamCS ("," param+=ParamCS)*))?;
	public CompleteSignatureCSElements getCompleteSignatureCSAccess() {
		return (pCompleteSignatureCS != null) ? pCompleteSignatureCS : (pCompleteSignatureCS = new CompleteSignatureCSElements());
	}
	
	public ParserRule getCompleteSignatureCSRule() {
		return getCompleteSignatureCSAccess().getRule();
	}

	//SimpleSignatureCS:
	//
	//	{SimpleSignatureCS} "(" (param+=ParamCS ("," param+=ParamCS)*)? ")";
	public SimpleSignatureCSElements getSimpleSignatureCSAccess() {
		return (pSimpleSignatureCS != null) ? pSimpleSignatureCS : (pSimpleSignatureCS = new SimpleSignatureCSElements());
	}
	
	public ParserRule getSimpleSignatureCSRule() {
		return getSimpleSignatureCSAccess().getRule();
	}

	//ParamCS:
	//
	//	direction=ParamDirection? (pathName=PathNameCS ":") typespec=TypeExpCS initPart=InitPartCS?;
	public ParamCSElements getParamCSAccess() {
		return (pParamCS != null) ? pParamCS : (pParamCS = new ParamCSElements());
	}
	
	public ParserRule getParamCSRule() {
		return getParamCSAccess().getRule();
	}

	//InitPartCS:
	//
	//	initOp=InitOp expression=ExpCS;
	public InitPartCSElements getInitPartCSAccess() {
		return (pInitPartCS != null) ? pInitPartCS : (pInitPartCS = new InitPartCSElements());
	}
	
	public ParserRule getInitPartCSRule() {
		return getInitPartCSAccess().getRule();
	}

	//// General rules END
	// // ****** Syntax for defining explicitly metamodel contents ******
	// MetamodelCS:
	//
	//	keyword=MetamodelKind pathName=PathNameCS (";" | "{" element+=MetamodelElementCS* "}" ";"?);
	public MetamodelCSElements getMetamodelCSAccess() {
		return (pMetamodelCS != null) ? pMetamodelCS : (pMetamodelCS = new MetamodelCSElements());
	}
	
	public ParserRule getMetamodelCSRule() {
		return getMetamodelCSAccess().getRule();
	}

	//MetamodelElementCS:
	//
	//	ClassifierCS | EnumerationCS | TagCS;
	public MetamodelElementCSElements getMetamodelElementCSAccess() {
		return (pMetamodelElementCS != null) ? pMetamodelElementCS : (pMetamodelElementCS = new MetamodelElementCSElements());
	}
	
	public ParserRule getMetamodelElementCSRule() {
		return getMetamodelElementCSAccess().getRule();
	}

	//ClassifierCS:
	//
	//	intermediate?="intermediate"? qualifier+=Qualifier* keyword=ClassifierKind pathName=PathNameCS ("extends"
	//
	//	(extends+=PathNameCS ("," extends+=PathNameCS)*))? (";" | "{" (feature+=ClassifierFeatureCS (";"
	//
	//	feature+=ClassifierFeatureCS)* ";"?)? "}" ";"?);
	public ClassifierCSElements getClassifierCSAccess() {
		return (pClassifierCS != null) ? pClassifierCS : (pClassifierCS = new ClassifierCSElements());
	}
	
	public ParserRule getClassifierCSRule() {
		return getClassifierCSAccess().getRule();
	}

	//ClassifierFeatureCS:
	//
	//	ClassifierPropertyCS | ClassifierOperationCS | TagCS;
	public ClassifierFeatureCSElements getClassifierFeatureCSAccess() {
		return (pClassifierFeatureCS != null) ? pClassifierFeatureCS : (pClassifierFeatureCS = new ClassifierFeatureCSElements());
	}
	
	public ParserRule getClassifierFeatureCSRule() {
		return getClassifierFeatureCSAccess().getRule();
	}

	//ClassifierPropertyCS:
	//
	//	("<<" (stereotype+=Identifier ("," stereotype+=Identifier)*) ">>")? featureKey+=FeatureKey* name=Identifier ":"
	//
	//	typespec=TypeExpCS initPart=InitPartCS? multiplicity=MultiplicityCS? ("opposites" tilde?="~"?
	//
	//	oppositeIdentifier=Identifier oppositeMultiplicity=MultiplicityCS?)?;
	public ClassifierPropertyCSElements getClassifierPropertyCSAccess() {
		return (pClassifierPropertyCS != null) ? pClassifierPropertyCS : (pClassifierPropertyCS = new ClassifierPropertyCSElements());
	}
	
	public ParserRule getClassifierPropertyCSRule() {
		return getClassifierPropertyCSAccess().getRule();
	}

	//MultiplicityCS:
	//
	//	"[" (lower=LOWER "...")? upper=UPPER "]";
	public MultiplicityCSElements getMultiplicityCSAccess() {
		return (pMultiplicityCS != null) ? pMultiplicityCS : (pMultiplicityCS = new MultiplicityCSElements());
	}
	
	public ParserRule getMultiplicityCSRule() {
		return getMultiplicityCSAccess().getRule();
	}

	//ClassifierOperationCS:
	//
	//	("<<" (stereotype+=Identifier ("," stereotype+=Identifier)*) ">>")? featureKey+=FeatureKey* name=Identifier ":"
	//
	//	typespec=TypeExpCS signature=CompleteSignatureCS;
	public ClassifierOperationCSElements getClassifierOperationCSAccess() {
		return (pClassifierOperationCS != null) ? pClassifierOperationCS : (pClassifierOperationCS = new ClassifierOperationCSElements());
	}
	
	public ParserRule getClassifierOperationCSRule() {
		return getClassifierOperationCSAccess().getRule();
	}

	//EnumerationCS:
	//
	//	"enum" name=Identifier (";" | "{" (literal+=Identifier ("," literal+=Identifier)*) "}" ";"?);
	public EnumerationCSElements getEnumerationCSAccess() {
		return (pEnumerationCS != null) ? pEnumerationCS : (pEnumerationCS = new EnumerationCSElements());
	}
	
	public ParserRule getEnumerationCSRule() {
		return getEnumerationCSAccess().getRule();
	}

	//TagCS:
	//
	//	"tag" id=StringLiteral pathName=PathNameCS ("=" expression=ExpCS)? ";";
	public TagCSElements getTagCSAccess() {
		return (pTagCS != null) ? pTagCS : (pTagCS = new TagCSElements());
	}
	
	public ParserRule getTagCSRule() {
		return getTagCSAccess().getRule();
	}

	//// typedefs
	// TypedefCS:
	//
	//	"typedef" name=Identifier "=" typespec=TypeExpCS ("[" condition=ExpCS "]")? ";";
	public TypedefCSElements getTypedefCSAccess() {
		return (pTypedefCS != null) ? pTypedefCS : (pTypedefCS = new TypedefCSElements());
	}
	
	public ParserRule getTypedefCSRule() {
		return getTypedefCSAccess().getRule();
	}

	//GrammmarCS returns essentialocl::ExpCS:
	//
	//	ImperativeOCLExpCS;
	public ImperativeOCLGrammarAccess.GrammmarCSElements getGrammmarCSAccess() {
		return gaImperativeOCL.getGrammmarCSAccess();
	}
	
	public ParserRule getGrammmarCSRule() {
		return getGrammmarCSAccess().getRule();
	}

	//terminal ACCESS_OP:
	//
	//	"." | "->" | "!->";
	public TerminalRule getACCESS_OPRule() {
		return gaImperativeOCL.getACCESS_OPRule();
	} 

	//// terminal ADD_OP: '+' | '-';
	// terminal ASSIGN_OP:
	//
	//	":=" | "::=" | "+=" | "-=";
	public TerminalRule getASSIGN_OPRule() {
		return gaImperativeOCL.getASSIGN_OPRule();
	} 

	//terminal CMP_OP:
	//
	//	"=" | "==" | "<>" | "<" | ">" | "<=" | ">=";
	public TerminalRule getCMP_OPRule() {
		return gaImperativeOCL.getCMP_OPRule();
	} 

	//terminal MULT_OP:
	//
	//	"*" | "/" | "%";
	public TerminalRule getMULT_OPRule() {
		return gaImperativeOCL.getMULT_OPRule();
	} 

	//terminal MULTI_ITERATOR_OP:
	//
	//	"forAll";
	public TerminalRule getMULTI_ITERATOR_OPRule() {
		return gaImperativeOCL.getMULTI_ITERATOR_OPRule();
	} 

	//// terminal OR_OP: 'or' | 'xor';
	// terminal RESOLVE_IN_KIND:
	//
	//	"resolveIn" | "resolveoneIn" | "invresolveIn" | "invresolveoneIn";
	public TerminalRule getRESOLVE_IN_KINDRule() {
		return gaImperativeOCL.getRESOLVE_IN_KINDRule();
	} 

	//terminal RESOLVE_KIND:
	//
	//	"resolve" | "resolveone" | "invresolve" | "invresolveone";
	public TerminalRule getRESOLVE_KINDRule() {
		return gaImperativeOCL.getRESOLVE_KINDRule();
	} 

	//terminal SIMPLE_ITERATOR_OP:
	//
	//	"reject" | "select" | "collect" | "exists" | "one" | "any" | "isUnique" | "collectNested" | "sortedBy" | "xselect" |
	//
	//	"xcollect" | "selectOne" | "collectOne" | "collectselect" | "collectselectOne";
	public TerminalRule getSIMPLE_ITERATOR_OPRule() {
		return gaImperativeOCL.getSIMPLE_ITERATOR_OPRule();
	} 

	//terminal UNARY_OP:
	//
	//	"-" | "not" | "#" | "##" | "*";
	public TerminalRule getUNARY_OPRule() {
		return gaImperativeOCL.getUNARY_OPRule();
	} 

	//ImperativeOCLReservedKeyword:
	//
	//	"default" | "elif" | RESOLVE_KIND | RESOLVE_IN_KIND;
	public ImperativeOCLGrammarAccess.ImperativeOCLReservedKeywordElements getImperativeOCLReservedKeywordAccess() {
		return gaImperativeOCL.getImperativeOCLReservedKeywordAccess();
	}
	
	public ParserRule getImperativeOCLReservedKeywordRule() {
		return getImperativeOCLReservedKeywordAccess().getRule();
	}

	//ImperativeOCLPrefixOperator:
	//
	//	"#" | "##" | "*";
	public ImperativeOCLGrammarAccess.ImperativeOCLPrefixOperatorElements getImperativeOCLPrefixOperatorAccess() {
		return gaImperativeOCL.getImperativeOCLPrefixOperatorAccess();
	}
	
	public ParserRule getImperativeOCLPrefixOperatorRule() {
		return getImperativeOCLPrefixOperatorAccess().getRule();
	}

	//ImperativeOCLInfixOperator:
	//
	//	ASSIGN_OP | "default" | "==";
	public ImperativeOCLGrammarAccess.ImperativeOCLInfixOperatorElements getImperativeOCLInfixOperatorAccess() {
		return gaImperativeOCL.getImperativeOCLInfixOperatorAccess();
	}
	
	public ParserRule getImperativeOCLInfixOperatorRule() {
		return getImperativeOCLInfixOperatorAccess().getRule();
	}

	//ImperativeOCLNavigationOperator:
	//
	//	"!->";
	public ImperativeOCLGrammarAccess.ImperativeOCLNavigationOperatorElements getImperativeOCLNavigationOperatorAccess() {
		return gaImperativeOCL.getImperativeOCLNavigationOperatorAccess();
	}
	
	public ParserRule getImperativeOCLNavigationOperatorRule() {
		return getImperativeOCLNavigationOperatorAccess().getRule();
	}

	////PrefixOperator:
	// //	EssentialOCLPrefixOperator | QVToPrefixOperator;
	// //
	// //InfixOperator:
	//
	//
	////	EssentialOCLInfixOperator | QVToInfixOperator;
	// //
	// //NavigationOperator:
	//
	//
	////	EssentialOCLNavigationOperator | QVToNavigationOperator;
	// ImperativeOCLExpCS returns essentialocl::ExpCS:
	//
	//	ExpCS;
	public ImperativeOCLGrammarAccess.ImperativeOCLExpCSElements getImperativeOCLExpCSAccess() {
		return gaImperativeOCL.getImperativeOCLExpCSAccess();
	}
	
	public ParserRule getImperativeOCLExpCSRule() {
		return getImperativeOCLExpCSAccess().getRule();
	}

	//// ********* ImperativeOCL Types *********
	// // TypeLiteralCS redefined to include the new List and Dict types
	//
	//
	//// FIXME refactor its definition in EssentialOCL to allow extension
	// TypeLiteralCS returns base::TypedRefCS:
	//
	//	PrimitiveTypeCS | CollectionTypeCS | TupleTypeCS | ListTypeCS | DictTypeCS;
	public ImperativeOCLGrammarAccess.TypeLiteralCSElements getTypeLiteralCSAccess() {
		return gaImperativeOCL.getTypeLiteralCSAccess();
	}
	
	public ParserRule getTypeLiteralCSRule() {
		return getTypeLiteralCSAccess().getRule();
	}

	//ListTypeCS:
	//
	//	"List" "(" type=TypeExpCS ")";
	public ImperativeOCLGrammarAccess.ListTypeCSElements getListTypeCSAccess() {
		return gaImperativeOCL.getListTypeCSAccess();
	}
	
	public ParserRule getListTypeCSRule() {
		return getListTypeCSAccess().getRule();
	}

	//DictTypeCS:
	//
	//	"Dict" "(" keyType=TypeExpCS "," valueType=TypeExpCS ")";
	public ImperativeOCLGrammarAccess.DictTypeCSElements getDictTypeCSAccess() {
		return gaImperativeOCL.getDictTypeCSAccess();
	}
	
	public ParserRule getDictTypeCSRule() {
		return getDictTypeCSAccess().getRule();
	}

	//// ********* ImperativeOCL Expressions *********
	//
	//
	//// PrimaryExpCS redefined to include the new List and Dict literal expressions
	//
	//
	//// FIXME refactor its definition in EssentialOCL to allow extension
	// // These rules are ordered most rejectable first
	//
	//
	//PrimaryExpCS returns essentialocl::ExpCS:
	//
	//	NestedExpCS | IfExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | CollectionLiteralExpCS |
	//
	//	ListLiteralExpCS | DictLiteralExpCS | TypeLiteralExpCS | ReturnExpCS | {essentialocl::NameExpCS} pathName=PathNameCS
	//
	//	({essentialocl::IndexExpCS.nameExp=current} "[" firstIndexes+=ExpCS ("," firstIndexes+=ExpCS)* "]" ("["
	//
	//	secondIndexes+=ExpCS ("," secondIndexes+=ExpCS)* "]")? (atPre?="@" "pre")? |
	//
	//	{essentialocl::ConstructorExpCS.nameExp=current} "{" (ownedParts+=ConstructorPartCS (","
	//
	//	ownedParts+=ConstructorPartCS)* | value=StringLiteral) "}" | (atPre?="@" "pre")?
	//
	//	({essentialocl::InvocationExpCS.nameExp=current} "(" (argument+=NavigatingArgCS argument+=NavigatingCommaArgCS*
	//
	//	(argument+=NavigatingSemiArgCS argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS
	//
	//	argument+=NavigatingCommaArgCS*)?)? ")")?);
	public ImperativeOCLGrammarAccess.PrimaryExpCSElements getPrimaryExpCSAccess() {
		return gaImperativeOCL.getPrimaryExpCSAccess();
	}
	
	public ParserRule getPrimaryExpCSRule() {
		return getPrimaryExpCSAccess().getRule();
	}

	//ListLiteralExpCS:
	//
	//	"List" "{" {ListLiteralExpCS} (ownedParts+=CollectionLiteralPartCS ("," ownedParts+=CollectionLiteralPartCS)*)? "}";
	public ImperativeOCLGrammarAccess.ListLiteralExpCSElements getListLiteralExpCSAccess() {
		return gaImperativeOCL.getListLiteralExpCSAccess();
	}
	
	public ParserRule getListLiteralExpCSRule() {
		return getListLiteralExpCSAccess().getRule();
	}

	//DictLiteralExpCS:
	//
	//	"Dict" "{" {DictLiteralExpCS} (ownedParts+=DictLiteralPartCS ("," ownedParts+=DictLiteralPartCS)*)? "}";
	public ImperativeOCLGrammarAccess.DictLiteralExpCSElements getDictLiteralExpCSAccess() {
		return gaImperativeOCL.getDictLiteralExpCSAccess();
	}
	
	public ParserRule getDictLiteralExpCSRule() {
		return getDictLiteralExpCSAccess().getRule();
	}

	//DictLiteralPartCS:
	//
	//	key=PrimitiveLiteralExpCS "=" value=ExpCS;
	public ImperativeOCLGrammarAccess.DictLiteralPartCSElements getDictLiteralPartCSAccess() {
		return gaImperativeOCL.getDictLiteralPartCSAccess();
	}
	
	public ParserRule getDictLiteralPartCSRule() {
		return getDictLiteralPartCSAccess().getRule();
	}

	//ReturnExpCS:
	//
	//	"return" {ReturnExpCS} value=ExpCS?;
	public ImperativeOCLGrammarAccess.ReturnExpCSElements getReturnExpCSAccess() {
		return gaImperativeOCL.getReturnExpCSAccess();
	}
	
	public ParserRule getReturnExpCSRule() {
		return getReturnExpCSAccess().getRule();
	}

	////generate essentialOCLCST "http://www.eclipse.org/ocl/3.0.0/EssentialOCLCST"
	// Model returns ContextCS:
	//
	//	ownedExpression=ExpCS;
	public EssentialOCLGrammarAccess.ModelElements getModelAccess() {
		return gaImperativeOCL.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//terminal fragment ESCAPED_CHARACTER:
	//
	//	"\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\");
	public TerminalRule getESCAPED_CHARACTERRule() {
		return gaImperativeOCL.getESCAPED_CHARACTERRule();
	} 

	//terminal fragment LETTER_CHARACTER:
	//
	//	"a".."z" | "A".."Z" | "_";
	public TerminalRule getLETTER_CHARACTERRule() {
		return gaImperativeOCL.getLETTER_CHARACTERRule();
	} 

	//terminal DOUBLE_QUOTED_STRING:
	//
	//	"\"" (ESCAPED_CHARACTER | !("\\" | "\""))* "\"";
	public TerminalRule getDOUBLE_QUOTED_STRINGRule() {
		return gaImperativeOCL.getDOUBLE_QUOTED_STRINGRule();
	} 

	//terminal SINGLE_QUOTED_STRING:
	//
	//	"\'" (ESCAPED_CHARACTER | !("\\" | "\'"))* "\'";
	public TerminalRule getSINGLE_QUOTED_STRINGRule() {
		return gaImperativeOCL.getSINGLE_QUOTED_STRINGRule();
	} 

	//terminal ML_SINGLE_QUOTED_STRING:
	//
	//	"/\'"->"\'/";
	public TerminalRule getML_SINGLE_QUOTED_STRINGRule() {
		return gaImperativeOCL.getML_SINGLE_QUOTED_STRINGRule();
	} 

	//terminal SIMPLE_ID:
	//
	//	LETTER_CHARACTER (LETTER_CHARACTER | "0".."9")*;
	public TerminalRule getSIMPLE_IDRule() {
		return gaImperativeOCL.getSIMPLE_IDRule();
	} 

	//terminal ESCAPED_ID:
	//
	//	"_" SINGLE_QUOTED_STRING;
	public TerminalRule getESCAPED_IDRule() {
		return gaImperativeOCL.getESCAPED_IDRule();
	} 

	//ID:
	//
	//	SIMPLE_ID | ESCAPED_ID;
	public EssentialOCLGrammarAccess.IDElements getIDAccess() {
		return gaImperativeOCL.getIDAccess();
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}

	//// String to allow diverse re-use
	// // multiple leading zeroes occur as floating point fractional part
	// terminal INT:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaImperativeOCL.getINTRule();
	} 

	//LOWER returns ecore::EInt:
	//
	//	INT;
	public EssentialOCLGrammarAccess.LOWERElements getLOWERAccess() {
		return gaImperativeOCL.getLOWERAccess();
	}
	
	public ParserRule getLOWERRule() {
		return getLOWERAccess().getRule();
	}

	//UPPER returns ecore::EInt:
	//
	//	INT | "*";
	public EssentialOCLGrammarAccess.UPPERElements getUPPERAccess() {
		return gaImperativeOCL.getUPPERAccess();
	}
	
	public ParserRule getUPPERRule() {
		return getUPPERAccess().getRule();
	}

	//// Not terminal to allow parser backtracking to sort out "5..7"
	//
	//
	//// EssentialOCLTokenSource pieces this together ('.' INT)? (('e' | 'E') ('+' | '-')? INT)?;
	// NUMBER_LITERAL returns
	//
	//BigNumber:
	//
	//	INT;
	public EssentialOCLGrammarAccess.NUMBER_LITERALElements getNUMBER_LITERALAccess() {
		return gaImperativeOCL.getNUMBER_LITERALAccess();
	}
	
	public ParserRule getNUMBER_LITERALRule() {
		return getNUMBER_LITERALAccess().getRule();
	}

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaImperativeOCL.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaImperativeOCL.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaImperativeOCL.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaImperativeOCL.getANY_OTHERRule();
	} 

	//URI:
	//
	//	SINGLE_QUOTED_STRING;
	public EssentialOCLGrammarAccess.URIElements getURIAccess() {
		return gaImperativeOCL.getURIAccess();
	}
	
	public ParserRule getURIRule() {
		return getURIAccess().getRule();
	}

	//EssentialOCLReservedKeyword:
	//
	//	"and" | "else" | "endif" | "if" | "implies" | "in" | "let" | "not" | "or" | "then" | "xor";
	public EssentialOCLGrammarAccess.EssentialOCLReservedKeywordElements getEssentialOCLReservedKeywordAccess() {
		return gaImperativeOCL.getEssentialOCLReservedKeywordAccess();
	}
	
	public ParserRule getEssentialOCLReservedKeywordRule() {
		return getEssentialOCLReservedKeywordAccess().getRule();
	}

	//EssentialOCLUnaryOperatorCS returns UnaryOperatorCS:
	//
	//	name=("-" | "not");
	public EssentialOCLGrammarAccess.EssentialOCLUnaryOperatorCSElements getEssentialOCLUnaryOperatorCSAccess() {
		return gaImperativeOCL.getEssentialOCLUnaryOperatorCSAccess();
	}
	
	public ParserRule getEssentialOCLUnaryOperatorCSRule() {
		return getEssentialOCLUnaryOperatorCSAccess().getRule();
	}

	//EssentialOCLInfixOperatorCS returns BinaryOperatorCS:
	//
	//	name=("*" | "/" | "+" | "-" | ">" | "<" | ">=" | "<=" | "=" | "<>" | "and" | "or" | "xor" | "implies");
	public EssentialOCLGrammarAccess.EssentialOCLInfixOperatorCSElements getEssentialOCLInfixOperatorCSAccess() {
		return gaImperativeOCL.getEssentialOCLInfixOperatorCSAccess();
	}
	
	public ParserRule getEssentialOCLInfixOperatorCSRule() {
		return getEssentialOCLInfixOperatorCSAccess().getRule();
	}

	//EssentialOCLNavigationOperatorCS returns NavigationOperatorCS:
	//
	//	name=("." | "->");
	public EssentialOCLGrammarAccess.EssentialOCLNavigationOperatorCSElements getEssentialOCLNavigationOperatorCSAccess() {
		return gaImperativeOCL.getEssentialOCLNavigationOperatorCSAccess();
	}
	
	public ParserRule getEssentialOCLNavigationOperatorCSRule() {
		return getEssentialOCLNavigationOperatorCSAccess().getRule();
	}

	//Identifier:
	//
	//	ID;
	public EssentialOCLGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaImperativeOCL.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//StringLiteral:
	//
	//	SINGLE_QUOTED_STRING;
	public EssentialOCLGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaImperativeOCL.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//BinaryOperatorCS:
	//
	//	InfixOperatorCS | NavigationOperatorCS;
	public EssentialOCLGrammarAccess.BinaryOperatorCSElements getBinaryOperatorCSAccess() {
		return gaImperativeOCL.getBinaryOperatorCSAccess();
	}
	
	public ParserRule getBinaryOperatorCSRule() {
		return getBinaryOperatorCSAccess().getRule();
	}

	//// Intended to be overrideable
	// InfixOperatorCS returns BinaryOperatorCS:
	//
	//	EssentialOCLInfixOperatorCS;
	public EssentialOCLGrammarAccess.InfixOperatorCSElements getInfixOperatorCSAccess() {
		return gaImperativeOCL.getInfixOperatorCSAccess();
	}
	
	public ParserRule getInfixOperatorCSRule() {
		return getInfixOperatorCSAccess().getRule();
	}

	//// Intended to be overrideable
	// NavigationOperatorCS:
	//
	//	EssentialOCLNavigationOperatorCS;
	public EssentialOCLGrammarAccess.NavigationOperatorCSElements getNavigationOperatorCSAccess() {
		return gaImperativeOCL.getNavigationOperatorCSAccess();
	}
	
	public ParserRule getNavigationOperatorCSRule() {
		return getNavigationOperatorCSAccess().getRule();
	}

	//// Intended to be overrideable
	// UnaryOperatorCS:
	//
	//	EssentialOCLUnaryOperatorCS;
	public EssentialOCLGrammarAccess.UnaryOperatorCSElements getUnaryOperatorCSAccess() {
		return gaImperativeOCL.getUnaryOperatorCSAccess();
	}
	
	public ParserRule getUnaryOperatorCSRule() {
		return getUnaryOperatorCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	// //  Names
	//
	//
	////---------------------------------------------------------------------
	// EssentialOCLUnrestrictedName returns
	//
	//ecore::EString:
	//
	//	Identifier;
	public EssentialOCLGrammarAccess.EssentialOCLUnrestrictedNameElements getEssentialOCLUnrestrictedNameAccess() {
		return gaImperativeOCL.getEssentialOCLUnrestrictedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnrestrictedNameRule() {
		return getEssentialOCLUnrestrictedNameAccess().getRule();
	}

	//// Intended to be overridden
	// UnrestrictedName returns ecore::EString:
	//
	//	EssentialOCLUnrestrictedName;
	public EssentialOCLGrammarAccess.UnrestrictedNameElements getUnrestrictedNameAccess() {
		return gaImperativeOCL.getUnrestrictedNameAccess();
	}
	
	public ParserRule getUnrestrictedNameRule() {
		return getUnrestrictedNameAccess().getRule();
	}

	//EssentialOCLUnreservedName returns ecore::EString:
	//
	//	UnrestrictedName | CollectionTypeIdentifier | PrimitiveTypeIdentifier | "Tuple";
	public EssentialOCLGrammarAccess.EssentialOCLUnreservedNameElements getEssentialOCLUnreservedNameAccess() {
		return gaImperativeOCL.getEssentialOCLUnreservedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnreservedNameRule() {
		return getEssentialOCLUnreservedNameAccess().getRule();
	}

	//// Intended to be overridden
	// UnreservedName returns ecore::EString:
	//
	//	EssentialOCLUnreservedName;
	public EssentialOCLGrammarAccess.UnreservedNameElements getUnreservedNameAccess() {
		return gaImperativeOCL.getUnreservedNameAccess();
	}
	
	public ParserRule getUnreservedNameRule() {
		return getUnreservedNameAccess().getRule();
	}

	//PathNameCS returns base::PathNameCS:
	//
	//	path+=FirstPathElementCS ("::" path+=NextPathElementCS)*;
	public EssentialOCLGrammarAccess.PathNameCSElements getPathNameCSAccess() {
		return gaImperativeOCL.getPathNameCSAccess();
	}
	
	public ParserRule getPathNameCSRule() {
		return getPathNameCSAccess().getRule();
	}

	//FirstPathElementCS returns base::PathElementCS:
	//
	//	element=[pivot::NamedElement|UnrestrictedName];
	public EssentialOCLGrammarAccess.FirstPathElementCSElements getFirstPathElementCSAccess() {
		return gaImperativeOCL.getFirstPathElementCSAccess();
	}
	
	public ParserRule getFirstPathElementCSRule() {
		return getFirstPathElementCSAccess().getRule();
	}

	//NextPathElementCS returns base::PathElementCS:
	//
	//	element=[pivot::NamedElement|UnreservedName];
	public EssentialOCLGrammarAccess.NextPathElementCSElements getNextPathElementCSAccess() {
		return gaImperativeOCL.getNextPathElementCSAccess();
	}
	
	public ParserRule getNextPathElementCSRule() {
		return getNextPathElementCSAccess().getRule();
	}

	//URIPathNameCS returns base::PathNameCS:
	//
	//	path+=URIFirstPathElementCS ("::" path+=NextPathElementCS)*;
	public EssentialOCLGrammarAccess.URIPathNameCSElements getURIPathNameCSAccess() {
		return gaImperativeOCL.getURIPathNameCSAccess();
	}
	
	public ParserRule getURIPathNameCSRule() {
		return getURIPathNameCSAccess().getRule();
	}

	//URIFirstPathElementCS returns base::PathElementCS:
	//
	//	element=[pivot::NamedElement|UnrestrictedName] | {base::PathElementWithURICS} element=[pivot::Namespace|URI];
	public EssentialOCLGrammarAccess.URIFirstPathElementCSElements getURIFirstPathElementCSAccess() {
		return gaImperativeOCL.getURIFirstPathElementCSAccess();
	}
	
	public ParserRule getURIFirstPathElementCSRule() {
		return getURIFirstPathElementCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	// //  Types
	//
	//
	////---------------------------------------------------------------------
	// PrimitiveTypeIdentifier:
	//
	//	"Boolean" | "Integer" | "Real" | "String" | "UnlimitedNatural" | "OclAny" | "OclInvalid" | "OclVoid";
	public EssentialOCLGrammarAccess.PrimitiveTypeIdentifierElements getPrimitiveTypeIdentifierAccess() {
		return gaImperativeOCL.getPrimitiveTypeIdentifierAccess();
	}
	
	public ParserRule getPrimitiveTypeIdentifierRule() {
		return getPrimitiveTypeIdentifierAccess().getRule();
	}

	//PrimitiveTypeCS returns base::PrimitiveTypeRefCS:
	//
	//	name=PrimitiveTypeIdentifier;
	public EssentialOCLGrammarAccess.PrimitiveTypeCSElements getPrimitiveTypeCSAccess() {
		return gaImperativeOCL.getPrimitiveTypeCSAccess();
	}
	
	public ParserRule getPrimitiveTypeCSRule() {
		return getPrimitiveTypeCSAccess().getRule();
	}

	//CollectionTypeIdentifier returns ecore::EString:
	//
	//	"Set" | "Bag" | "Sequence" | "Collection" | "OrderedSet";
	public EssentialOCLGrammarAccess.CollectionTypeIdentifierElements getCollectionTypeIdentifierAccess() {
		return gaImperativeOCL.getCollectionTypeIdentifierAccess();
	}
	
	public ParserRule getCollectionTypeIdentifierRule() {
		return getCollectionTypeIdentifierAccess().getRule();
	}

	//CollectionTypeCS:
	//
	//	name=CollectionTypeIdentifier ("(" ownedType=TypeExpCS ")")?;
	public EssentialOCLGrammarAccess.CollectionTypeCSElements getCollectionTypeCSAccess() {
		return gaImperativeOCL.getCollectionTypeCSAccess();
	}
	
	public ParserRule getCollectionTypeCSRule() {
		return getCollectionTypeCSAccess().getRule();
	}

	//MultiplicityBoundsCS returns base::MultiplicityBoundsCS:
	//
	//	lowerBound=LOWER (".." upperBound=UPPER)?;
	public EssentialOCLGrammarAccess.MultiplicityBoundsCSElements getMultiplicityBoundsCSAccess() {
		return gaImperativeOCL.getMultiplicityBoundsCSAccess();
	}
	
	public ParserRule getMultiplicityBoundsCSRule() {
		return getMultiplicityBoundsCSAccess().getRule();
	}

	//MultiplicityStringCS returns base::MultiplicityStringCS:
	//
	//	stringBounds=("*" | "+" | "?");
	public EssentialOCLGrammarAccess.MultiplicityStringCSElements getMultiplicityStringCSAccess() {
		return gaImperativeOCL.getMultiplicityStringCSAccess();
	}
	
	public ParserRule getMultiplicityStringCSRule() {
		return getMultiplicityStringCSAccess().getRule();
	}

	//TupleTypeCS returns base::TupleTypeCS:
	//
	//	name="Tuple" ("(" (ownedParts+=TuplePartCS ("," ownedParts+=TuplePartCS)*)? ")")?;
	public EssentialOCLGrammarAccess.TupleTypeCSElements getTupleTypeCSAccess() {
		return gaImperativeOCL.getTupleTypeCSAccess();
	}
	
	public ParserRule getTupleTypeCSRule() {
		return getTupleTypeCSAccess().getRule();
	}

	//TuplePartCS returns base::TuplePartCS:
	//
	//	name=UnrestrictedName ":" ownedType=TypeExpCS;
	public EssentialOCLGrammarAccess.TuplePartCSElements getTuplePartCSAccess() {
		return gaImperativeOCL.getTuplePartCSAccess();
	}
	
	public ParserRule getTuplePartCSRule() {
		return getTuplePartCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	// //  Literals
	//
	//
	////---------------------------------------------------------------------
	// CollectionLiteralExpCS:
	//
	//	ownedType=CollectionTypeCS "{" (ownedParts+=CollectionLiteralPartCS ("," ownedParts+=CollectionLiteralPartCS)*)? "}";
	public EssentialOCLGrammarAccess.CollectionLiteralExpCSElements getCollectionLiteralExpCSAccess() {
		return gaImperativeOCL.getCollectionLiteralExpCSAccess();
	}
	
	public ParserRule getCollectionLiteralExpCSRule() {
		return getCollectionLiteralExpCSAccess().getRule();
	}

	//CollectionLiteralPartCS:
	//
	//	expressionCS=ExpCS (".." lastExpressionCS=ExpCS)?;
	public EssentialOCLGrammarAccess.CollectionLiteralPartCSElements getCollectionLiteralPartCSAccess() {
		return gaImperativeOCL.getCollectionLiteralPartCSAccess();
	}
	
	public ParserRule getCollectionLiteralPartCSRule() {
		return getCollectionLiteralPartCSAccess().getRule();
	}

	//ConstructorPartCS:
	//
	//	property=[pivot::Property|UnrestrictedName] "=" initExpression=ExpCS;
	public EssentialOCLGrammarAccess.ConstructorPartCSElements getConstructorPartCSAccess() {
		return gaImperativeOCL.getConstructorPartCSAccess();
	}
	
	public ParserRule getConstructorPartCSRule() {
		return getConstructorPartCSAccess().getRule();
	}

	//PrimitiveLiteralExpCS:
	//
	//	NumberLiteralExpCS | StringLiteralExpCS | BooleanLiteralExpCS | UnlimitedNaturalLiteralExpCS | InvalidLiteralExpCS |
	//
	//	NullLiteralExpCS;
	public EssentialOCLGrammarAccess.PrimitiveLiteralExpCSElements getPrimitiveLiteralExpCSAccess() {
		return gaImperativeOCL.getPrimitiveLiteralExpCSAccess();
	}
	
	public ParserRule getPrimitiveLiteralExpCSRule() {
		return getPrimitiveLiteralExpCSAccess().getRule();
	}

	//TupleLiteralExpCS:
	//
	//	"Tuple" "{" ownedParts+=TupleLiteralPartCS ("," ownedParts+=TupleLiteralPartCS)* "}";
	public EssentialOCLGrammarAccess.TupleLiteralExpCSElements getTupleLiteralExpCSAccess() {
		return gaImperativeOCL.getTupleLiteralExpCSAccess();
	}
	
	public ParserRule getTupleLiteralExpCSRule() {
		return getTupleLiteralExpCSAccess().getRule();
	}

	//TupleLiteralPartCS:
	//
	//	name=UnrestrictedName (":" ownedType=TypeExpCS)? "=" initExpression=ExpCS;
	public EssentialOCLGrammarAccess.TupleLiteralPartCSElements getTupleLiteralPartCSAccess() {
		return gaImperativeOCL.getTupleLiteralPartCSAccess();
	}
	
	public ParserRule getTupleLiteralPartCSRule() {
		return getTupleLiteralPartCSAccess().getRule();
	}

	//NumberLiteralExpCS:
	//
	//	name=NUMBER_LITERAL;
	public EssentialOCLGrammarAccess.NumberLiteralExpCSElements getNumberLiteralExpCSAccess() {
		return gaImperativeOCL.getNumberLiteralExpCSAccess();
	}
	
	public ParserRule getNumberLiteralExpCSRule() {
		return getNumberLiteralExpCSAccess().getRule();
	}

	//StringLiteralExpCS:
	//
	//	name+=StringLiteral+;
	public EssentialOCLGrammarAccess.StringLiteralExpCSElements getStringLiteralExpCSAccess() {
		return gaImperativeOCL.getStringLiteralExpCSAccess();
	}
	
	public ParserRule getStringLiteralExpCSRule() {
		return getStringLiteralExpCSAccess().getRule();
	}

	//BooleanLiteralExpCS:
	//
	//	name="true" | name="false";
	public EssentialOCLGrammarAccess.BooleanLiteralExpCSElements getBooleanLiteralExpCSAccess() {
		return gaImperativeOCL.getBooleanLiteralExpCSAccess();
	}
	
	public ParserRule getBooleanLiteralExpCSRule() {
		return getBooleanLiteralExpCSAccess().getRule();
	}

	//UnlimitedNaturalLiteralExpCS:
	//
	//	{UnlimitedNaturalLiteralExpCS} "*";
	public EssentialOCLGrammarAccess.UnlimitedNaturalLiteralExpCSElements getUnlimitedNaturalLiteralExpCSAccess() {
		return gaImperativeOCL.getUnlimitedNaturalLiteralExpCSAccess();
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpCSRule() {
		return getUnlimitedNaturalLiteralExpCSAccess().getRule();
	}

	//InvalidLiteralExpCS:
	//
	//	{InvalidLiteralExpCS} "invalid";
	public EssentialOCLGrammarAccess.InvalidLiteralExpCSElements getInvalidLiteralExpCSAccess() {
		return gaImperativeOCL.getInvalidLiteralExpCSAccess();
	}
	
	public ParserRule getInvalidLiteralExpCSRule() {
		return getInvalidLiteralExpCSAccess().getRule();
	}

	//NullLiteralExpCS:
	//
	//	{NullLiteralExpCS} "null";
	public EssentialOCLGrammarAccess.NullLiteralExpCSElements getNullLiteralExpCSAccess() {
		return gaImperativeOCL.getNullLiteralExpCSAccess();
	}
	
	public ParserRule getNullLiteralExpCSRule() {
		return getNullLiteralExpCSAccess().getRule();
	}

	//TypeLiteralWithMultiplicityCS returns base::TypedRefCS:
	//
	//	TypeLiteralCS multiplicity=MultiplicityCS?;
	public EssentialOCLGrammarAccess.TypeLiteralWithMultiplicityCSElements getTypeLiteralWithMultiplicityCSAccess() {
		return gaImperativeOCL.getTypeLiteralWithMultiplicityCSAccess();
	}
	
	public ParserRule getTypeLiteralWithMultiplicityCSRule() {
		return getTypeLiteralWithMultiplicityCSAccess().getRule();
	}

	//TypeLiteralExpCS:
	//
	//	ownedType=TypeLiteralWithMultiplicityCS;
	public EssentialOCLGrammarAccess.TypeLiteralExpCSElements getTypeLiteralExpCSAccess() {
		return gaImperativeOCL.getTypeLiteralExpCSAccess();
	}
	
	public ParserRule getTypeLiteralExpCSRule() {
		return getTypeLiteralExpCSAccess().getRule();
	}

	//TypeNameExpCS:
	//
	//	pathName=PathNameCS;
	public EssentialOCLGrammarAccess.TypeNameExpCSElements getTypeNameExpCSAccess() {
		return gaImperativeOCL.getTypeNameExpCSAccess();
	}
	
	public ParserRule getTypeNameExpCSRule() {
		return getTypeNameExpCSAccess().getRule();
	}

	//TypeExpCS returns base::TypedRefCS:
	//
	//	(TypeNameExpCS | TypeLiteralCS) multiplicity=MultiplicityCS?;
	public EssentialOCLGrammarAccess.TypeExpCSElements getTypeExpCSAccess() {
		return gaImperativeOCL.getTypeExpCSAccess();
	}
	
	public ParserRule getTypeExpCSRule() {
		return getTypeExpCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	// //  Expressions
	//
	//
	////---------------------------------------------------------------------
	//
	//
	//// An ExpCS permits a LetExpCS only in the final term to ensure
	//
	//
	////  that let is right associative, whereas infix operators are left associative.
	//
	//
	////   a = 64 / 16 / let b : Integer in 8 / let c : Integer in 4 
	// // is
	//
	//
	////   a = (64 / 16) / (let b : Integer in 8 / (let c : Integer in 4 ))
	// ExpCS:
	//
	//	PrefixedExpCS ({InfixExpCS.ownedExpression+=current} ownedOperator+=BinaryOperatorCS (ownedExpression+=PrefixedExpCS
	//
	//	(ownedOperator+=BinaryOperatorCS ownedExpression+=PrefixedExpCS)* (ownedOperator+=BinaryOperatorCS
	//
	//	ownedExpression+=LetExpCS)? | ownedExpression+=LetExpCS))? | {PrefixExpCS} ownedOperator+=UnaryOperatorCS+
	//
	//	ownedExpression=LetExpCS | LetExpCS;
	public EssentialOCLGrammarAccess.ExpCSElements getExpCSAccess() {
		return gaImperativeOCL.getExpCSAccess();
	}
	
	public ParserRule getExpCSRule() {
		return getExpCSAccess().getRule();
	}

	//PrefixedExpCS returns ExpCS:
	//
	//	{PrefixExpCS} ownedOperator+=UnaryOperatorCS+ ownedExpression=PrimaryExpCS | PrimaryExpCS;
	public EssentialOCLGrammarAccess.PrefixedExpCSElements getPrefixedExpCSAccess() {
		return gaImperativeOCL.getPrefixedExpCSAccess();
	}
	
	public ParserRule getPrefixedExpCSRule() {
		return getPrefixedExpCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	// NavigatingArgCS:
	//
	//	name=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" init=ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingArgCSElements getNavigatingArgCSAccess() {
		return gaImperativeOCL.getNavigatingArgCSAccess();
	}
	
	public ParserRule getNavigatingArgCSRule() {
		return getNavigatingArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	// NavigatingBarArgCS returns NavigatingArgCS:
	//
	//	prefix="|" name=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" init=ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingBarArgCSElements getNavigatingBarArgCSAccess() {
		return gaImperativeOCL.getNavigatingBarArgCSAccess();
	}
	
	public ParserRule getNavigatingBarArgCSRule() {
		return getNavigatingBarArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	// NavigatingCommaArgCS returns NavigatingArgCS:
	//
	//	prefix="," name=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" init=ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingCommaArgCSElements getNavigatingCommaArgCSAccess() {
		return gaImperativeOCL.getNavigatingCommaArgCSAccess();
	}
	
	public ParserRule getNavigatingCommaArgCSRule() {
		return getNavigatingCommaArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	// NavigatingSemiArgCS returns NavigatingArgCS:
	//
	//	prefix=";" name=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" init=ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingSemiArgCSElements getNavigatingSemiArgCSAccess() {
		return gaImperativeOCL.getNavigatingSemiArgCSAccess();
	}
	
	public ParserRule getNavigatingSemiArgCSRule() {
		return getNavigatingSemiArgCSAccess().getRule();
	}

	//// Intended to be overridden
	// //	'?'	-- defined by Complete OCL
	// NavigatingArgExpCS returns ExpCS:
	//
	//	ExpCS;
	public EssentialOCLGrammarAccess.NavigatingArgExpCSElements getNavigatingArgExpCSAccess() {
		return gaImperativeOCL.getNavigatingArgExpCSAccess();
	}
	
	public ParserRule getNavigatingArgExpCSRule() {
		return getNavigatingArgExpCSAccess().getRule();
	}

	//IfExpCS:
	//
	//	"if" condition=ExpCS "then" thenExpression=ExpCS "else" elseExpression=ExpCS "endif";
	public EssentialOCLGrammarAccess.IfExpCSElements getIfExpCSAccess() {
		return gaImperativeOCL.getIfExpCSAccess();
	}
	
	public ParserRule getIfExpCSRule() {
		return getIfExpCSAccess().getRule();
	}

	//LetExpCS:
	//
	//	"let" variable+=LetVariableCS ("," variable+=LetVariableCS)* "in" in=ExpCS;
	public EssentialOCLGrammarAccess.LetExpCSElements getLetExpCSAccess() {
		return gaImperativeOCL.getLetExpCSAccess();
	}
	
	public ParserRule getLetExpCSRule() {
		return getLetExpCSAccess().getRule();
	}

	//LetVariableCS:
	//
	//	name=UnrestrictedName (":" ownedType=TypeExpCS)? "=" initExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetVariableCSElements getLetVariableCSAccess() {
		return gaImperativeOCL.getLetVariableCSAccess();
	}
	
	public ParserRule getLetVariableCSRule() {
		return getLetVariableCSAccess().getRule();
	}

	//NestedExpCS:
	//
	//	"(" source=ExpCS ")";
	public EssentialOCLGrammarAccess.NestedExpCSElements getNestedExpCSAccess() {
		return gaImperativeOCL.getNestedExpCSAccess();
	}
	
	public ParserRule getNestedExpCSRule() {
		return getNestedExpCSAccess().getRule();
	}

	//SelfExpCS:
	//
	//	{SelfExpCS} "self";
	public EssentialOCLGrammarAccess.SelfExpCSElements getSelfExpCSAccess() {
		return gaImperativeOCL.getSelfExpCSAccess();
	}
	
	public ParserRule getSelfExpCSRule() {
		return getSelfExpCSAccess().getRule();
	}
}
