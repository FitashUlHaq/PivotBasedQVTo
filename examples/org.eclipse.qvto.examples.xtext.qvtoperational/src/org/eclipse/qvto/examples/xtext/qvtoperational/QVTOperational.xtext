/**
 * <copyright>
 *
 * Copyright (c) 2013 Willink Transformation Ltd., University of York and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Adolfo Sanchez-Barbudo Herrera (University of York) - initial API and implementation
 *
 * </copyright>
 */
grammar org.eclipse.qvto.examples.xtext.qvtoperational.QVTOperational with org.eclipse.qvto.examples.xtext.imperativeocl.ImperativeOCL

// generate qvtoperationalcs "http://www.eclipse.org/qvt/pivot/1.0/QVTOperationalCS"
import "http://www.eclipse.org/qvt/pivot/1.0/QVTOperationalCS"
//import "platform:/resource/org.eclipse.qvto.examples.xtext.qvtoperational/model/QVTOperational.ecore"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/ocl/3.1.0/BaseCST" as base
import "http://www.eclipse.org/ocl/3.1.0/EssentialOCLCST" as essentialocl
import "http://www.eclipse.org/qvt/pivot/1.0/ImperativeOCLCS" as imperativeocl

//import "platform:/resource/org.eclipse.ocl.examples.xtext.base/model/BaseCST.ecore" as base
//import "platform:/resource/org.eclipse.ocl.examples.xtext.essentialocl/model/EssentialOCLCST.ecore" as essentialocl
//import "platform:/resource/org.eclipse.qvto.examples.xtext.imperativeocl/model/ImperativeOCLCST.ecore" as imperativeocl

TopLevelCS : ^import+=ImportCS* 
	// unit+=UnitElementCS* FIXME
	(ownedNestedPackage+= UnitPacakgeCS)*
	(ownedType+=ModelTypeCS)*
;

enum ClassifierKind : DATATYPE='datatype' | PRIMITIVE='primitive' | EXCEPTION='exception' | CLASS='class';
enum FeatureKey : COMPOSES='composes' | REFERRENCES='references' | READONLY='readonly' | DERIVED='derived' | STATIC='static';
enum InitOp : EQUALS='=' | COLON_EQUALS=':=' | COLON_COLON_EQUALS='::=';
enum MetamodelKind : METAMODEL= 'metamodel' | PACKAGE='package';
enum DirectionKindCS : in='in'| out='out' | inout='inout';
//enum ParamDirection : IN='in' | INOUT='inout' | OUT='out';

Qualifier returns ecore::EString : 'blackbox' & 'abstract' & 'static';

FeatureQualifier returns ecore::EString : 'composes' & 'references' & 'readonly' & 'derived' & 'static';

// ****** Imports ******
ImportCS returns QVToImportCS :
	  ('import' unit=UnitCS ';')
	|  ('from' unit=UnitCS 'import' ((importedUnitElement+=Identifier (',' importedUnitElement+=Identifier)*) | all?='*') ';')
;

UnitCS : 
	segment+=Identifier ('.' segment+=Identifier)*
;

	
// ****** definitions in a compilation unit *******
UnitPacakgeCS returns base::PackageCS:
	MetamodelCS | TransformationCS
;


UnitTypeCS returns base::TypeCS:
	ModelTypeCS
;
// ****** General rules ******
//CompleteSignatureCS: SimpleSignatureCS (':' (param+=ParameterCS (',' param+=ParameterCS)*))?;
//
SimpleSignatureCS: {SimpleSignatureCS} 
	'(' (parameter+=ParameterDeclarationCS (',' parameter+=ParameterDeclarationCS)*)? ')'
;

// FIXME  
ParameterDeclarationCS : 
	(direction= DirectionKindCS)? 
	name=UnrestrictedName // FIXME Spec grammar says  that you can have just a typeSped  
	(':' ownedType=TypedMultiplicityRefCS)?
	initPart=InitPartCS?
;

OperationParameterDeclarationCS :
	(direction= DirectionKindCS)? 
	name=UnrestrictedName // FIXME Spec grammar says  that you can have just a typeSped  
	(':' ownedType=TypedMultiplicityRefCS)?
	initPart=InitPartCS?
;

InitPartCS returns InitPartCS:  // returns ElementCS to make it inherits ElementCS 
	initOp=InitOp expression= ExpCS
;
// General rules END


// ****** Syntax for defining explicitly metamodel contents ******

MetamodelCS returns MetamodelCS: // MetamodeKind provides extra semantic, we need to retain the kind 
	metamodelKind=MetamodelKind 
	name = UnrestrictedName
	'{' (ownedType+=ClassifierCS |
		ownedType+=EnumerationCS | // FIXME QVTo grammar distincts classifier from enumeration
		ownedAnnotation+= TagCS)*
	'}' 
	';'?
;

ClassifierCS returns base::ClassifierCS:
	(DataTypeCS | ExceptionCS | ClassCS)
	';'?
;

DataTypeCS returns base::DataTypeCS:
	('datatype' | {PrimitiveTypeCS} 'primitive')
	 name=UnrestrictedName
;

ExceptionCS returns base::ClassCS: // FIXME so far, exception is another class
	'exception' 
	name = UnrestrictedName	
	('extends' (ownedSuperType+=TypedRefCS (',' ownedSuperType+=TypedRefCS)*))?
;

ClassCS returns QVToClassCS: 
	intermediate ?= 'intermediate' ? 
	qualifier += Qualifier*
	'class'
	name=UnrestrictedName
	('extends' (ownedSuperType += TypedRefCS (',' ownedSuperType+=TypedRefCS)*))?
	('{' ((ownedProperty += ClassifierPropertyCS | ownedOperation+=ClassifierOperationCS | ownedAnnotation+= TagCS) ';' )+
	'}' )?	
;

TypeRefCS returns base::TypeRefCS:
	TypedRefCS	// | WildcardTypeRefCS
				// FIXME deviation from OCLInEcore. No templates parameter, yet
;

TypedRefCS returns base::TypedRefCS:
	TypeLiteralCS | TypedTypeRefCS
;

TypedMultiplicityRefCS returns base::TypedRefCS:
	TypedRefCS (multiplicity=MultiplicityCS)?
;

TypedTypeRefCS returns base::TypedTypeRefCS:
	pathName=PathNameCS	// (ownedTemplateBinding=TemplateBindingCS)?
						// FIXME deviation from OCLInEcore. No templates parameter, yet
;


ClassifierPropertyCS returns ClassifierPropertyCS:
	stereotypes = StereotypeQualifierCS?
	qualifier+= FeatureQualifier*
	name=UnrestrictedName ':' ownedType=TypedMultiplicityRefCS
	(default=SINGLE_QUOTED_STRING) ? // FIXME QVTO syntax define a more complex InitPartCS	
	('opposites' '~'? opposite=Identifier)? // FIXME 
;

StereotypeQualifierCS returns StereotypeQualifierCS:
	'<<' (stereotype+=Identifier (',' stereotype+=Identifier)*) '>>'	
;

MultiplicityCS returns base::MultiplicityBoundsCS: '[' (lowerBound=LOWER '...')? upperBound=UPPER ']';

ClassifierOperationCS returns QVToOperationCS:
	stereotypes = StereotypeQualifierCS? 
	qualifier+= FeatureQualifier*
	name=UnrestrictedName
	'(' (ownedParameter+= OperationParameterDeclarationCS (',' ownedParameter+=OperationParameterDeclarationCS)*)? ')'
	(':' ownedType=TypedMultiplicityRefCS)?
;

// FIXME Deviation from official grammar
EnumerationCS returns base::EnumerationCS: 
	'enum' 
	name=Identifier
	(  ('{' (ownedLiterals+=EnumerationLiteralCS (',' ownedLiterals+=EnumerationLiteralCS)*) '}' ))
	';'?
;

EnumerationLiteralCS returns base::EnumerationLiteralCS:
	name=UnrestrictedName
;

TagCS returns TagCS:
	'tag' name=(UnrestrictedName|SINGLE_QUOTED_STRING)? 
	pathName=PathNameCS ('=' expression=ExpCS)? ';'
;


// typedefs
// TypedefCS: 'typedef' name=Identifier '=' typespec=TypeExpCS ('[' condition=ExpCS ']')? ';';

// ****** Transformations, mappings, etc ******

TransformationCS:
	TransformationDeclCS | TransformationDefCS
;

TransformationDeclCS returns TransformationCS:
	TransformationHeaderCS ';'
;

TransformationDefCS returns TransformationCS:
	 TransformationHeaderCS '{'
	 	(ownedType+= ModuleTypeCS)*
		(ownedProperty+= ModulePropertyCS)*
		(ownedOperation+= ModuleOperationCS)*
		 
	'}'
;

TransformationHeaderCS returns TransformationCS:
	'transformation' name=UnrestrictedName
;

ModelTypeCS:
	'modeltype' name=UnrestrictedName complianceKindCS=StringLiteralExpCS 'uses' (packageRefs+= PackageRefCS)
;

PackageRefCS:
	uriCS= StringLiteralExpCS
	| pathNameCS=PathNameCS (uriCS=StringLiteralExpCS)
;

ModulePropertyCS returns base::StructuralFeatureCS:
	ClassifierPropertyCS
;

ModuleOperationCS returns base::OperationCS: 
	MappingOperationCS
;

ModuleTypeCS returns base::ClassifierCS:
	ModelTypeCS
;

MappingOperationCS:
	MappingDeclarationCS | MappingDefinitionCS
;

MappingDeclarationCS returns MappingOperationCS:
	MappingOperationHeaderCS ';'
;

MappingDefinitionCS returns MappingOperationCS:
	MappingOperationHeaderCS '{'
	
	'}' 
;

MappingOperationHeaderCS returns MappingOperationCS:
	"mapping" name=UnreservedName
;