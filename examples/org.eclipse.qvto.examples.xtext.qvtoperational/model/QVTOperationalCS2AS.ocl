import '/resource/org.eclipse.ocl.pivot/model/Pivot.ecore'
import '/resource/org.eclipse.qvto.examples.pivot.qvtoperational/model/QVTOperational.ecore'
import '/resource/org.eclipse.qvto.examples.pivot.qvtoperational/model/QVTOperationalNameResolution.ocl'
import '/resource/org.eclipse.ocl.xtext.base/model/BaseCS.ecore'
import '/resource/org.eclipse.ocl.xtext.base/model/BaseCS2AS.ocl'
import 'QVTOperationalCS.ecore'


package qvtoperationalcs
context TopLevelCS
def : ast() : ocl::Model = 
	ocl::Model {
		ownedPackages = ownedPackages.ast()
	}
		
context QVToClassCS
def : ast() : ocl::Class =
	ocl::Class {
		name = name,
		ownedProperties = ownedProperties.ast(),
		ownedOperations = ownedOperations.ast()
	}

context OperationParameterDeclarationCS
def : ast() : qvtoperational::VarParameter =
	qvtoperational::VarParameter {
		name = name
		--kind = if direction = DirectionKindCS::inout then
		--			qvtoperational::DirectionKind::inout
		--	   else if direction = DirectionKindCS::out then
		--	   		qvtoperational::DirectionKind::out
		--	   else 
		--	   		qvtoperational::DirectionKind::_in
		--	   endif endif
		--initExpression = if (initPart.oclIsUndefined()) then
		--					null
		--				else
		--					initPart.expression -- FIXME todo .ast()
		--				endif
	}
	
context MetamodelCS
def : ast() : ocl::Package =
	ocl::Package {
		name = name,
		nsPrefix = name,	-- QVTo spec doesn't provide concrete syntax for nsPrefix
		URI = name,		-- QVTo spec doesn't provide concrete syntax for nsURI. Build an internal protocol
		ownedClasses = ownedClasses.ast()
		-- type = TODO
	}
		
context ClassifierPropertyCS
def : ast() : ocl::Property = 
	ocl::Property {
		name = name,
		isComposite = qualifiers->exists(x | x = 'composite')
		-- type = TODO
	}

context MappingOperationCS
def : ast() : qvtoperational::MappingOperation =
	qvtoperational::MappingOperation {
		name = name,
		-- ownedParameter = signature.parameter.ast()
		ownedParameters = ownedParameters.ast()
	}
	 
context TransformationCS
def : ast() : qvtoperational::OperationalTransformation =
	qvtoperational::OperationalTransformation {
		name = name,
		--nsPrefix = name,
		--nsURI = name,
		--nestedPackage = ownedNestedPackage.ast(),
		--ownedType = ownedType.ast(),
		ownedOperations = ownedOperations.ast()
	}
		 
endpackage