/*
* generated by Xtext
*/
package org.eclipse.qvto.examples.xtext.imperativeocl.services;

import java.util.List;

import org.eclipse.ocl.examples.xtext.essentialocl.services.EssentialOCLGrammarAccess;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class ImperativeOCLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class GrammmarCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GrammmarCS");
		private final RuleCall cImperativeOCLExpCSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//GrammmarCS returns essentialocl::ExpCS:
		//
		//	ImperativeOCLExpCS;
		public ParserRule getRule() { return rule; }

		//ImperativeOCLExpCS
		public RuleCall getImperativeOCLExpCSParserRuleCall() { return cImperativeOCLExpCSParserRuleCall; }
	}

	public class ImperativeOCLReservedKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImperativeOCLReservedKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cElifKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cRESOLVE_KINDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRESOLVE_IN_KINDTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ImperativeOCLReservedKeyword:
		//
		//	"default" | "elif" | RESOLVE_KIND | RESOLVE_IN_KIND;
		public ParserRule getRule() { return rule; }

		//"default" | "elif" | RESOLVE_KIND | RESOLVE_IN_KIND
		public Alternatives getAlternatives() { return cAlternatives; }

		//"default"
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }

		//"elif"
		public Keyword getElifKeyword_1() { return cElifKeyword_1; }

		//RESOLVE_KIND
		public RuleCall getRESOLVE_KINDTerminalRuleCall_2() { return cRESOLVE_KINDTerminalRuleCall_2; }

		//RESOLVE_IN_KIND
		public RuleCall getRESOLVE_IN_KINDTerminalRuleCall_3() { return cRESOLVE_IN_KINDTerminalRuleCall_3; }
	}

	public class ImperativeOCLPrefixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImperativeOCLPrefixOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNumberSignNumberSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ImperativeOCLPrefixOperator:
		//
		//	"#" | "##" | "*";
		public ParserRule getRule() { return rule; }

		//"#" | "##" | "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//"##"
		public Keyword getNumberSignNumberSignKeyword_1() { return cNumberSignNumberSignKeyword_1; }

		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
	}

	public class ImperativeOCLInfixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImperativeOCLInfixOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cASSIGN_OPTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cDefaultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ImperativeOCLInfixOperator:
		//
		//	ASSIGN_OP | "default" | "==";
		public ParserRule getRule() { return rule; }

		//ASSIGN_OP | "default" | "=="
		public Alternatives getAlternatives() { return cAlternatives; }

		//ASSIGN_OP
		public RuleCall getASSIGN_OPTerminalRuleCall_0() { return cASSIGN_OPTerminalRuleCall_0; }

		//"default"
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }
	}

	public class ImperativeOCLNavigationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImperativeOCLNavigationOperator");
		private final Keyword cExclamationMarkHyphenMinusGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//ImperativeOCLNavigationOperator:
		//
		//	"!->";
		public ParserRule getRule() { return rule; }

		//"!->"
		public Keyword getExclamationMarkHyphenMinusGreaterThanSignKeyword() { return cExclamationMarkHyphenMinusGreaterThanSignKeyword; }
	}

	public class ImperativeOCLExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImperativeOCLExpCS");
		private final RuleCall cExpCSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////PrefixOperator:
		// //	EssentialOCLPrefixOperator | QVToPrefixOperator;
		// //
		// //InfixOperator:
		//
		//
		////	EssentialOCLInfixOperator | QVToInfixOperator;
		// //
		// //NavigationOperator:
		//
		//
		////	EssentialOCLNavigationOperator | QVToNavigationOperator;
		// ImperativeOCLExpCS returns essentialocl::ExpCS:
		//
		//	ExpCS;
		public ParserRule getRule() { return rule; }

		//ExpCS
		public RuleCall getExpCSParserRuleCall() { return cExpCSParserRuleCall; }
	}

	public class TypeLiteralCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeLiteralCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCollectionTypeCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTupleTypeCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cListTypeCSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDictTypeCSParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// ********* ImperativeOCL Types *********
		// // TypeLiteralCS redefined to include the new List and Dict types
		//
		//
		//// FIXME refactor its definition in EssentialOCL to allow extension
		// TypeLiteralCS returns base::TypedRefCS:
		//
		//	PrimitiveTypeCS | CollectionTypeCS | TupleTypeCS | ListTypeCS | DictTypeCS;
		public ParserRule getRule() { return rule; }

		//PrimitiveTypeCS | CollectionTypeCS | TupleTypeCS | ListTypeCS | DictTypeCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveTypeCS
		public RuleCall getPrimitiveTypeCSParserRuleCall_0() { return cPrimitiveTypeCSParserRuleCall_0; }

		//CollectionTypeCS
		public RuleCall getCollectionTypeCSParserRuleCall_1() { return cCollectionTypeCSParserRuleCall_1; }

		//TupleTypeCS
		public RuleCall getTupleTypeCSParserRuleCall_2() { return cTupleTypeCSParserRuleCall_2; }

		//ListTypeCS
		public RuleCall getListTypeCSParserRuleCall_3() { return cListTypeCSParserRuleCall_3; }

		//DictTypeCS
		public RuleCall getDictTypeCSParserRuleCall_4() { return cDictTypeCSParserRuleCall_4; }
	}

	public class ListTypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListTypeCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeExpCSParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListTypeCS:
		//
		//	"List" "(" type=TypeExpCS ")";
		public ParserRule getRule() { return rule; }

		//"List" "(" type=TypeExpCS ")"
		public Group getGroup() { return cGroup; }

		//"List"
		public Keyword getListKeyword_0() { return cListKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//type=TypeExpCS
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//TypeExpCS
		public RuleCall getTypeTypeExpCSParserRuleCall_2_0() { return cTypeTypeExpCSParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class DictTypeCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DictTypeCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDictKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeyTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeyTypeTypeExpCSParserRuleCall_2_0 = (RuleCall)cKeyTypeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueTypeTypeExpCSParserRuleCall_4_0 = (RuleCall)cValueTypeAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DictTypeCS:
		//
		//	"Dict" "(" keyType=TypeExpCS "," valueType=TypeExpCS ")";
		public ParserRule getRule() { return rule; }

		//"Dict" "(" keyType=TypeExpCS "," valueType=TypeExpCS ")"
		public Group getGroup() { return cGroup; }

		//"Dict"
		public Keyword getDictKeyword_0() { return cDictKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//keyType=TypeExpCS
		public Assignment getKeyTypeAssignment_2() { return cKeyTypeAssignment_2; }

		//TypeExpCS
		public RuleCall getKeyTypeTypeExpCSParserRuleCall_2_0() { return cKeyTypeTypeExpCSParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//valueType=TypeExpCS
		public Assignment getValueTypeAssignment_4() { return cValueTypeAssignment_4; }

		//TypeExpCS
		public RuleCall getValueTypeTypeExpCSParserRuleCall_4_0() { return cValueTypeTypeExpCSParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class PrimaryExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNestedExpCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfExpCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSelfExpCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrimitiveLiteralExpCSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTupleLiteralExpCSParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCollectionLiteralExpCSParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cListLiteralExpCSParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDictLiteralExpCSParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTypeLiteralExpCSParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cReturnExpCSParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cNameExpCSAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Assignment cPathNameAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cPathNamePathNameCSParserRuleCall_10_1_0 = (RuleCall)cPathNameAssignment_10_1.eContents().get(0);
		private final Alternatives cAlternatives_10_2 = (Alternatives)cGroup_10.eContents().get(2);
		private final Group cGroup_10_2_0 = (Group)cAlternatives_10_2.eContents().get(0);
		private final Action cIndexExpCSNameExpAction_10_2_0_0 = (Action)cGroup_10_2_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_10_2_0_1 = (Keyword)cGroup_10_2_0.eContents().get(1);
		private final Assignment cFirstIndexesAssignment_10_2_0_2 = (Assignment)cGroup_10_2_0.eContents().get(2);
		private final RuleCall cFirstIndexesExpCSParserRuleCall_10_2_0_2_0 = (RuleCall)cFirstIndexesAssignment_10_2_0_2.eContents().get(0);
		private final Group cGroup_10_2_0_3 = (Group)cGroup_10_2_0.eContents().get(3);
		private final Keyword cCommaKeyword_10_2_0_3_0 = (Keyword)cGroup_10_2_0_3.eContents().get(0);
		private final Assignment cFirstIndexesAssignment_10_2_0_3_1 = (Assignment)cGroup_10_2_0_3.eContents().get(1);
		private final RuleCall cFirstIndexesExpCSParserRuleCall_10_2_0_3_1_0 = (RuleCall)cFirstIndexesAssignment_10_2_0_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10_2_0_4 = (Keyword)cGroup_10_2_0.eContents().get(4);
		private final Group cGroup_10_2_0_5 = (Group)cGroup_10_2_0.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_10_2_0_5_0 = (Keyword)cGroup_10_2_0_5.eContents().get(0);
		private final Assignment cSecondIndexesAssignment_10_2_0_5_1 = (Assignment)cGroup_10_2_0_5.eContents().get(1);
		private final RuleCall cSecondIndexesExpCSParserRuleCall_10_2_0_5_1_0 = (RuleCall)cSecondIndexesAssignment_10_2_0_5_1.eContents().get(0);
		private final Group cGroup_10_2_0_5_2 = (Group)cGroup_10_2_0_5.eContents().get(2);
		private final Keyword cCommaKeyword_10_2_0_5_2_0 = (Keyword)cGroup_10_2_0_5_2.eContents().get(0);
		private final Assignment cSecondIndexesAssignment_10_2_0_5_2_1 = (Assignment)cGroup_10_2_0_5_2.eContents().get(1);
		private final RuleCall cSecondIndexesExpCSParserRuleCall_10_2_0_5_2_1_0 = (RuleCall)cSecondIndexesAssignment_10_2_0_5_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10_2_0_5_3 = (Keyword)cGroup_10_2_0_5.eContents().get(3);
		private final Group cGroup_10_2_0_6 = (Group)cGroup_10_2_0.eContents().get(6);
		private final Assignment cAtPreAssignment_10_2_0_6_0 = (Assignment)cGroup_10_2_0_6.eContents().get(0);
		private final Keyword cAtPreCommercialAtKeyword_10_2_0_6_0_0 = (Keyword)cAtPreAssignment_10_2_0_6_0.eContents().get(0);
		private final Keyword cPreKeyword_10_2_0_6_1 = (Keyword)cGroup_10_2_0_6.eContents().get(1);
		private final Group cGroup_10_2_1 = (Group)cAlternatives_10_2.eContents().get(1);
		private final Action cConstructorExpCSNameExpAction_10_2_1_0 = (Action)cGroup_10_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_10_2_1_1 = (Keyword)cGroup_10_2_1.eContents().get(1);
		private final Alternatives cAlternatives_10_2_1_2 = (Alternatives)cGroup_10_2_1.eContents().get(2);
		private final Group cGroup_10_2_1_2_0 = (Group)cAlternatives_10_2_1_2.eContents().get(0);
		private final Assignment cOwnedPartsAssignment_10_2_1_2_0_0 = (Assignment)cGroup_10_2_1_2_0.eContents().get(0);
		private final RuleCall cOwnedPartsConstructorPartCSParserRuleCall_10_2_1_2_0_0_0 = (RuleCall)cOwnedPartsAssignment_10_2_1_2_0_0.eContents().get(0);
		private final Group cGroup_10_2_1_2_0_1 = (Group)cGroup_10_2_1_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_10_2_1_2_0_1_0 = (Keyword)cGroup_10_2_1_2_0_1.eContents().get(0);
		private final Assignment cOwnedPartsAssignment_10_2_1_2_0_1_1 = (Assignment)cGroup_10_2_1_2_0_1.eContents().get(1);
		private final RuleCall cOwnedPartsConstructorPartCSParserRuleCall_10_2_1_2_0_1_1_0 = (RuleCall)cOwnedPartsAssignment_10_2_1_2_0_1_1.eContents().get(0);
		private final Assignment cValueAssignment_10_2_1_2_1 = (Assignment)cAlternatives_10_2_1_2.eContents().get(1);
		private final RuleCall cValueStringLiteralParserRuleCall_10_2_1_2_1_0 = (RuleCall)cValueAssignment_10_2_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_2_1_3 = (Keyword)cGroup_10_2_1.eContents().get(3);
		private final Group cGroup_10_2_2 = (Group)cAlternatives_10_2.eContents().get(2);
		private final Group cGroup_10_2_2_0 = (Group)cGroup_10_2_2.eContents().get(0);
		private final Assignment cAtPreAssignment_10_2_2_0_0 = (Assignment)cGroup_10_2_2_0.eContents().get(0);
		private final Keyword cAtPreCommercialAtKeyword_10_2_2_0_0_0 = (Keyword)cAtPreAssignment_10_2_2_0_0.eContents().get(0);
		private final Keyword cPreKeyword_10_2_2_0_1 = (Keyword)cGroup_10_2_2_0.eContents().get(1);
		private final Group cGroup_10_2_2_1 = (Group)cGroup_10_2_2.eContents().get(1);
		private final Action cInvocationExpCSNameExpAction_10_2_2_1_0 = (Action)cGroup_10_2_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_10_2_2_1_1 = (Keyword)cGroup_10_2_2_1.eContents().get(1);
		private final Group cGroup_10_2_2_1_2 = (Group)cGroup_10_2_2_1.eContents().get(2);
		private final Assignment cArgumentAssignment_10_2_2_1_2_0 = (Assignment)cGroup_10_2_2_1_2.eContents().get(0);
		private final RuleCall cArgumentNavigatingArgCSParserRuleCall_10_2_2_1_2_0_0 = (RuleCall)cArgumentAssignment_10_2_2_1_2_0.eContents().get(0);
		private final Assignment cArgumentAssignment_10_2_2_1_2_1 = (Assignment)cGroup_10_2_2_1_2.eContents().get(1);
		private final RuleCall cArgumentNavigatingCommaArgCSParserRuleCall_10_2_2_1_2_1_0 = (RuleCall)cArgumentAssignment_10_2_2_1_2_1.eContents().get(0);
		private final Group cGroup_10_2_2_1_2_2 = (Group)cGroup_10_2_2_1_2.eContents().get(2);
		private final Assignment cArgumentAssignment_10_2_2_1_2_2_0 = (Assignment)cGroup_10_2_2_1_2_2.eContents().get(0);
		private final RuleCall cArgumentNavigatingSemiArgCSParserRuleCall_10_2_2_1_2_2_0_0 = (RuleCall)cArgumentAssignment_10_2_2_1_2_2_0.eContents().get(0);
		private final Assignment cArgumentAssignment_10_2_2_1_2_2_1 = (Assignment)cGroup_10_2_2_1_2_2.eContents().get(1);
		private final RuleCall cArgumentNavigatingCommaArgCSParserRuleCall_10_2_2_1_2_2_1_0 = (RuleCall)cArgumentAssignment_10_2_2_1_2_2_1.eContents().get(0);
		private final Group cGroup_10_2_2_1_2_3 = (Group)cGroup_10_2_2_1_2.eContents().get(3);
		private final Assignment cArgumentAssignment_10_2_2_1_2_3_0 = (Assignment)cGroup_10_2_2_1_2_3.eContents().get(0);
		private final RuleCall cArgumentNavigatingBarArgCSParserRuleCall_10_2_2_1_2_3_0_0 = (RuleCall)cArgumentAssignment_10_2_2_1_2_3_0.eContents().get(0);
		private final Assignment cArgumentAssignment_10_2_2_1_2_3_1 = (Assignment)cGroup_10_2_2_1_2_3.eContents().get(1);
		private final RuleCall cArgumentNavigatingCommaArgCSParserRuleCall_10_2_2_1_2_3_1_0 = (RuleCall)cArgumentAssignment_10_2_2_1_2_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_2_2_1_3 = (Keyword)cGroup_10_2_2_1.eContents().get(3);
		
		//// ********* ImperativeOCL Expressions *********
		//
		//
		//// PrimaryExpCS redefined to include the new List and Dict literal expressions
		//
		//
		//// FIXME refactor its definition in EssentialOCL to allow extension
		// // These rules are ordered most rejectable first
		//
		//
		//PrimaryExpCS returns essentialocl::ExpCS:
		//
		//	NestedExpCS | IfExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | CollectionLiteralExpCS |
		//
		//	ListLiteralExpCS | DictLiteralExpCS | TypeLiteralExpCS | ReturnExpCS | {NameExpCS} pathName=PathNameCS
		//
		//	({IndexExpCS.nameExp=current} "[" firstIndexes+=ExpCS ("," firstIndexes+=ExpCS)* "]" ("[" secondIndexes+=ExpCS (","
		//
		//	secondIndexes+=ExpCS)* "]")? (atPre?="@" "pre")? | {ConstructorExpCS.nameExp=current} "{"
		//
		//	(ownedParts+=ConstructorPartCS ("," ownedParts+=ConstructorPartCS)* | value=StringLiteral) "}" | (atPre?="@" "pre")?
		//
		//	({InvocationExpCS.nameExp=current} "(" (argument+=NavigatingArgCS argument+=NavigatingCommaArgCS*
		//
		//	(argument+=NavigatingSemiArgCS argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS
		//
		//	argument+=NavigatingCommaArgCS*)?)? ")")?);
		public ParserRule getRule() { return rule; }

		//NestedExpCS | IfExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | CollectionLiteralExpCS |
		//
		//ListLiteralExpCS | DictLiteralExpCS | TypeLiteralExpCS | ReturnExpCS | {NameExpCS} pathName=PathNameCS
		//
		//({IndexExpCS.nameExp=current} "[" firstIndexes+=ExpCS ("," firstIndexes+=ExpCS)* "]" ("[" secondIndexes+=ExpCS (","
		//
		//secondIndexes+=ExpCS)* "]")? (atPre?="@" "pre")? | {ConstructorExpCS.nameExp=current} "{"
		//
		//(ownedParts+=ConstructorPartCS ("," ownedParts+=ConstructorPartCS)* | value=StringLiteral) "}" | (atPre?="@" "pre")?
		//
		//({InvocationExpCS.nameExp=current} "(" (argument+=NavigatingArgCS argument+=NavigatingCommaArgCS*
		//
		//(argument+=NavigatingSemiArgCS argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS
		//
		//argument+=NavigatingCommaArgCS*)?)? ")")?)
		public Alternatives getAlternatives() { return cAlternatives; }

		//NestedExpCS
		public RuleCall getNestedExpCSParserRuleCall_0() { return cNestedExpCSParserRuleCall_0; }

		//IfExpCS
		public RuleCall getIfExpCSParserRuleCall_1() { return cIfExpCSParserRuleCall_1; }

		//SelfExpCS
		public RuleCall getSelfExpCSParserRuleCall_2() { return cSelfExpCSParserRuleCall_2; }

		//PrimitiveLiteralExpCS
		public RuleCall getPrimitiveLiteralExpCSParserRuleCall_3() { return cPrimitiveLiteralExpCSParserRuleCall_3; }

		//TupleLiteralExpCS
		public RuleCall getTupleLiteralExpCSParserRuleCall_4() { return cTupleLiteralExpCSParserRuleCall_4; }

		//CollectionLiteralExpCS
		public RuleCall getCollectionLiteralExpCSParserRuleCall_5() { return cCollectionLiteralExpCSParserRuleCall_5; }

		//ListLiteralExpCS
		public RuleCall getListLiteralExpCSParserRuleCall_6() { return cListLiteralExpCSParserRuleCall_6; }

		//DictLiteralExpCS
		public RuleCall getDictLiteralExpCSParserRuleCall_7() { return cDictLiteralExpCSParserRuleCall_7; }

		//TypeLiteralExpCS
		public RuleCall getTypeLiteralExpCSParserRuleCall_8() { return cTypeLiteralExpCSParserRuleCall_8; }

		//ReturnExpCS
		public RuleCall getReturnExpCSParserRuleCall_9() { return cReturnExpCSParserRuleCall_9; }

		//{NameExpCS} pathName=PathNameCS ({IndexExpCS.nameExp=current} "[" firstIndexes+=ExpCS ("," firstIndexes+=ExpCS)* "]"
		//
		//("[" secondIndexes+=ExpCS ("," secondIndexes+=ExpCS)* "]")? (atPre?="@" "pre")? | {ConstructorExpCS.nameExp=current}
		//
		//"{" (ownedParts+=ConstructorPartCS ("," ownedParts+=ConstructorPartCS)* | value=StringLiteral) "}" | (atPre?="@"
		//
		//"pre")? ({InvocationExpCS.nameExp=current} "(" (argument+=NavigatingArgCS argument+=NavigatingCommaArgCS*
		//
		//(argument+=NavigatingSemiArgCS argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS
		//
		//argument+=NavigatingCommaArgCS*)?)? ")")?)
		public Group getGroup_10() { return cGroup_10; }

		//{NameExpCS}
		public Action getNameExpCSAction_10_0() { return cNameExpCSAction_10_0; }

		//pathName=PathNameCS
		public Assignment getPathNameAssignment_10_1() { return cPathNameAssignment_10_1; }

		//PathNameCS
		public RuleCall getPathNamePathNameCSParserRuleCall_10_1_0() { return cPathNamePathNameCSParserRuleCall_10_1_0; }

		//{IndexExpCS.nameExp=current} "[" firstIndexes+=ExpCS ("," firstIndexes+=ExpCS)* "]" ("[" secondIndexes+=ExpCS (","
		//
		//secondIndexes+=ExpCS)* "]")? (atPre?="@" "pre")? | {ConstructorExpCS.nameExp=current} "{"
		//
		//(ownedParts+=ConstructorPartCS ("," ownedParts+=ConstructorPartCS)* | value=StringLiteral) "}" | (atPre?="@" "pre")?
		//
		//({InvocationExpCS.nameExp=current} "(" (argument+=NavigatingArgCS argument+=NavigatingCommaArgCS*
		//
		//(argument+=NavigatingSemiArgCS argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS
		//
		//argument+=NavigatingCommaArgCS*)?)? ")")?
		public Alternatives getAlternatives_10_2() { return cAlternatives_10_2; }

		//{IndexExpCS.nameExp=current} "[" firstIndexes+=ExpCS ("," firstIndexes+=ExpCS)* "]" ("[" secondIndexes+=ExpCS (","
		//
		//secondIndexes+=ExpCS)* "]")? (atPre?="@" "pre")?
		public Group getGroup_10_2_0() { return cGroup_10_2_0; }

		//{IndexExpCS.nameExp=current}
		public Action getIndexExpCSNameExpAction_10_2_0_0() { return cIndexExpCSNameExpAction_10_2_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_10_2_0_1() { return cLeftSquareBracketKeyword_10_2_0_1; }

		//firstIndexes+=ExpCS
		public Assignment getFirstIndexesAssignment_10_2_0_2() { return cFirstIndexesAssignment_10_2_0_2; }

		//ExpCS
		public RuleCall getFirstIndexesExpCSParserRuleCall_10_2_0_2_0() { return cFirstIndexesExpCSParserRuleCall_10_2_0_2_0; }

		//("," firstIndexes+=ExpCS)*
		public Group getGroup_10_2_0_3() { return cGroup_10_2_0_3; }

		//","
		public Keyword getCommaKeyword_10_2_0_3_0() { return cCommaKeyword_10_2_0_3_0; }

		//firstIndexes+=ExpCS
		public Assignment getFirstIndexesAssignment_10_2_0_3_1() { return cFirstIndexesAssignment_10_2_0_3_1; }

		//ExpCS
		public RuleCall getFirstIndexesExpCSParserRuleCall_10_2_0_3_1_0() { return cFirstIndexesExpCSParserRuleCall_10_2_0_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_10_2_0_4() { return cRightSquareBracketKeyword_10_2_0_4; }

		//("[" secondIndexes+=ExpCS ("," secondIndexes+=ExpCS)* "]")?
		public Group getGroup_10_2_0_5() { return cGroup_10_2_0_5; }

		//"["
		public Keyword getLeftSquareBracketKeyword_10_2_0_5_0() { return cLeftSquareBracketKeyword_10_2_0_5_0; }

		//secondIndexes+=ExpCS
		public Assignment getSecondIndexesAssignment_10_2_0_5_1() { return cSecondIndexesAssignment_10_2_0_5_1; }

		//ExpCS
		public RuleCall getSecondIndexesExpCSParserRuleCall_10_2_0_5_1_0() { return cSecondIndexesExpCSParserRuleCall_10_2_0_5_1_0; }

		//("," secondIndexes+=ExpCS)*
		public Group getGroup_10_2_0_5_2() { return cGroup_10_2_0_5_2; }

		//","
		public Keyword getCommaKeyword_10_2_0_5_2_0() { return cCommaKeyword_10_2_0_5_2_0; }

		//secondIndexes+=ExpCS
		public Assignment getSecondIndexesAssignment_10_2_0_5_2_1() { return cSecondIndexesAssignment_10_2_0_5_2_1; }

		//ExpCS
		public RuleCall getSecondIndexesExpCSParserRuleCall_10_2_0_5_2_1_0() { return cSecondIndexesExpCSParserRuleCall_10_2_0_5_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_10_2_0_5_3() { return cRightSquareBracketKeyword_10_2_0_5_3; }

		//(atPre?="@" "pre")?
		public Group getGroup_10_2_0_6() { return cGroup_10_2_0_6; }

		//atPre?="@"
		public Assignment getAtPreAssignment_10_2_0_6_0() { return cAtPreAssignment_10_2_0_6_0; }

		//"@"
		public Keyword getAtPreCommercialAtKeyword_10_2_0_6_0_0() { return cAtPreCommercialAtKeyword_10_2_0_6_0_0; }

		//"pre"
		public Keyword getPreKeyword_10_2_0_6_1() { return cPreKeyword_10_2_0_6_1; }

		//{ConstructorExpCS.nameExp=current} "{" (ownedParts+=ConstructorPartCS ("," ownedParts+=ConstructorPartCS)* |
		//
		//value=StringLiteral) "}"
		public Group getGroup_10_2_1() { return cGroup_10_2_1; }

		//{ConstructorExpCS.nameExp=current}
		public Action getConstructorExpCSNameExpAction_10_2_1_0() { return cConstructorExpCSNameExpAction_10_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_10_2_1_1() { return cLeftCurlyBracketKeyword_10_2_1_1; }

		//ownedParts+=ConstructorPartCS ("," ownedParts+=ConstructorPartCS)* | value=StringLiteral
		public Alternatives getAlternatives_10_2_1_2() { return cAlternatives_10_2_1_2; }

		//ownedParts+=ConstructorPartCS ("," ownedParts+=ConstructorPartCS)*
		public Group getGroup_10_2_1_2_0() { return cGroup_10_2_1_2_0; }

		//ownedParts+=ConstructorPartCS
		public Assignment getOwnedPartsAssignment_10_2_1_2_0_0() { return cOwnedPartsAssignment_10_2_1_2_0_0; }

		//ConstructorPartCS
		public RuleCall getOwnedPartsConstructorPartCSParserRuleCall_10_2_1_2_0_0_0() { return cOwnedPartsConstructorPartCSParserRuleCall_10_2_1_2_0_0_0; }

		//("," ownedParts+=ConstructorPartCS)*
		public Group getGroup_10_2_1_2_0_1() { return cGroup_10_2_1_2_0_1; }

		//","
		public Keyword getCommaKeyword_10_2_1_2_0_1_0() { return cCommaKeyword_10_2_1_2_0_1_0; }

		//ownedParts+=ConstructorPartCS
		public Assignment getOwnedPartsAssignment_10_2_1_2_0_1_1() { return cOwnedPartsAssignment_10_2_1_2_0_1_1; }

		//ConstructorPartCS
		public RuleCall getOwnedPartsConstructorPartCSParserRuleCall_10_2_1_2_0_1_1_0() { return cOwnedPartsConstructorPartCSParserRuleCall_10_2_1_2_0_1_1_0; }

		//value=StringLiteral
		public Assignment getValueAssignment_10_2_1_2_1() { return cValueAssignment_10_2_1_2_1; }

		//StringLiteral
		public RuleCall getValueStringLiteralParserRuleCall_10_2_1_2_1_0() { return cValueStringLiteralParserRuleCall_10_2_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10_2_1_3() { return cRightCurlyBracketKeyword_10_2_1_3; }

		//(atPre?="@" "pre")? ({InvocationExpCS.nameExp=current} "(" (argument+=NavigatingArgCS argument+=NavigatingCommaArgCS*
		//
		//(argument+=NavigatingSemiArgCS argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS
		//
		//argument+=NavigatingCommaArgCS*)?)? ")")?
		public Group getGroup_10_2_2() { return cGroup_10_2_2; }

		//(atPre?="@" "pre")?
		public Group getGroup_10_2_2_0() { return cGroup_10_2_2_0; }

		//atPre?="@"
		public Assignment getAtPreAssignment_10_2_2_0_0() { return cAtPreAssignment_10_2_2_0_0; }

		//"@"
		public Keyword getAtPreCommercialAtKeyword_10_2_2_0_0_0() { return cAtPreCommercialAtKeyword_10_2_2_0_0_0; }

		//"pre"
		public Keyword getPreKeyword_10_2_2_0_1() { return cPreKeyword_10_2_2_0_1; }

		//({InvocationExpCS.nameExp=current} "(" (argument+=NavigatingArgCS argument+=NavigatingCommaArgCS*
		//
		//(argument+=NavigatingSemiArgCS argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS
		//
		//argument+=NavigatingCommaArgCS*)?)? ")")?
		public Group getGroup_10_2_2_1() { return cGroup_10_2_2_1; }

		//{InvocationExpCS.nameExp=current}
		public Action getInvocationExpCSNameExpAction_10_2_2_1_0() { return cInvocationExpCSNameExpAction_10_2_2_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_10_2_2_1_1() { return cLeftParenthesisKeyword_10_2_2_1_1; }

		//(argument+=NavigatingArgCS argument+=NavigatingCommaArgCS* (argument+=NavigatingSemiArgCS
		//
		//argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS argument+=NavigatingCommaArgCS*)?)?
		public Group getGroup_10_2_2_1_2() { return cGroup_10_2_2_1_2; }

		//argument+=NavigatingArgCS
		public Assignment getArgumentAssignment_10_2_2_1_2_0() { return cArgumentAssignment_10_2_2_1_2_0; }

		//NavigatingArgCS
		public RuleCall getArgumentNavigatingArgCSParserRuleCall_10_2_2_1_2_0_0() { return cArgumentNavigatingArgCSParserRuleCall_10_2_2_1_2_0_0; }

		//argument+=NavigatingCommaArgCS*
		public Assignment getArgumentAssignment_10_2_2_1_2_1() { return cArgumentAssignment_10_2_2_1_2_1; }

		//NavigatingCommaArgCS
		public RuleCall getArgumentNavigatingCommaArgCSParserRuleCall_10_2_2_1_2_1_0() { return cArgumentNavigatingCommaArgCSParserRuleCall_10_2_2_1_2_1_0; }

		//(argument+=NavigatingSemiArgCS argument+=NavigatingCommaArgCS*)?
		public Group getGroup_10_2_2_1_2_2() { return cGroup_10_2_2_1_2_2; }

		//argument+=NavigatingSemiArgCS
		public Assignment getArgumentAssignment_10_2_2_1_2_2_0() { return cArgumentAssignment_10_2_2_1_2_2_0; }

		//NavigatingSemiArgCS
		public RuleCall getArgumentNavigatingSemiArgCSParserRuleCall_10_2_2_1_2_2_0_0() { return cArgumentNavigatingSemiArgCSParserRuleCall_10_2_2_1_2_2_0_0; }

		//argument+=NavigatingCommaArgCS*
		public Assignment getArgumentAssignment_10_2_2_1_2_2_1() { return cArgumentAssignment_10_2_2_1_2_2_1; }

		//NavigatingCommaArgCS
		public RuleCall getArgumentNavigatingCommaArgCSParserRuleCall_10_2_2_1_2_2_1_0() { return cArgumentNavigatingCommaArgCSParserRuleCall_10_2_2_1_2_2_1_0; }

		//(argument+=NavigatingBarArgCS argument+=NavigatingCommaArgCS*)?
		public Group getGroup_10_2_2_1_2_3() { return cGroup_10_2_2_1_2_3; }

		//argument+=NavigatingBarArgCS
		public Assignment getArgumentAssignment_10_2_2_1_2_3_0() { return cArgumentAssignment_10_2_2_1_2_3_0; }

		//NavigatingBarArgCS
		public RuleCall getArgumentNavigatingBarArgCSParserRuleCall_10_2_2_1_2_3_0_0() { return cArgumentNavigatingBarArgCSParserRuleCall_10_2_2_1_2_3_0_0; }

		//argument+=NavigatingCommaArgCS*
		public Assignment getArgumentAssignment_10_2_2_1_2_3_1() { return cArgumentAssignment_10_2_2_1_2_3_1; }

		//NavigatingCommaArgCS
		public RuleCall getArgumentNavigatingCommaArgCSParserRuleCall_10_2_2_1_2_3_1_0() { return cArgumentNavigatingCommaArgCSParserRuleCall_10_2_2_1_2_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10_2_2_1_3() { return cRightParenthesisKeyword_10_2_2_1_3; }
	}

	public class ListLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListLiteralExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Action cListLiteralExpCSAction_2 = (Action)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOwnedPartsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cOwnedPartsCollectionLiteralPartCSParserRuleCall_3_0_0 = (RuleCall)cOwnedPartsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cOwnedPartsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cOwnedPartsCollectionLiteralPartCSParserRuleCall_3_1_1_0 = (RuleCall)cOwnedPartsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListLiteralExpCS:
		//
		//	"List" "{" {ListLiteralExpCS} (ownedParts+=CollectionLiteralPartCS ("," ownedParts+=CollectionLiteralPartCS)*)? "}";
		public ParserRule getRule() { return rule; }

		//"List" "{" {ListLiteralExpCS} (ownedParts+=CollectionLiteralPartCS ("," ownedParts+=CollectionLiteralPartCS)*)? "}"
		public Group getGroup() { return cGroup; }

		//"List"
		public Keyword getListKeyword_0() { return cListKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//{ListLiteralExpCS}
		public Action getListLiteralExpCSAction_2() { return cListLiteralExpCSAction_2; }

		//(ownedParts+=CollectionLiteralPartCS ("," ownedParts+=CollectionLiteralPartCS)*)?
		public Group getGroup_3() { return cGroup_3; }

		//ownedParts+=CollectionLiteralPartCS
		public Assignment getOwnedPartsAssignment_3_0() { return cOwnedPartsAssignment_3_0; }

		//CollectionLiteralPartCS
		public RuleCall getOwnedPartsCollectionLiteralPartCSParserRuleCall_3_0_0() { return cOwnedPartsCollectionLiteralPartCSParserRuleCall_3_0_0; }

		//("," ownedParts+=CollectionLiteralPartCS)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//ownedParts+=CollectionLiteralPartCS
		public Assignment getOwnedPartsAssignment_3_1_1() { return cOwnedPartsAssignment_3_1_1; }

		//CollectionLiteralPartCS
		public RuleCall getOwnedPartsCollectionLiteralPartCSParserRuleCall_3_1_1_0() { return cOwnedPartsCollectionLiteralPartCSParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DictLiteralExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DictLiteralExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDictKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Action cDictLiteralExpCSAction_2 = (Action)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOwnedPartsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cOwnedPartsDictLiteralPartCSParserRuleCall_3_0_0 = (RuleCall)cOwnedPartsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cOwnedPartsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cOwnedPartsDictLiteralPartCSParserRuleCall_3_1_1_0 = (RuleCall)cOwnedPartsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DictLiteralExpCS:
		//
		//	"Dict" "{" {DictLiteralExpCS} (ownedParts+=DictLiteralPartCS ("," ownedParts+=DictLiteralPartCS)*)? "}";
		public ParserRule getRule() { return rule; }

		//"Dict" "{" {DictLiteralExpCS} (ownedParts+=DictLiteralPartCS ("," ownedParts+=DictLiteralPartCS)*)? "}"
		public Group getGroup() { return cGroup; }

		//"Dict"
		public Keyword getDictKeyword_0() { return cDictKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//{DictLiteralExpCS}
		public Action getDictLiteralExpCSAction_2() { return cDictLiteralExpCSAction_2; }

		//(ownedParts+=DictLiteralPartCS ("," ownedParts+=DictLiteralPartCS)*)?
		public Group getGroup_3() { return cGroup_3; }

		//ownedParts+=DictLiteralPartCS
		public Assignment getOwnedPartsAssignment_3_0() { return cOwnedPartsAssignment_3_0; }

		//DictLiteralPartCS
		public RuleCall getOwnedPartsDictLiteralPartCSParserRuleCall_3_0_0() { return cOwnedPartsDictLiteralPartCSParserRuleCall_3_0_0; }

		//("," ownedParts+=DictLiteralPartCS)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//ownedParts+=DictLiteralPartCS
		public Assignment getOwnedPartsAssignment_3_1_1() { return cOwnedPartsAssignment_3_1_1; }

		//DictLiteralPartCS
		public RuleCall getOwnedPartsDictLiteralPartCSParserRuleCall_3_1_1_0() { return cOwnedPartsDictLiteralPartCSParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DictLiteralPartCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DictLiteralPartCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyPrimitiveLiteralExpCSParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpCSParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//DictLiteralPartCS:
		//
		//	key=PrimitiveLiteralExpCS "=" value=ExpCS;
		public ParserRule getRule() { return rule; }

		//key=PrimitiveLiteralExpCS "=" value=ExpCS
		public Group getGroup() { return cGroup; }

		//key=PrimitiveLiteralExpCS
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//PrimitiveLiteralExpCS
		public RuleCall getKeyPrimitiveLiteralExpCSParserRuleCall_0_0() { return cKeyPrimitiveLiteralExpCSParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=ExpCS
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ExpCS
		public RuleCall getValueExpCSParserRuleCall_2_0() { return cValueExpCSParserRuleCall_2_0; }
	}

	public class ReturnExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cReturnExpCSAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpCSParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ReturnExpCS:
		//
		//	"return" {ReturnExpCS} value=ExpCS?;
		public ParserRule getRule() { return rule; }

		//"return" {ReturnExpCS} value=ExpCS?
		public Group getGroup() { return cGroup; }

		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//{ReturnExpCS}
		public Action getReturnExpCSAction_1() { return cReturnExpCSAction_1; }

		//value=ExpCS?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ExpCS
		public RuleCall getValueExpCSParserRuleCall_2_0() { return cValueExpCSParserRuleCall_2_0; }
	}
	
	
	private GrammmarCSElements pGrammmarCS;
	private TerminalRule tACCESS_OP;
	private TerminalRule tASSIGN_OP;
	private TerminalRule tCMP_OP;
	private TerminalRule tMULT_OP;
	private TerminalRule tMULTI_ITERATOR_OP;
	private TerminalRule tRESOLVE_IN_KIND;
	private TerminalRule tRESOLVE_KIND;
	private TerminalRule tSIMPLE_ITERATOR_OP;
	private TerminalRule tUNARY_OP;
	private ImperativeOCLReservedKeywordElements pImperativeOCLReservedKeyword;
	private ImperativeOCLPrefixOperatorElements pImperativeOCLPrefixOperator;
	private ImperativeOCLInfixOperatorElements pImperativeOCLInfixOperator;
	private ImperativeOCLNavigationOperatorElements pImperativeOCLNavigationOperator;
	private ImperativeOCLExpCSElements pImperativeOCLExpCS;
	private TypeLiteralCSElements pTypeLiteralCS;
	private ListTypeCSElements pListTypeCS;
	private DictTypeCSElements pDictTypeCS;
	private PrimaryExpCSElements pPrimaryExpCS;
	private ListLiteralExpCSElements pListLiteralExpCS;
	private DictLiteralExpCSElements pDictLiteralExpCS;
	private DictLiteralPartCSElements pDictLiteralPartCS;
	private ReturnExpCSElements pReturnExpCS;
	
	private final Grammar grammar;

	private EssentialOCLGrammarAccess gaEssentialOCL;

	@Inject
	public ImperativeOCLGrammarAccess(GrammarProvider grammarProvider,
		EssentialOCLGrammarAccess gaEssentialOCL) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaEssentialOCL = gaEssentialOCL;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.qvto.examples.xtext.imperativeocl.ImperativeOCL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public EssentialOCLGrammarAccess getEssentialOCLGrammarAccess() {
		return gaEssentialOCL;
	}

	
	//GrammmarCS returns essentialocl::ExpCS:
	//
	//	ImperativeOCLExpCS;
	public GrammmarCSElements getGrammmarCSAccess() {
		return (pGrammmarCS != null) ? pGrammmarCS : (pGrammmarCS = new GrammmarCSElements());
	}
	
	public ParserRule getGrammmarCSRule() {
		return getGrammmarCSAccess().getRule();
	}

	//terminal ACCESS_OP:
	//
	//	"." | "->" | "!->";
	public TerminalRule getACCESS_OPRule() {
		return (tACCESS_OP != null) ? tACCESS_OP : (tACCESS_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ACCESS_OP"));
	} 

	//// terminal ADD_OP: '+' | '-';
	// terminal ASSIGN_OP:
	//
	//	":=" | "::=" | "+=" | "-=";
	public TerminalRule getASSIGN_OPRule() {
		return (tASSIGN_OP != null) ? tASSIGN_OP : (tASSIGN_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ASSIGN_OP"));
	} 

	//terminal CMP_OP:
	//
	//	"=" | "==" | "<>" | "<" | ">" | "<=" | ">=";
	public TerminalRule getCMP_OPRule() {
		return (tCMP_OP != null) ? tCMP_OP : (tCMP_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CMP_OP"));
	} 

	//terminal MULT_OP:
	//
	//	"*" | "/" | "%";
	public TerminalRule getMULT_OPRule() {
		return (tMULT_OP != null) ? tMULT_OP : (tMULT_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MULT_OP"));
	} 

	//terminal MULTI_ITERATOR_OP:
	//
	//	"forAll";
	public TerminalRule getMULTI_ITERATOR_OPRule() {
		return (tMULTI_ITERATOR_OP != null) ? tMULTI_ITERATOR_OP : (tMULTI_ITERATOR_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MULTI_ITERATOR_OP"));
	} 

	//// terminal OR_OP: 'or' | 'xor';
	// terminal RESOLVE_IN_KIND:
	//
	//	"resolveIn" | "resolveoneIn" | "invresolveIn" | "invresolveoneIn";
	public TerminalRule getRESOLVE_IN_KINDRule() {
		return (tRESOLVE_IN_KIND != null) ? tRESOLVE_IN_KIND : (tRESOLVE_IN_KIND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RESOLVE_IN_KIND"));
	} 

	//terminal RESOLVE_KIND:
	//
	//	"resolve" | "resolveone" | "invresolve" | "invresolveone";
	public TerminalRule getRESOLVE_KINDRule() {
		return (tRESOLVE_KIND != null) ? tRESOLVE_KIND : (tRESOLVE_KIND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RESOLVE_KIND"));
	} 

	//terminal SIMPLE_ITERATOR_OP:
	//
	//	"reject" | "select" | "collect" | "exists" | "one" | "any" | "isUnique" | "collectNested" | "sortedBy" | "xselect" |
	//
	//	"xcollect" | "selectOne" | "collectOne" | "collectselect" | "collectselectOne";
	public TerminalRule getSIMPLE_ITERATOR_OPRule() {
		return (tSIMPLE_ITERATOR_OP != null) ? tSIMPLE_ITERATOR_OP : (tSIMPLE_ITERATOR_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SIMPLE_ITERATOR_OP"));
	} 

	//terminal UNARY_OP:
	//
	//	"-" | "not" | "#" | "##" | "*";
	public TerminalRule getUNARY_OPRule() {
		return (tUNARY_OP != null) ? tUNARY_OP : (tUNARY_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNARY_OP"));
	} 

	//ImperativeOCLReservedKeyword:
	//
	//	"default" | "elif" | RESOLVE_KIND | RESOLVE_IN_KIND;
	public ImperativeOCLReservedKeywordElements getImperativeOCLReservedKeywordAccess() {
		return (pImperativeOCLReservedKeyword != null) ? pImperativeOCLReservedKeyword : (pImperativeOCLReservedKeyword = new ImperativeOCLReservedKeywordElements());
	}
	
	public ParserRule getImperativeOCLReservedKeywordRule() {
		return getImperativeOCLReservedKeywordAccess().getRule();
	}

	//ImperativeOCLPrefixOperator:
	//
	//	"#" | "##" | "*";
	public ImperativeOCLPrefixOperatorElements getImperativeOCLPrefixOperatorAccess() {
		return (pImperativeOCLPrefixOperator != null) ? pImperativeOCLPrefixOperator : (pImperativeOCLPrefixOperator = new ImperativeOCLPrefixOperatorElements());
	}
	
	public ParserRule getImperativeOCLPrefixOperatorRule() {
		return getImperativeOCLPrefixOperatorAccess().getRule();
	}

	//ImperativeOCLInfixOperator:
	//
	//	ASSIGN_OP | "default" | "==";
	public ImperativeOCLInfixOperatorElements getImperativeOCLInfixOperatorAccess() {
		return (pImperativeOCLInfixOperator != null) ? pImperativeOCLInfixOperator : (pImperativeOCLInfixOperator = new ImperativeOCLInfixOperatorElements());
	}
	
	public ParserRule getImperativeOCLInfixOperatorRule() {
		return getImperativeOCLInfixOperatorAccess().getRule();
	}

	//ImperativeOCLNavigationOperator:
	//
	//	"!->";
	public ImperativeOCLNavigationOperatorElements getImperativeOCLNavigationOperatorAccess() {
		return (pImperativeOCLNavigationOperator != null) ? pImperativeOCLNavigationOperator : (pImperativeOCLNavigationOperator = new ImperativeOCLNavigationOperatorElements());
	}
	
	public ParserRule getImperativeOCLNavigationOperatorRule() {
		return getImperativeOCLNavigationOperatorAccess().getRule();
	}

	////PrefixOperator:
	// //	EssentialOCLPrefixOperator | QVToPrefixOperator;
	// //
	// //InfixOperator:
	//
	//
	////	EssentialOCLInfixOperator | QVToInfixOperator;
	// //
	// //NavigationOperator:
	//
	//
	////	EssentialOCLNavigationOperator | QVToNavigationOperator;
	// ImperativeOCLExpCS returns essentialocl::ExpCS:
	//
	//	ExpCS;
	public ImperativeOCLExpCSElements getImperativeOCLExpCSAccess() {
		return (pImperativeOCLExpCS != null) ? pImperativeOCLExpCS : (pImperativeOCLExpCS = new ImperativeOCLExpCSElements());
	}
	
	public ParserRule getImperativeOCLExpCSRule() {
		return getImperativeOCLExpCSAccess().getRule();
	}

	//// ********* ImperativeOCL Types *********
	// // TypeLiteralCS redefined to include the new List and Dict types
	//
	//
	//// FIXME refactor its definition in EssentialOCL to allow extension
	// TypeLiteralCS returns base::TypedRefCS:
	//
	//	PrimitiveTypeCS | CollectionTypeCS | TupleTypeCS | ListTypeCS | DictTypeCS;
	public TypeLiteralCSElements getTypeLiteralCSAccess() {
		return (pTypeLiteralCS != null) ? pTypeLiteralCS : (pTypeLiteralCS = new TypeLiteralCSElements());
	}
	
	public ParserRule getTypeLiteralCSRule() {
		return getTypeLiteralCSAccess().getRule();
	}

	//ListTypeCS:
	//
	//	"List" "(" type=TypeExpCS ")";
	public ListTypeCSElements getListTypeCSAccess() {
		return (pListTypeCS != null) ? pListTypeCS : (pListTypeCS = new ListTypeCSElements());
	}
	
	public ParserRule getListTypeCSRule() {
		return getListTypeCSAccess().getRule();
	}

	//DictTypeCS:
	//
	//	"Dict" "(" keyType=TypeExpCS "," valueType=TypeExpCS ")";
	public DictTypeCSElements getDictTypeCSAccess() {
		return (pDictTypeCS != null) ? pDictTypeCS : (pDictTypeCS = new DictTypeCSElements());
	}
	
	public ParserRule getDictTypeCSRule() {
		return getDictTypeCSAccess().getRule();
	}

	//// ********* ImperativeOCL Expressions *********
	//
	//
	//// PrimaryExpCS redefined to include the new List and Dict literal expressions
	//
	//
	//// FIXME refactor its definition in EssentialOCL to allow extension
	// // These rules are ordered most rejectable first
	//
	//
	//PrimaryExpCS returns essentialocl::ExpCS:
	//
	//	NestedExpCS | IfExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | CollectionLiteralExpCS |
	//
	//	ListLiteralExpCS | DictLiteralExpCS | TypeLiteralExpCS | ReturnExpCS | {NameExpCS} pathName=PathNameCS
	//
	//	({IndexExpCS.nameExp=current} "[" firstIndexes+=ExpCS ("," firstIndexes+=ExpCS)* "]" ("[" secondIndexes+=ExpCS (","
	//
	//	secondIndexes+=ExpCS)* "]")? (atPre?="@" "pre")? | {ConstructorExpCS.nameExp=current} "{"
	//
	//	(ownedParts+=ConstructorPartCS ("," ownedParts+=ConstructorPartCS)* | value=StringLiteral) "}" | (atPre?="@" "pre")?
	//
	//	({InvocationExpCS.nameExp=current} "(" (argument+=NavigatingArgCS argument+=NavigatingCommaArgCS*
	//
	//	(argument+=NavigatingSemiArgCS argument+=NavigatingCommaArgCS*)? (argument+=NavigatingBarArgCS
	//
	//	argument+=NavigatingCommaArgCS*)?)? ")")?);
	public PrimaryExpCSElements getPrimaryExpCSAccess() {
		return (pPrimaryExpCS != null) ? pPrimaryExpCS : (pPrimaryExpCS = new PrimaryExpCSElements());
	}
	
	public ParserRule getPrimaryExpCSRule() {
		return getPrimaryExpCSAccess().getRule();
	}

	//ListLiteralExpCS:
	//
	//	"List" "{" {ListLiteralExpCS} (ownedParts+=CollectionLiteralPartCS ("," ownedParts+=CollectionLiteralPartCS)*)? "}";
	public ListLiteralExpCSElements getListLiteralExpCSAccess() {
		return (pListLiteralExpCS != null) ? pListLiteralExpCS : (pListLiteralExpCS = new ListLiteralExpCSElements());
	}
	
	public ParserRule getListLiteralExpCSRule() {
		return getListLiteralExpCSAccess().getRule();
	}

	//DictLiteralExpCS:
	//
	//	"Dict" "{" {DictLiteralExpCS} (ownedParts+=DictLiteralPartCS ("," ownedParts+=DictLiteralPartCS)*)? "}";
	public DictLiteralExpCSElements getDictLiteralExpCSAccess() {
		return (pDictLiteralExpCS != null) ? pDictLiteralExpCS : (pDictLiteralExpCS = new DictLiteralExpCSElements());
	}
	
	public ParserRule getDictLiteralExpCSRule() {
		return getDictLiteralExpCSAccess().getRule();
	}

	//DictLiteralPartCS:
	//
	//	key=PrimitiveLiteralExpCS "=" value=ExpCS;
	public DictLiteralPartCSElements getDictLiteralPartCSAccess() {
		return (pDictLiteralPartCS != null) ? pDictLiteralPartCS : (pDictLiteralPartCS = new DictLiteralPartCSElements());
	}
	
	public ParserRule getDictLiteralPartCSRule() {
		return getDictLiteralPartCSAccess().getRule();
	}

	//ReturnExpCS:
	//
	//	"return" {ReturnExpCS} value=ExpCS?;
	public ReturnExpCSElements getReturnExpCSAccess() {
		return (pReturnExpCS != null) ? pReturnExpCS : (pReturnExpCS = new ReturnExpCSElements());
	}
	
	public ParserRule getReturnExpCSRule() {
		return getReturnExpCSAccess().getRule();
	}

	////generate essentialOCLCST "http://www.eclipse.org/ocl/3.0.0/EssentialOCLCST"
	// Model returns ContextCS:
	//
	//	ownedExpression=ExpCS;
	public EssentialOCLGrammarAccess.ModelElements getModelAccess() {
		return gaEssentialOCL.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//terminal fragment ESCAPED_CHARACTER:
	//
	//	"\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\");
	public TerminalRule getESCAPED_CHARACTERRule() {
		return gaEssentialOCL.getESCAPED_CHARACTERRule();
	} 

	//terminal fragment LETTER_CHARACTER:
	//
	//	"a".."z" | "A".."Z" | "_";
	public TerminalRule getLETTER_CHARACTERRule() {
		return gaEssentialOCL.getLETTER_CHARACTERRule();
	} 

	//terminal DOUBLE_QUOTED_STRING:
	//
	//	"\"" (ESCAPED_CHARACTER | !("\\" | "\""))* "\"";
	public TerminalRule getDOUBLE_QUOTED_STRINGRule() {
		return gaEssentialOCL.getDOUBLE_QUOTED_STRINGRule();
	} 

	//terminal SINGLE_QUOTED_STRING:
	//
	//	"\'" (ESCAPED_CHARACTER | !("\\" | "\'"))* "\'";
	public TerminalRule getSINGLE_QUOTED_STRINGRule() {
		return gaEssentialOCL.getSINGLE_QUOTED_STRINGRule();
	} 

	//terminal ML_SINGLE_QUOTED_STRING:
	//
	//	"/\'"->"\'/";
	public TerminalRule getML_SINGLE_QUOTED_STRINGRule() {
		return gaEssentialOCL.getML_SINGLE_QUOTED_STRINGRule();
	} 

	//terminal SIMPLE_ID:
	//
	//	LETTER_CHARACTER (LETTER_CHARACTER | "0".."9")*;
	public TerminalRule getSIMPLE_IDRule() {
		return gaEssentialOCL.getSIMPLE_IDRule();
	} 

	//terminal ESCAPED_ID:
	//
	//	"_" SINGLE_QUOTED_STRING;
	public TerminalRule getESCAPED_IDRule() {
		return gaEssentialOCL.getESCAPED_IDRule();
	} 

	//ID:
	//
	//	SIMPLE_ID | ESCAPED_ID;
	public EssentialOCLGrammarAccess.IDElements getIDAccess() {
		return gaEssentialOCL.getIDAccess();
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}

	//// String to allow diverse re-use
	// // multiple leading zeroes occur as floating point fractional part
	// terminal INT:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaEssentialOCL.getINTRule();
	} 

	//LOWER returns ecore::EInt:
	//
	//	INT;
	public EssentialOCLGrammarAccess.LOWERElements getLOWERAccess() {
		return gaEssentialOCL.getLOWERAccess();
	}
	
	public ParserRule getLOWERRule() {
		return getLOWERAccess().getRule();
	}

	//UPPER returns ecore::EInt:
	//
	//	INT | "*";
	public EssentialOCLGrammarAccess.UPPERElements getUPPERAccess() {
		return gaEssentialOCL.getUPPERAccess();
	}
	
	public ParserRule getUPPERRule() {
		return getUPPERAccess().getRule();
	}

	//// Not terminal to allow parser backtracking to sort out "5..7"
	//
	//
	//// EssentialOCLTokenSource pieces this together ('.' INT)? (('e' | 'E') ('+' | '-')? INT)?;
	// NUMBER_LITERAL returns
	//
	//BigNumber:
	//
	//	INT;
	public EssentialOCLGrammarAccess.NUMBER_LITERALElements getNUMBER_LITERALAccess() {
		return gaEssentialOCL.getNUMBER_LITERALAccess();
	}
	
	public ParserRule getNUMBER_LITERALRule() {
		return getNUMBER_LITERALAccess().getRule();
	}

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaEssentialOCL.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaEssentialOCL.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaEssentialOCL.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaEssentialOCL.getANY_OTHERRule();
	} 

	//URI:
	//
	//	SINGLE_QUOTED_STRING;
	public EssentialOCLGrammarAccess.URIElements getURIAccess() {
		return gaEssentialOCL.getURIAccess();
	}
	
	public ParserRule getURIRule() {
		return getURIAccess().getRule();
	}

	//EssentialOCLReservedKeyword:
	//
	//	"and" | "else" | "endif" | "if" | "implies" | "in" | "let" | "not" | "or" | "then" | "xor";
	public EssentialOCLGrammarAccess.EssentialOCLReservedKeywordElements getEssentialOCLReservedKeywordAccess() {
		return gaEssentialOCL.getEssentialOCLReservedKeywordAccess();
	}
	
	public ParserRule getEssentialOCLReservedKeywordRule() {
		return getEssentialOCLReservedKeywordAccess().getRule();
	}

	//EssentialOCLUnaryOperatorCS returns UnaryOperatorCS:
	//
	//	name=("-" | "not");
	public EssentialOCLGrammarAccess.EssentialOCLUnaryOperatorCSElements getEssentialOCLUnaryOperatorCSAccess() {
		return gaEssentialOCL.getEssentialOCLUnaryOperatorCSAccess();
	}
	
	public ParserRule getEssentialOCLUnaryOperatorCSRule() {
		return getEssentialOCLUnaryOperatorCSAccess().getRule();
	}

	//EssentialOCLInfixOperatorCS returns BinaryOperatorCS:
	//
	//	name=("*" | "/" | "+" | "-" | ">" | "<" | ">=" | "<=" | "=" | "<>" | "and" | "or" | "xor" | "implies");
	public EssentialOCLGrammarAccess.EssentialOCLInfixOperatorCSElements getEssentialOCLInfixOperatorCSAccess() {
		return gaEssentialOCL.getEssentialOCLInfixOperatorCSAccess();
	}
	
	public ParserRule getEssentialOCLInfixOperatorCSRule() {
		return getEssentialOCLInfixOperatorCSAccess().getRule();
	}

	//EssentialOCLNavigationOperatorCS returns NavigationOperatorCS:
	//
	//	name=("." | "->");
	public EssentialOCLGrammarAccess.EssentialOCLNavigationOperatorCSElements getEssentialOCLNavigationOperatorCSAccess() {
		return gaEssentialOCL.getEssentialOCLNavigationOperatorCSAccess();
	}
	
	public ParserRule getEssentialOCLNavigationOperatorCSRule() {
		return getEssentialOCLNavigationOperatorCSAccess().getRule();
	}

	//Identifier:
	//
	//	ID;
	public EssentialOCLGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaEssentialOCL.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//StringLiteral:
	//
	//	SINGLE_QUOTED_STRING;
	public EssentialOCLGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaEssentialOCL.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//BinaryOperatorCS:
	//
	//	InfixOperatorCS | NavigationOperatorCS;
	public EssentialOCLGrammarAccess.BinaryOperatorCSElements getBinaryOperatorCSAccess() {
		return gaEssentialOCL.getBinaryOperatorCSAccess();
	}
	
	public ParserRule getBinaryOperatorCSRule() {
		return getBinaryOperatorCSAccess().getRule();
	}

	//// Intended to be overrideable
	// InfixOperatorCS returns BinaryOperatorCS:
	//
	//	EssentialOCLInfixOperatorCS;
	public EssentialOCLGrammarAccess.InfixOperatorCSElements getInfixOperatorCSAccess() {
		return gaEssentialOCL.getInfixOperatorCSAccess();
	}
	
	public ParserRule getInfixOperatorCSRule() {
		return getInfixOperatorCSAccess().getRule();
	}

	//// Intended to be overrideable
	// NavigationOperatorCS:
	//
	//	EssentialOCLNavigationOperatorCS;
	public EssentialOCLGrammarAccess.NavigationOperatorCSElements getNavigationOperatorCSAccess() {
		return gaEssentialOCL.getNavigationOperatorCSAccess();
	}
	
	public ParserRule getNavigationOperatorCSRule() {
		return getNavigationOperatorCSAccess().getRule();
	}

	//// Intended to be overrideable
	// UnaryOperatorCS:
	//
	//	EssentialOCLUnaryOperatorCS;
	public EssentialOCLGrammarAccess.UnaryOperatorCSElements getUnaryOperatorCSAccess() {
		return gaEssentialOCL.getUnaryOperatorCSAccess();
	}
	
	public ParserRule getUnaryOperatorCSRule() {
		return getUnaryOperatorCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	// //  Names
	//
	//
	////---------------------------------------------------------------------
	// EssentialOCLUnrestrictedName returns
	//
	//ecore::EString:
	//
	//	Identifier;
	public EssentialOCLGrammarAccess.EssentialOCLUnrestrictedNameElements getEssentialOCLUnrestrictedNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnrestrictedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnrestrictedNameRule() {
		return getEssentialOCLUnrestrictedNameAccess().getRule();
	}

	//// Intended to be overridden
	// UnrestrictedName returns ecore::EString:
	//
	//	EssentialOCLUnrestrictedName;
	public EssentialOCLGrammarAccess.UnrestrictedNameElements getUnrestrictedNameAccess() {
		return gaEssentialOCL.getUnrestrictedNameAccess();
	}
	
	public ParserRule getUnrestrictedNameRule() {
		return getUnrestrictedNameAccess().getRule();
	}

	//EssentialOCLUnreservedName returns ecore::EString:
	//
	//	UnrestrictedName | CollectionTypeIdentifier | PrimitiveTypeIdentifier | "Tuple";
	public EssentialOCLGrammarAccess.EssentialOCLUnreservedNameElements getEssentialOCLUnreservedNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnreservedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnreservedNameRule() {
		return getEssentialOCLUnreservedNameAccess().getRule();
	}

	//// Intended to be overridden
	// UnreservedName returns ecore::EString:
	//
	//	EssentialOCLUnreservedName;
	public EssentialOCLGrammarAccess.UnreservedNameElements getUnreservedNameAccess() {
		return gaEssentialOCL.getUnreservedNameAccess();
	}
	
	public ParserRule getUnreservedNameRule() {
		return getUnreservedNameAccess().getRule();
	}

	//PathNameCS returns base::PathNameCS:
	//
	//	path+=FirstPathElementCS ("::" path+=NextPathElementCS)*;
	public EssentialOCLGrammarAccess.PathNameCSElements getPathNameCSAccess() {
		return gaEssentialOCL.getPathNameCSAccess();
	}
	
	public ParserRule getPathNameCSRule() {
		return getPathNameCSAccess().getRule();
	}

	//FirstPathElementCS returns base::PathElementCS:
	//
	//	element=[pivot::NamedElement|UnrestrictedName];
	public EssentialOCLGrammarAccess.FirstPathElementCSElements getFirstPathElementCSAccess() {
		return gaEssentialOCL.getFirstPathElementCSAccess();
	}
	
	public ParserRule getFirstPathElementCSRule() {
		return getFirstPathElementCSAccess().getRule();
	}

	//NextPathElementCS returns base::PathElementCS:
	//
	//	element=[pivot::NamedElement|UnreservedName];
	public EssentialOCLGrammarAccess.NextPathElementCSElements getNextPathElementCSAccess() {
		return gaEssentialOCL.getNextPathElementCSAccess();
	}
	
	public ParserRule getNextPathElementCSRule() {
		return getNextPathElementCSAccess().getRule();
	}

	//URIPathNameCS returns base::PathNameCS:
	//
	//	path+=URIFirstPathElementCS ("::" path+=NextPathElementCS)*;
	public EssentialOCLGrammarAccess.URIPathNameCSElements getURIPathNameCSAccess() {
		return gaEssentialOCL.getURIPathNameCSAccess();
	}
	
	public ParserRule getURIPathNameCSRule() {
		return getURIPathNameCSAccess().getRule();
	}

	//URIFirstPathElementCS returns base::PathElementCS:
	//
	//	element=[pivot::NamedElement|UnrestrictedName] | {base::PathElementWithURICS} element=[pivot::Namespace|URI];
	public EssentialOCLGrammarAccess.URIFirstPathElementCSElements getURIFirstPathElementCSAccess() {
		return gaEssentialOCL.getURIFirstPathElementCSAccess();
	}
	
	public ParserRule getURIFirstPathElementCSRule() {
		return getURIFirstPathElementCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	// //  Types
	//
	//
	////---------------------------------------------------------------------
	// PrimitiveTypeIdentifier:
	//
	//	"Boolean" | "Integer" | "Real" | "String" | "UnlimitedNatural" | "OclAny" | "OclInvalid" | "OclVoid";
	public EssentialOCLGrammarAccess.PrimitiveTypeIdentifierElements getPrimitiveTypeIdentifierAccess() {
		return gaEssentialOCL.getPrimitiveTypeIdentifierAccess();
	}
	
	public ParserRule getPrimitiveTypeIdentifierRule() {
		return getPrimitiveTypeIdentifierAccess().getRule();
	}

	//PrimitiveTypeCS returns base::PrimitiveTypeRefCS:
	//
	//	name=PrimitiveTypeIdentifier;
	public EssentialOCLGrammarAccess.PrimitiveTypeCSElements getPrimitiveTypeCSAccess() {
		return gaEssentialOCL.getPrimitiveTypeCSAccess();
	}
	
	public ParserRule getPrimitiveTypeCSRule() {
		return getPrimitiveTypeCSAccess().getRule();
	}

	//CollectionTypeIdentifier returns ecore::EString:
	//
	//	"Set" | "Bag" | "Sequence" | "Collection" | "OrderedSet";
	public EssentialOCLGrammarAccess.CollectionTypeIdentifierElements getCollectionTypeIdentifierAccess() {
		return gaEssentialOCL.getCollectionTypeIdentifierAccess();
	}
	
	public ParserRule getCollectionTypeIdentifierRule() {
		return getCollectionTypeIdentifierAccess().getRule();
	}

	//CollectionTypeCS:
	//
	//	name=CollectionTypeIdentifier ("(" ownedType=TypeExpCS ")")?;
	public EssentialOCLGrammarAccess.CollectionTypeCSElements getCollectionTypeCSAccess() {
		return gaEssentialOCL.getCollectionTypeCSAccess();
	}
	
	public ParserRule getCollectionTypeCSRule() {
		return getCollectionTypeCSAccess().getRule();
	}

	//MultiplicityBoundsCS returns base::MultiplicityBoundsCS:
	//
	//	lowerBound=LOWER (".." upperBound=UPPER)?;
	public EssentialOCLGrammarAccess.MultiplicityBoundsCSElements getMultiplicityBoundsCSAccess() {
		return gaEssentialOCL.getMultiplicityBoundsCSAccess();
	}
	
	public ParserRule getMultiplicityBoundsCSRule() {
		return getMultiplicityBoundsCSAccess().getRule();
	}

	//MultiplicityCS returns base::MultiplicityCS:
	//
	//	"[" (MultiplicityBoundsCS | MultiplicityStringCS) "]";
	public EssentialOCLGrammarAccess.MultiplicityCSElements getMultiplicityCSAccess() {
		return gaEssentialOCL.getMultiplicityCSAccess();
	}
	
	public ParserRule getMultiplicityCSRule() {
		return getMultiplicityCSAccess().getRule();
	}

	//MultiplicityStringCS returns base::MultiplicityStringCS:
	//
	//	stringBounds=("*" | "+" | "?");
	public EssentialOCLGrammarAccess.MultiplicityStringCSElements getMultiplicityStringCSAccess() {
		return gaEssentialOCL.getMultiplicityStringCSAccess();
	}
	
	public ParserRule getMultiplicityStringCSRule() {
		return getMultiplicityStringCSAccess().getRule();
	}

	//TupleTypeCS returns base::TupleTypeCS:
	//
	//	name="Tuple" ("(" (ownedParts+=TuplePartCS ("," ownedParts+=TuplePartCS)*)? ")")?;
	public EssentialOCLGrammarAccess.TupleTypeCSElements getTupleTypeCSAccess() {
		return gaEssentialOCL.getTupleTypeCSAccess();
	}
	
	public ParserRule getTupleTypeCSRule() {
		return getTupleTypeCSAccess().getRule();
	}

	//TuplePartCS returns base::TuplePartCS:
	//
	//	name=UnrestrictedName ":" ownedType=TypeExpCS;
	public EssentialOCLGrammarAccess.TuplePartCSElements getTuplePartCSAccess() {
		return gaEssentialOCL.getTuplePartCSAccess();
	}
	
	public ParserRule getTuplePartCSRule() {
		return getTuplePartCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	// //  Literals
	//
	//
	////---------------------------------------------------------------------
	// CollectionLiteralExpCS:
	//
	//	ownedType=CollectionTypeCS "{" (ownedParts+=CollectionLiteralPartCS ("," ownedParts+=CollectionLiteralPartCS)*)? "}";
	public EssentialOCLGrammarAccess.CollectionLiteralExpCSElements getCollectionLiteralExpCSAccess() {
		return gaEssentialOCL.getCollectionLiteralExpCSAccess();
	}
	
	public ParserRule getCollectionLiteralExpCSRule() {
		return getCollectionLiteralExpCSAccess().getRule();
	}

	//CollectionLiteralPartCS:
	//
	//	expressionCS=ExpCS (".." lastExpressionCS=ExpCS)?;
	public EssentialOCLGrammarAccess.CollectionLiteralPartCSElements getCollectionLiteralPartCSAccess() {
		return gaEssentialOCL.getCollectionLiteralPartCSAccess();
	}
	
	public ParserRule getCollectionLiteralPartCSRule() {
		return getCollectionLiteralPartCSAccess().getRule();
	}

	//ConstructorPartCS:
	//
	//	property=[pivot::Property|UnrestrictedName] "=" initExpression=ExpCS;
	public EssentialOCLGrammarAccess.ConstructorPartCSElements getConstructorPartCSAccess() {
		return gaEssentialOCL.getConstructorPartCSAccess();
	}
	
	public ParserRule getConstructorPartCSRule() {
		return getConstructorPartCSAccess().getRule();
	}

	//PrimitiveLiteralExpCS:
	//
	//	NumberLiteralExpCS | StringLiteralExpCS | BooleanLiteralExpCS | UnlimitedNaturalLiteralExpCS | InvalidLiteralExpCS |
	//
	//	NullLiteralExpCS;
	public EssentialOCLGrammarAccess.PrimitiveLiteralExpCSElements getPrimitiveLiteralExpCSAccess() {
		return gaEssentialOCL.getPrimitiveLiteralExpCSAccess();
	}
	
	public ParserRule getPrimitiveLiteralExpCSRule() {
		return getPrimitiveLiteralExpCSAccess().getRule();
	}

	//TupleLiteralExpCS:
	//
	//	"Tuple" "{" ownedParts+=TupleLiteralPartCS ("," ownedParts+=TupleLiteralPartCS)* "}";
	public EssentialOCLGrammarAccess.TupleLiteralExpCSElements getTupleLiteralExpCSAccess() {
		return gaEssentialOCL.getTupleLiteralExpCSAccess();
	}
	
	public ParserRule getTupleLiteralExpCSRule() {
		return getTupleLiteralExpCSAccess().getRule();
	}

	//TupleLiteralPartCS:
	//
	//	name=UnrestrictedName (":" ownedType=TypeExpCS)? "=" initExpression=ExpCS;
	public EssentialOCLGrammarAccess.TupleLiteralPartCSElements getTupleLiteralPartCSAccess() {
		return gaEssentialOCL.getTupleLiteralPartCSAccess();
	}
	
	public ParserRule getTupleLiteralPartCSRule() {
		return getTupleLiteralPartCSAccess().getRule();
	}

	//NumberLiteralExpCS:
	//
	//	name=NUMBER_LITERAL;
	public EssentialOCLGrammarAccess.NumberLiteralExpCSElements getNumberLiteralExpCSAccess() {
		return gaEssentialOCL.getNumberLiteralExpCSAccess();
	}
	
	public ParserRule getNumberLiteralExpCSRule() {
		return getNumberLiteralExpCSAccess().getRule();
	}

	//StringLiteralExpCS:
	//
	//	name+=StringLiteral+;
	public EssentialOCLGrammarAccess.StringLiteralExpCSElements getStringLiteralExpCSAccess() {
		return gaEssentialOCL.getStringLiteralExpCSAccess();
	}
	
	public ParserRule getStringLiteralExpCSRule() {
		return getStringLiteralExpCSAccess().getRule();
	}

	//BooleanLiteralExpCS:
	//
	//	name="true" | name="false";
	public EssentialOCLGrammarAccess.BooleanLiteralExpCSElements getBooleanLiteralExpCSAccess() {
		return gaEssentialOCL.getBooleanLiteralExpCSAccess();
	}
	
	public ParserRule getBooleanLiteralExpCSRule() {
		return getBooleanLiteralExpCSAccess().getRule();
	}

	//UnlimitedNaturalLiteralExpCS:
	//
	//	{UnlimitedNaturalLiteralExpCS} "*";
	public EssentialOCLGrammarAccess.UnlimitedNaturalLiteralExpCSElements getUnlimitedNaturalLiteralExpCSAccess() {
		return gaEssentialOCL.getUnlimitedNaturalLiteralExpCSAccess();
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpCSRule() {
		return getUnlimitedNaturalLiteralExpCSAccess().getRule();
	}

	//InvalidLiteralExpCS:
	//
	//	{InvalidLiteralExpCS} "invalid";
	public EssentialOCLGrammarAccess.InvalidLiteralExpCSElements getInvalidLiteralExpCSAccess() {
		return gaEssentialOCL.getInvalidLiteralExpCSAccess();
	}
	
	public ParserRule getInvalidLiteralExpCSRule() {
		return getInvalidLiteralExpCSAccess().getRule();
	}

	//NullLiteralExpCS:
	//
	//	{NullLiteralExpCS} "null";
	public EssentialOCLGrammarAccess.NullLiteralExpCSElements getNullLiteralExpCSAccess() {
		return gaEssentialOCL.getNullLiteralExpCSAccess();
	}
	
	public ParserRule getNullLiteralExpCSRule() {
		return getNullLiteralExpCSAccess().getRule();
	}

	//TypeLiteralWithMultiplicityCS returns base::TypedRefCS:
	//
	//	TypeLiteralCS multiplicity=MultiplicityCS?;
	public EssentialOCLGrammarAccess.TypeLiteralWithMultiplicityCSElements getTypeLiteralWithMultiplicityCSAccess() {
		return gaEssentialOCL.getTypeLiteralWithMultiplicityCSAccess();
	}
	
	public ParserRule getTypeLiteralWithMultiplicityCSRule() {
		return getTypeLiteralWithMultiplicityCSAccess().getRule();
	}

	//TypeLiteralExpCS:
	//
	//	ownedType=TypeLiteralWithMultiplicityCS;
	public EssentialOCLGrammarAccess.TypeLiteralExpCSElements getTypeLiteralExpCSAccess() {
		return gaEssentialOCL.getTypeLiteralExpCSAccess();
	}
	
	public ParserRule getTypeLiteralExpCSRule() {
		return getTypeLiteralExpCSAccess().getRule();
	}

	//TypeNameExpCS:
	//
	//	pathName=PathNameCS;
	public EssentialOCLGrammarAccess.TypeNameExpCSElements getTypeNameExpCSAccess() {
		return gaEssentialOCL.getTypeNameExpCSAccess();
	}
	
	public ParserRule getTypeNameExpCSRule() {
		return getTypeNameExpCSAccess().getRule();
	}

	//TypeExpCS returns base::TypedRefCS:
	//
	//	(TypeNameExpCS | TypeLiteralCS) multiplicity=MultiplicityCS?;
	public EssentialOCLGrammarAccess.TypeExpCSElements getTypeExpCSAccess() {
		return gaEssentialOCL.getTypeExpCSAccess();
	}
	
	public ParserRule getTypeExpCSRule() {
		return getTypeExpCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	// //  Expressions
	//
	//
	////---------------------------------------------------------------------
	//
	//
	//// An ExpCS permits a LetExpCS only in the final term to ensure
	//
	//
	////  that let is right associative, whereas infix operators are left associative.
	//
	//
	////   a = 64 / 16 / let b : Integer in 8 / let c : Integer in 4 
	// // is
	//
	//
	////   a = (64 / 16) / (let b : Integer in 8 / (let c : Integer in 4 ))
	// ExpCS:
	//
	//	PrefixedExpCS ({InfixExpCS.ownedExpression+=current} ownedOperator+=BinaryOperatorCS (ownedExpression+=PrefixedExpCS
	//
	//	(ownedOperator+=BinaryOperatorCS ownedExpression+=PrefixedExpCS)* (ownedOperator+=BinaryOperatorCS
	//
	//	ownedExpression+=LetExpCS)? | ownedExpression+=LetExpCS))? | {PrefixExpCS} ownedOperator+=UnaryOperatorCS+
	//
	//	ownedExpression=LetExpCS | LetExpCS;
	public EssentialOCLGrammarAccess.ExpCSElements getExpCSAccess() {
		return gaEssentialOCL.getExpCSAccess();
	}
	
	public ParserRule getExpCSRule() {
		return getExpCSAccess().getRule();
	}

	//PrefixedExpCS returns ExpCS:
	//
	//	{PrefixExpCS} ownedOperator+=UnaryOperatorCS+ ownedExpression=PrimaryExpCS | PrimaryExpCS;
	public EssentialOCLGrammarAccess.PrefixedExpCSElements getPrefixedExpCSAccess() {
		return gaEssentialOCL.getPrefixedExpCSAccess();
	}
	
	public ParserRule getPrefixedExpCSRule() {
		return getPrefixedExpCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	// NavigatingArgCS:
	//
	//	name=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" init=ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingArgCSElements getNavigatingArgCSAccess() {
		return gaEssentialOCL.getNavigatingArgCSAccess();
	}
	
	public ParserRule getNavigatingArgCSRule() {
		return getNavigatingArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	// NavigatingBarArgCS returns NavigatingArgCS:
	//
	//	prefix="|" name=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" init=ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingBarArgCSElements getNavigatingBarArgCSAccess() {
		return gaEssentialOCL.getNavigatingBarArgCSAccess();
	}
	
	public ParserRule getNavigatingBarArgCSRule() {
		return getNavigatingBarArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	// NavigatingCommaArgCS returns NavigatingArgCS:
	//
	//	prefix="," name=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" init=ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingCommaArgCSElements getNavigatingCommaArgCSAccess() {
		return gaEssentialOCL.getNavigatingCommaArgCSAccess();
	}
	
	public ParserRule getNavigatingCommaArgCSRule() {
		return getNavigatingCommaArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	// NavigatingSemiArgCS returns NavigatingArgCS:
	//
	//	prefix=";" name=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" init=ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingSemiArgCSElements getNavigatingSemiArgCSAccess() {
		return gaEssentialOCL.getNavigatingSemiArgCSAccess();
	}
	
	public ParserRule getNavigatingSemiArgCSRule() {
		return getNavigatingSemiArgCSAccess().getRule();
	}

	//// Intended to be overridden
	// //	'?'	-- defined by Complete OCL
	// NavigatingArgExpCS returns ExpCS:
	//
	//	ExpCS;
	public EssentialOCLGrammarAccess.NavigatingArgExpCSElements getNavigatingArgExpCSAccess() {
		return gaEssentialOCL.getNavigatingArgExpCSAccess();
	}
	
	public ParserRule getNavigatingArgExpCSRule() {
		return getNavigatingArgExpCSAccess().getRule();
	}

	//IfExpCS:
	//
	//	"if" condition=ExpCS "then" thenExpression=ExpCS "else" elseExpression=ExpCS "endif";
	public EssentialOCLGrammarAccess.IfExpCSElements getIfExpCSAccess() {
		return gaEssentialOCL.getIfExpCSAccess();
	}
	
	public ParserRule getIfExpCSRule() {
		return getIfExpCSAccess().getRule();
	}

	//LetExpCS:
	//
	//	"let" variable+=LetVariableCS ("," variable+=LetVariableCS)* "in" in=ExpCS;
	public EssentialOCLGrammarAccess.LetExpCSElements getLetExpCSAccess() {
		return gaEssentialOCL.getLetExpCSAccess();
	}
	
	public ParserRule getLetExpCSRule() {
		return getLetExpCSAccess().getRule();
	}

	//LetVariableCS:
	//
	//	name=UnrestrictedName (":" ownedType=TypeExpCS)? "=" initExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetVariableCSElements getLetVariableCSAccess() {
		return gaEssentialOCL.getLetVariableCSAccess();
	}
	
	public ParserRule getLetVariableCSRule() {
		return getLetVariableCSAccess().getRule();
	}

	//NestedExpCS:
	//
	//	"(" source=ExpCS ")";
	public EssentialOCLGrammarAccess.NestedExpCSElements getNestedExpCSAccess() {
		return gaEssentialOCL.getNestedExpCSAccess();
	}
	
	public ParserRule getNestedExpCSRule() {
		return getNestedExpCSAccess().getRule();
	}

	//SelfExpCS:
	//
	//	{SelfExpCS} "self";
	public EssentialOCLGrammarAccess.SelfExpCSElements getSelfExpCSAccess() {
		return gaEssentialOCL.getSelfExpCSAccess();
	}
	
	public ParserRule getSelfExpCSRule() {
		return getSelfExpCSAccess().getRule();
	}
}
