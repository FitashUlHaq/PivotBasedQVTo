/**
* <copyright>
*
* Copyright (c) 2007 Borland Software Corporation
* 
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     Borland Software Corporation - initial API and implementation
*
* </copyright>
*
* $Id: QvtOpKWLexerprs.java,v 1.39 2008/02/22 18:15:33 radvorak Exp $
*/
/**
* <copyright>
*
* Copyright (c) 2006, 2007 Borland Inc.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Borland - Initial API and implementation
*
* </copyright>
*
* $Id: QvtOpKWLexerprs.java,v 1.39 2008/02/22 18:15:33 radvorak Exp $
*/

package org.eclipse.m2m.qvt.oml.internal.cst.parser;

public class QvtOpKWLexerprs implements lpg.lpgjavaruntime.ParseTable, QvtOpKWLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            4,4,2,4,4,5,3,2,3,3,
            7,3,2,4,5,3,3,8,10,10,
            7,6,6,8,3,3,7,6,6,13,
            8,7,11,11,9,8,14,12,12,12,
            6,7,16,4,7,5,6,7,7,10,
            4,10,1,3,5,3,6,14,6,7,
            9,9,6,8,6,6,7,5,6,6,
            5,4,3,13,10,8,3,4,4,3,
            6,4,7,10,9,12,10,13,12,15,
            9,4,5,7,9,6,7,8,8,6,
            6,4,4,6,7,8,9,10,13,16
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            1,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,114,53,154,72,122,121,191,53,
            17,196,111,103,198,207,209,213,214,39,
            51,217,124,134,137,84,16,89,34,45,
            70,140,57,100,194,218,220,113,143,222,
            223,227,229,142,149,231,152,221,230,237,
            157,63,235,161,238,236,244,245,246,249,
            40,250,251,252,258,254,262,259,266,265,
            269,271,272,274,275,278,283,281,285,287,
            289,162,166,130,291,79,169,288,298,290,
            98,294,301,302,304,305,306,307,312,313,
            314,316,317,322,323,327,328,329,174,330,
            331,340,332,341,345,347,171,343,348,354,
            351,357,358,78,363,361,366,367,368,359,
            369,375,372,377,378,383,384,388,163,390,
            393,395,385,398,400,401,404,406,408,412,
            414,415,417,416,184,421,391,424,427,430,
            431,434,185,422,437,435,440,426,444,443,
            445,448,446,452,457,459,450,461,454,463,
            467,470,462,472,473,475,476,477,481,485,
            488,489,490,493,498,500,501,491,504,506,
            507,508,510,512,513,514,519,516,522,526,
            528,527,531,532,533,535,536,540,541,547,
            548,550,551,552,554,556,558,559,562,563,
            570,571,575,573,561,576,583,585,577,587,
            588,590,592,591,595,597,596,599,602,600,
            611,603,605,609,617,618,619,627,621,623,
            629,52,630,632,633,636,634,638,640,642,
            644,646,647,651,653,654,655,657,661,662,
            663,674,677,36,670,665,669,678,683,682,
            666,686,687,694,690,696,692,699,697,700,
            703,706,707,710,712,713,714,716,718,723,
            720,725,727,732,728,729,738,739,740,742,
            744,743,748,749,750,753,754,755,758,761,
            763,187,759,110,768,756,767,773,774,781,
            777,182,778,782,784,785,791,786,798,787,
            799,802,803,804,809,805,810,816,814,811,
            821,823,819,829,831,832,835,825,836,838,
            842,845,839,849,851,844,853,854,857,858,
            859,861,139,862,865,866,871,868,874,878,
            880,881,883,886,887,876,888,889,891,893,
            895,896,902,905,910,914,911,915,918,919,
            922,924,189,925,928,929,920,934,938,936,
            940,898,942,941,946,945,950,952,951,955,
            958,959,961,963,964,967,965,969,971,973,
            977,979,554,554
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,0,0,17,18,19,
            20,21,22,8,24,25,26,12,12,29,
            30,31,32,0,34,0,3,37,0,0,
            7,2,4,10,0,12,8,3,4,5,
            0,0,0,1,10,22,0,7,2,3,
            10,5,0,24,2,3,22,5,17,0,
            14,0,3,4,18,4,14,0,0,28,
            0,30,31,0,1,23,35,9,0,6,
            12,8,9,5,17,26,8,0,10,0,
            1,2,0,6,27,8,18,8,6,0,
            0,1,0,36,5,38,19,20,8,9,
            0,0,20,0,25,13,5,7,8,0,
            21,8,9,0,1,2,0,28,0,0,
            11,0,0,14,8,9,7,6,0,7,
            2,0,1,0,13,7,0,6,2,20,
            0,0,0,3,4,0,28,2,0,1,
            0,6,11,0,6,19,3,16,8,17,
            7,0,12,0,0,1,0,4,0,27,
            0,8,39,0,8,0,8,0,14,9,
            19,6,9,17,0,17,0,1,0,12,
            29,3,0,0,1,3,0,0,1,0,
            0,0,0,1,8,4,0,8,0,0,
            0,5,2,13,0,0,0,0,9,11,
            4,4,8,0,0,0,11,4,0,0,
            0,0,8,0,4,7,7,0,0,2,
            15,0,4,2,0,0,15,2,0,1,
            0,0,8,0,0,22,2,0,7,9,
            0,4,0,1,0,5,0,0,0,0,
            0,5,4,0,10,5,23,0,1,6,
            0,0,13,0,0,0,0,4,7,9,
            5,0,0,0,10,0,0,1,31,13,
            7,0,0,12,3,13,0,0,0,0,
            0,0,0,4,4,13,9,6,23,0,
            0,15,0,4,0,1,0,0,20,9,
            0,9,6,0,1,5,0,0,0,12,
            0,4,0,1,4,0,0,0,0,4,
            14,0,6,5,0,1,0,0,7,12,
            4,4,0,0,0,27,4,0,1,0,
            0,2,0,1,0,1,13,0,1,0,
            0,17,12,0,5,0,1,0,8,6,
            3,0,1,0,0,0,0,3,5,3,
            0,0,7,0,1,0,0,7,2,0,
            0,2,2,0,0,2,0,1,4,0,
            1,16,0,0,0,0,4,0,1,0,
            6,0,1,0,33,12,0,1,0,1,
            0,0,0,18,4,3,0,18,15,0,
            4,0,0,4,0,0,0,1,7,18,
            0,6,10,3,0,1,12,0,0,0,
            0,3,0,1,4,8,7,0,1,0,
            0,1,3,0,1,0,0,0,1,0,
            4,0,0,0,9,0,5,5,0,10,
            7,0,7,5,3,0,0,0,3,2,
            0,0,0,7,0,0,5,0,6,0,
            0,1,7,9,14,6,0,0,2,0,
            0,0,1,0,7,0,6,0,0,10,
            0,0,0,10,7,3,6,9,7,0,
            0,2,0,3,0,0,0,22,2,5,
            8,6,0,1,0,1,0,0,1,0,
            0,0,3,2,0,0,0,7,0,0,
            0,0,0,5,0,19,10,6,0,15,
            0,1,10,9,19,16,0,0,0,3,
            0,4,0,15,2,7,0,1,0,0,
            10,0,0,0,2,0,5,0,9,0,
            5,0,5,0,11,0,0,2,2,10,
            0,1,0,0,0,14,0,5,30,6,
            0,0,0,2,0,0,10,24,0,0,
            8,11,7,0,20,2,0,0,2,10,
            16,0,0,15,2,0,0,1,11,0,
            5,0,11,0,1,0,0,2,0,0,
            9,12,0,5,2,0,0,11,3,0,
            11,0,0,0,2,0,10,0,3,0,
            3,10,0,1,0,16,0,0,0,16,
            6,0,5,2,6,16,10,0,0,0,
            1,0,0,0,2,8,5,0,0,0,
            12,8,0,0,0,0,2,0,0,6,
            0,1,0,1,9,7,0,0,16,21,
            13,4,0,0,1,26,0,0,6,32,
            0,0,2,0,0,0,0,3,11,13,
            0,0,2,7,9,29,13,0,0,1,
            3,0,0,0,0,4,25,5,0,0,
            0,3,8,0,5,0,1,4,0,16,
            0,11,0,3,0,3,0,9,0,1,
            0,0,1,3,0,0,1,0,0,15,
            6,0,1,0,0,8,2,9,0,1,
            0,1,0,0,11,3,0,0,0,1,
            0,0,1,3,0,0,2,0,15,4,
            0,1,5,0,18,0,19,0,1,0,
            0,2,0,3,11,0,0,0,0,4,
            0,9,0,1,0,0,21,0,10,9,
            14,0,5,9,0,1,0,6,21,0,
            0,2,17,0,0,2,6,0,0,0,
            6,0,1,0,0,2,2,0,0,10,
            3,14,14,0,1,0,8,0,1,0,
            0,0,3,3,0,0,11,6,3,0,
            0,0,3,2,0,1,12,0,0,1,
            0,11,0,0,0,8,0,7,0,3,
            0,0,0,3,11,3,0,9,0,1,
            4,17,0,21,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            554,140,141,136,135,143,142,128,138,139,
            129,121,116,117,134,554,554,127,122,118,
            119,130,115,178,120,123,137,177,150,133,
            124,126,132,554,131,69,186,125,554,554,
            562,570,162,185,554,184,163,191,190,189,
            554,554,554,149,188,183,554,165,198,200,
            164,197,554,238,228,227,187,226,417,554,
            557,554,193,194,199,144,225,554,554,419,
            554,420,418,554,176,229,421,258,554,175,
            259,173,174,180,298,192,182,13,179,554,
            204,202,554,268,301,266,181,203,155,27,
            554,154,554,299,473,300,265,267,152,153,
            554,554,156,554,201,208,145,146,147,554,
            474,167,168,554,170,169,554,475,554,554,
            256,554,554,255,171,172,195,213,554,627,
            216,554,218,554,214,215,554,219,224,196,
            554,554,554,231,232,554,510,253,554,261,
            554,254,561,554,260,223,626,579,291,314,
            283,554,290,554,554,334,83,327,87,313,
            554,326,553,554,471,554,534,554,555,148,
            482,151,205,470,554,533,554,158,554,157,
            481,159,554,554,161,160,554,554,206,554,
            554,554,554,210,166,209,554,207,554,554,
            554,211,217,220,554,554,554,554,221,212,
            222,233,230,554,554,554,234,235,554,554,
            554,554,236,554,240,237,239,554,554,241,
            571,554,243,566,554,554,634,564,554,245,
            554,554,244,554,554,242,610,554,563,246,
            554,248,554,580,554,249,554,554,554,554,
            554,251,252,554,250,257,247,554,263,269,
            554,554,264,554,554,554,554,272,271,270,
            646,554,554,554,273,554,554,279,262,274,
            277,554,77,275,656,276,554,554,554,554,
            554,554,554,284,285,280,282,286,278,554,
            554,281,554,598,554,288,554,554,636,287,
            554,292,289,554,294,295,554,554,554,293,
            554,297,554,302,303,554,554,554,554,304,
            296,554,305,308,554,633,554,554,309,306,
            605,310,554,554,554,307,311,554,312,554,
            554,315,554,316,554,317,632,554,319,554,
            554,318,329,54,320,554,559,554,321,322,
            323,554,568,554,554,554,554,558,657,324,
            554,554,325,554,330,554,554,328,556,554,
            554,331,332,554,554,333,554,336,337,554,
            338,622,554,554,554,554,340,554,342,554,
            341,554,647,554,335,339,554,609,554,600,
            554,554,554,343,345,347,554,344,346,554,
            348,554,554,349,554,554,554,355,351,350,
            554,354,352,356,554,357,353,554,554,554,
            554,359,554,361,365,358,360,554,362,554,
            554,364,363,554,569,554,554,554,368,554,
            367,554,554,554,366,554,370,371,554,369,
            372,554,374,373,375,554,554,554,376,377,
            554,554,554,378,554,554,379,554,380,554,
            554,384,382,381,560,383,554,554,625,554,
            554,554,388,554,385,554,387,554,554,386,
            554,554,554,389,391,394,398,392,393,554,
            554,395,554,396,554,554,554,390,655,617,
            397,399,554,400,554,401,554,554,620,554,
            554,554,619,583,554,554,554,403,554,554,
            554,554,554,407,554,402,405,408,554,404,
            554,409,410,411,406,601,554,554,554,412,
            554,576,554,595,611,413,554,414,554,554,
            415,554,554,554,635,554,650,554,422,554,
            423,554,577,554,424,554,554,428,613,425,
            554,429,554,554,554,426,554,430,416,431,
            554,554,554,433,554,554,654,427,554,554,
            434,432,596,554,658,435,554,554,436,437,
            438,554,554,621,440,554,554,441,439,554,
            648,554,603,554,586,554,554,443,554,554,
            444,442,554,445,447,554,554,602,599,554,
            446,554,554,554,659,554,448,554,451,554,
            452,449,554,453,554,614,554,554,554,450,
            455,554,651,457,458,454,456,554,554,554,
            575,554,554,554,462,459,565,554,28,554,
            460,461,554,554,554,554,466,554,554,465,
            554,468,554,469,477,472,554,554,630,464,
            467,476,554,554,572,652,554,554,479,463,
            554,554,660,554,554,554,554,485,483,480,
            554,554,653,488,486,478,484,554,554,578,
            487,554,554,554,554,489,590,618,554,554,
            554,490,491,554,616,554,645,615,554,585,
            554,492,554,639,554,493,554,494,554,495,
            554,554,497,496,554,554,500,554,554,499,
            498,554,589,554,554,501,502,503,554,504,
            554,505,554,554,506,507,554,554,554,661,
            554,554,511,629,554,554,512,554,649,513,
            554,662,514,554,508,554,509,554,604,554,
            554,574,554,573,606,554,554,554,554,516,
            554,515,554,522,554,84,518,554,520,521,
            517,554,594,523,554,526,554,525,519,554,
            554,527,524,554,554,528,529,554,554,554,
            530,554,531,554,554,532,535,554,554,537,
            640,588,587,554,538,554,536,554,593,554,
            554,554,539,643,554,554,592,540,541,554,
            554,554,628,543,554,544,542,554,554,546,
            554,584,109,554,88,545,554,547,554,612,
            554,554,554,551,591,644,554,550,554,664,
            597,549,554,548
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 439,
           NT_OFFSET         = 54,
           LA_STATE_OFFSET   = 664,
           MAX_LA            = 1,
           NUM_RULES         = 110,
           NUM_NONTERMINALS  = 3,
           NUM_SYMBOLS       = 57,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 111,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 39,
           EOLT_SYMBOL       = 55,
           ACCEPT_ACTION     = 553,
           ERROR_ACTION      = 554;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
