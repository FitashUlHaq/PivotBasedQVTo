/**
* <copyright>
*
* Copyright (c) 2007 Borland Software Corporation
* 
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     Borland Software Corporation - initial API and implementation
*
* </copyright>
*
* $Id: QvtOpKWLexerprs.java,v 1.35 2008/02/15 15:46:25 sboyko Exp $
*/
/**
* <copyright>
*
* Copyright (c) 2006, 2007 Borland Inc.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Borland - Initial API and implementation
*
* </copyright>
*
* $Id: QvtOpKWLexerprs.java,v 1.35 2008/02/15 15:46:25 sboyko Exp $
*/

package org.eclipse.m2m.qvt.oml.internal.cst.parser;

public class QvtOpKWLexerprs implements lpg.lpgjavaruntime.ParseTable, QvtOpKWLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            4,4,2,4,4,5,3,2,3,3,
            7,3,2,4,5,3,3,8,10,10,
            7,6,6,8,3,3,7,6,6,13,
            8,7,11,11,9,8,14,12,12,12,
            6,7,16,4,7,5,6,7,7,10,
            4,10,1,3,5,3,6,14,6,7,
            9,6,7,5,5,4,3,13,10,8,
            3,4,4,3,6,4,7,10,9,12,
            10,13,12,15,9,4,5,7,9,6,
            7,8,8,6,6,4,4,6,7,8,
            9,10,13,16
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            1,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,108,53,72,102,
            176,113,174,184,99,23,185,192,195,200,
            201,12,32,188,95,115,121,65,124,79,
            34,47,36,125,56,90,178,204,206,62,
            207,208,210,126,211,215,132,214,218,219,
            139,81,224,49,225,220,232,227,222,234,
            142,235,237,238,240,245,246,247,250,253,
            256,254,249,260,261,264,269,265,267,271,
            275,135,143,138,273,152,154,274,281,276,
            104,283,284,285,289,286,295,287,297,298,
            299,303,305,308,310,153,311,313,314,320,
            321,322,326,157,327,333,330,328,336,82,
            338,342,343,344,312,345,348,350,352,353,
            354,356,359,362,161,364,367,369,365,374,
            372,376,378,384,377,386,388,389,390,391,
            166,394,396,397,402,405,409,167,398,412,
            406,401,414,415,417,421,423,425,419,428,
            427,430,434,436,429,439,441,443,445,451,
            455,452,457,450,461,463,465,466,469,470,
            472,474,475,477,479,481,482,483,484,489,
            494,496,495,499,500,501,502,505,503,515,
            509,513,517,518,520,521,524,526,525,528,
            529,532,536,538,543,545,540,548,550,546,
            551,553,554,557,556,560,565,562,569,567,
            571,576,570,581,578,583,558,48,586,589,
            590,591,593,595,597,599,600,601,606,609,
            611,605,614,615,617,616,628,629,620,621,
            625,632,633,637,640,641,648,639,643,650,
            652,653,654,655,660,656,661,662,667,668,
            670,671,677,675,679,681,680,685,688,689,
            686,696,687,699,700,701,702,703,704,706,
            707,710,173,713,60,712,715,714,719,725,
            728,717,171,729,733,734,735,737,736,743,
            741,751,745,747,753,754,758,761,755,764,
            768,769,772,775,779,776,770,782,784,785,
            789,788,792,794,763,797,798,799,801,802,
            804,805,808,810,814,821,806,816,823,826,
            830,811,825,831,834,835,836,837,838,840,
            841,842,849,851,856,859,860,861,862,866,
            868,175,869,873,872,877,879,881,852,883,
            884,885,889,893,888,894,899,895,902,898,
            907,905,909,910,912,911,916,917,919,926,
            931,523,523
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,0,12,13,14,4,16,6,18,19,
            20,21,0,23,24,25,0,5,28,29,
            30,0,32,0,34,0,3,37,3,4,
            9,10,9,10,22,12,0,0,0,3,
            4,3,4,7,21,0,10,2,3,0,
            25,0,7,16,0,1,7,21,13,5,
            6,0,8,18,27,14,29,30,0,20,
            0,0,35,3,6,7,27,7,10,0,
            1,2,0,13,0,6,18,16,0,1,
            6,0,8,0,6,4,8,26,5,6,
            39,31,0,24,0,1,2,36,6,38,
            0,9,19,0,0,0,6,0,8,6,
            5,0,1,9,0,12,5,0,0,14,
            2,0,0,2,2,11,22,5,11,15,
            13,0,0,0,1,3,0,19,5,8,
            0,9,6,12,23,0,0,1,12,4,
            0,6,0,0,0,0,16,0,6,13,
            6,8,7,0,0,8,26,0,16,19,
            16,0,1,6,0,12,12,3,28,0,
            0,1,3,0,1,0,0,0,1,0,
            0,6,2,0,0,9,2,0,0,0,
            11,0,4,0,0,8,0,14,4,6,
            11,0,6,0,0,4,0,0,17,0,
            4,2,9,9,0,0,0,2,0,0,
            4,2,0,0,17,0,1,9,6,0,
            0,8,2,0,0,21,0,4,0,1,
            0,7,0,0,0,0,10,7,4,7,
            0,1,0,0,0,0,0,5,0,14,
            31,8,4,9,0,10,0,0,0,1,
            14,7,0,30,0,3,9,0,12,0,
            0,0,0,0,4,8,4,4,14,0,
            0,0,1,12,5,0,0,0,8,0,
            5,22,0,1,8,0,7,0,1,4,
            13,0,0,0,0,4,4,0,5,0,
            1,0,0,0,7,0,4,4,0,4,
            9,0,1,0,0,2,0,1,0,1,
            26,0,14,0,1,0,0,0,7,3,
            16,6,5,0,1,0,1,0,0,0,
            0,3,3,0,7,0,0,0,2,9,
            0,0,9,2,0,0,2,12,0,4,
            2,0,1,0,0,15,0,4,0,5,
            0,1,0,1,0,1,0,0,0,0,
            33,4,3,0,18,0,18,4,0,4,
            0,0,0,17,0,1,18,5,10,0,
            0,0,12,3,0,1,0,6,9,3,
            0,1,0,1,0,0,1,3,0,0,
            1,0,4,0,0,1,0,4,0,8,
            0,0,0,0,0,7,10,7,0,7,
            9,3,9,0,0,0,3,2,0,0,
            0,0,0,9,0,5,7,5,0,8,
            2,13,0,9,0,1,0,0,1,0,
            0,5,10,0,0,0,2,0,0,10,
            3,0,9,8,6,0,5,0,1,0,
            5,21,0,1,0,0,2,0,1,0,
            0,2,0,0,9,0,0,0,19,0,
            5,0,10,7,0,1,0,17,0,0,
            0,10,19,3,15,0,8,0,9,4,
            0,1,0,17,2,0,29,10,0,0,
            0,2,0,8,0,7,0,7,0,0,
            0,7,2,11,0,0,10,2,0,1,
            0,13,0,0,0,0,0,7,2,0,
            0,6,23,10,0,11,22,0,0,2,
            2,0,0,2,15,11,0,17,0,0,
            0,1,0,11,2,9,7,0,1,0,
            12,0,0,0,0,0,2,8,7,0,
            0,0,3,11,11,10,0,0,2,0,
            0,10,3,3,0,15,0,1,0,0,
            0,2,15,5,0,0,0,0,0,15,
            10,7,5,7,6,0,1,12,0,0,
            0,0,0,0,6,0,0,1,5,0,
            1,0,0,0,0,4,0,15,0,14,
            20,9,8,5,0,1,25,0,0,2,
            14,32,0,0,0,0,0,3,2,11,
            0,28,0,8,0,3,0,14,4,9,
            0,1,0,0,0,3,24,0,1,6,
            0,15,0,0,4,11,3,0,0,0,
            3,0,1,11,0,0,8,3,0,1,
            5,0,1,0,0,1,17,0,0,6,
            2,0,1,0,1,8,0,0,0,3,
            0,0,1,0,0,0,3,0,1,0,
            0,2,7,0,17,0,18,4,8,19,
            0,1,0,1,0,0,11,2,4,0,
            0,27,3,0,0,0,0,0,1,0,
            0,0,0,13,8,10,5,8,0,1,
            0,0,2,20,20,0,16,2,0,0,
            0,0,11,5,5,0,1,0,0,2,
            2,0,0,13,13,3,0,6,0,1,
            0,1,0,0,0,3,10,0,0,5,
            7,3,0,0,0,3,3,0,0,12,
            2,0,1,6,0,11,0,1,0,0,
            0,0,0,9,3,0,0,0,0,3,
            11,3,0,8,0,0,16,0,20,4,
            0,1,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            523,132,133,128,127,134,130,135,131,120,
            121,523,110,126,111,152,119,153,114,112,
            122,109,523,113,115,129,523,145,125,116,
            118,523,124,523,123,523,176,117,183,184,
            155,154,531,175,146,174,523,523,523,181,
            180,217,218,179,173,523,178,188,190,27,
            182,523,187,390,523,166,442,177,526,165,
            163,523,164,189,392,198,393,391,523,443,
            523,523,394,214,172,170,444,213,169,523,
            194,192,523,212,523,193,171,279,523,144,
            157,523,158,13,142,136,143,282,253,252,
            522,215,523,191,523,160,159,280,139,281,
            523,138,251,523,523,523,161,523,162,168,
            201,523,205,185,523,167,206,523,523,202,
            211,523,523,539,239,530,186,240,242,548,
            241,523,523,523,247,589,523,210,246,244,
            523,265,273,245,224,523,523,314,272,308,
            523,307,77,523,81,523,295,523,440,524,
            503,140,137,523,523,195,294,523,439,451,
            502,523,148,156,523,141,147,149,450,523,
            523,151,150,523,196,523,523,523,199,523,
            523,197,203,523,523,590,204,523,523,523,
            200,523,209,523,523,208,523,207,219,216,
            220,523,222,523,523,221,523,523,540,523,
            226,227,223,225,523,523,523,535,523,523,
            229,533,523,523,597,523,231,532,230,523,
            523,232,579,523,523,228,523,234,523,549,
            523,235,523,523,523,523,236,237,238,243,
            523,249,523,523,523,523,523,254,523,250,
            233,255,257,256,523,258,523,523,523,262,
            259,609,523,248,71,619,261,523,260,523,
            523,523,523,523,266,264,267,567,263,523,
            523,523,270,287,268,523,523,523,269,523,
            271,599,523,275,274,523,276,523,283,278,
            277,523,523,523,523,284,285,523,286,523,
            596,523,523,523,289,523,574,291,523,292,
            290,523,293,523,523,296,523,297,523,298,
            288,523,595,523,300,523,523,54,301,304,
            299,302,303,523,528,523,537,523,523,523,
            523,527,305,523,620,523,523,523,525,306,
            523,523,309,311,523,523,312,310,523,317,
            313,523,316,523,523,587,523,318,523,319,
            523,610,523,578,523,569,523,523,523,523,
            315,322,324,523,320,523,321,325,523,326,
            523,523,523,323,523,331,327,330,328,523,
            523,523,329,332,523,333,523,334,336,335,
            523,337,523,338,523,523,340,339,523,523,
            538,523,341,523,523,344,523,343,523,342,
            523,523,523,523,523,346,345,347,523,349,
            348,351,350,523,523,523,352,353,523,523,
            523,523,523,354,523,356,355,359,523,357,
            588,529,523,358,523,360,523,523,363,523,
            523,362,361,523,523,523,368,523,523,364,
            369,523,366,367,370,523,371,523,373,523,
            372,365,523,374,523,523,618,523,585,523,
            523,552,523,523,376,523,523,523,375,523,
            381,523,378,380,523,382,523,377,523,523,
            523,383,379,385,570,523,384,523,386,545,
            523,387,523,564,580,523,389,388,523,523,
            523,598,523,395,523,613,523,396,523,523,
            523,546,401,397,523,523,398,582,523,402,
            523,399,523,523,523,523,523,403,405,523,
            523,406,400,617,523,404,621,523,523,407,
            408,523,523,411,409,410,523,586,523,523,
            523,412,523,572,414,565,611,523,555,523,
            413,523,523,523,523,523,418,415,416,523,
            523,523,568,571,417,419,523,523,622,523,
            523,420,422,423,523,583,523,424,523,523,
            523,428,421,426,523,523,523,523,523,425,
            427,614,429,534,430,523,544,431,523,523,
            28,523,523,523,432,523,523,437,435,523,
            438,523,523,523,523,445,523,593,523,436,
            434,441,446,448,523,541,615,523,523,623,
            449,433,523,523,523,523,523,454,616,452,
            523,447,523,455,523,456,523,453,458,457,
            523,547,523,523,523,459,559,523,608,460,
            523,554,523,523,584,461,602,523,523,523,
            462,523,464,475,523,523,463,465,523,466,
            467,523,469,523,523,558,468,523,523,470,
            471,523,473,523,474,472,523,523,523,476,
            523,523,624,523,523,523,592,523,480,523,
            523,481,483,523,612,523,477,482,484,478,
            523,625,523,573,523,523,575,543,485,523,
            523,479,542,523,523,523,523,523,491,523,
            78,523,523,486,490,489,494,492,523,495,
            523,523,496,487,488,523,493,497,523,523,
            523,523,561,498,499,523,500,523,523,501,
            504,523,523,557,556,603,523,505,523,507,
            523,562,523,523,523,508,506,523,523,509,
            563,606,523,523,523,510,591,523,523,511,
            512,523,513,514,523,553,523,515,103,523,
            82,523,523,516,581,523,523,523,523,520,
            560,607,523,519,523,523,518,523,517,566,
            523,627
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 414,
           NT_OFFSET         = 54,
           LA_STATE_OFFSET   = 627,
           MAX_LA            = 1,
           NUM_RULES         = 104,
           NUM_NONTERMINALS  = 3,
           NUM_SYMBOLS       = 57,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 105,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 39,
           EOLT_SYMBOL       = 55,
           ACCEPT_ACTION     = 522,
           ERROR_ACTION      = 523;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
