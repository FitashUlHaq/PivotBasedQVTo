/**
* <copyright>
*
* Copyright (c) 2007 Borland Software Corporation
* 
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     Borland Software Corporation - initial API and implementation
*
* </copyright>
*
* $Id: QvtOpKWLexerprs.java,v 1.37 2008/02/18 15:33:56 aigdalov Exp $
*/
/**
* <copyright>
*
* Copyright (c) 2006, 2007 Borland Inc.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Borland - Initial API and implementation
*
* </copyright>
*
* $Id: QvtOpKWLexerprs.java,v 1.37 2008/02/18 15:33:56 aigdalov Exp $
*/

package org.eclipse.m2m.qvt.oml.internal.cst.parser;

public class QvtOpKWLexerprs implements lpg.lpgjavaruntime.ParseTable, QvtOpKWLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            4,4,2,4,4,5,3,2,3,3,
            7,3,2,4,5,3,3,8,10,10,
            7,6,6,8,3,3,7,6,6,13,
            8,7,11,11,9,8,14,12,12,12,
            6,7,16,4,7,5,6,7,7,10,
            4,10,1,3,5,3,6,14,6,7,
            9,6,6,7,5,6,5,4,3,13,
            10,8,3,4,4,3,6,4,7,10,
            9,12,10,13,12,15,9,4,5,7,
            9,6,7,8,8,6,6,4,4,6,
            7,8,9,10,13,16
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            1,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,110,53,
            92,181,36,103,183,190,187,39,27,193,
            194,200,201,207,12,115,209,113,126,124,
            66,100,79,34,47,95,110,56,81,202,
            212,210,28,214,217,218,220,129,168,223,
            135,224,226,228,137,62,227,141,230,229,
            238,239,84,236,146,241,243,246,248,251,
            252,253,256,255,259,262,265,264,266,270,
            275,277,269,278,282,138,150,143,280,151,
            161,117,288,281,102,291,283,290,293,299,
            300,301,303,304,302,305,308,312,313,316,
            164,319,320,326,327,328,333,331,159,335,
            329,339,342,343,346,78,347,351,352,353,
            354,345,360,361,364,359,365,370,368,375,
            158,377,382,384,373,386,388,390,392,393,
            318,398,400,401,402,403,173,406,408,378,
            410,413,416,175,391,421,419,425,417,427,
            428,429,434,436,438,430,440,441,442,446,
            449,443,451,452,454,455,456,464,468,465,
            470,472,474,476,478,482,484,485,487,489,
            490,492,494,497,495,498,499,506,508,510,
            513,500,515,518,516,519,524,530,526,532,
            533,534,536,520,537,539,543,547,550,552,
            554,555,556,561,563,564,566,568,570,569,
            573,574,575,578,576,580,586,579,582,588,
            593,540,592,597,599,601,602,61,604,607,
            606,610,611,612,615,616,618,621,624,627,
            629,620,633,634,635,632,644,647,639,640,
            648,650,651,653,656,664,666,658,669,668,
            672,673,674,676,680,681,660,682,686,687,
            690,694,695,689,698,699,705,701,706,710,
            700,713,715,717,718,719,720,721,724,725,
            726,730,180,732,53,733,734,728,741,747,
            742,749,178,752,735,751,754,753,758,765,
            761,770,772,760,774,773,780,778,783,784,
            785,786,789,793,791,797,798,799,801,803,
            806,805,809,811,813,816,817,818,820,821,
            823,825,827,829,833,840,835,832,844,846,
            847,849,851,853,854,856,859,857,860,862,
            463,863,864,870,873,877,878,879,880,884,
            886,182,887,892,890,881,897,899,901,902,
            903,904,908,913,906,914,919,915,922,924,
            927,830,920,925,929,931,933,934,935,939,
            944,533,533
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,0,12,13,14,4,16,6,18,19,
            20,21,22,23,24,25,0,0,28,29,
            30,5,32,0,34,0,3,37,0,1,
            13,8,7,10,6,12,0,9,22,3,
            4,0,0,7,21,0,10,2,3,7,
            0,0,7,2,3,0,1,21,7,14,
            5,6,20,18,9,14,16,0,0,27,
            0,1,2,0,6,7,6,27,10,29,
            30,0,31,16,0,35,18,3,4,0,
            17,0,0,26,24,6,5,6,6,0,
            8,12,0,36,0,38,0,8,6,25,
            19,9,8,0,10,0,1,2,0,6,
            39,22,9,5,0,1,0,0,2,5,
            0,13,0,3,4,0,30,2,11,0,
            0,2,15,11,5,19,14,0,0,9,
            0,1,12,0,6,5,3,0,23,2,
            12,8,0,16,0,1,4,0,6,0,
            0,0,0,26,4,6,0,6,14,0,
            1,9,0,0,1,16,19,16,12,0,
            0,0,3,3,12,28,0,1,0,0,
            9,0,1,0,6,6,0,0,1,0,
            4,8,0,0,2,0,0,0,0,0,
            11,4,6,4,9,0,13,0,0,11,
            0,4,0,8,6,0,4,0,8,2,
            0,0,0,2,0,0,4,2,0,1,
            6,0,17,0,0,0,0,2,0,0,
            9,21,8,4,0,1,0,0,10,0,
            0,0,0,7,7,4,7,0,1,0,
            0,9,0,13,31,5,4,8,0,0,
            0,0,0,0,0,1,7,0,10,8,
            3,0,0,13,12,0,13,0,0,0,
            3,9,4,4,13,0,0,0,0,4,
            0,5,0,1,0,5,9,22,0,1,
            12,0,0,9,0,0,0,1,7,4,
            0,0,0,0,4,4,14,5,0,0,
            0,1,4,0,0,12,7,0,4,0,
            26,8,0,4,0,1,0,0,2,2,
            13,0,1,0,1,0,1,0,16,0,
            0,0,0,1,7,6,5,0,1,0,
            0,0,0,3,3,0,7,0,0,0,
            8,2,0,8,2,0,0,2,0,12,
            0,1,4,33,0,1,0,0,0,0,
            4,15,5,0,1,0,1,0,1,0,
            0,0,0,4,3,0,18,18,0,4,
            0,0,4,0,0,0,1,17,8,5,
            18,10,0,0,0,12,3,0,1,0,
            6,0,3,0,1,0,1,0,16,8,
            3,0,1,0,0,1,0,4,0,0,
            1,0,4,0,0,9,0,0,0,0,
            7,10,8,7,7,0,8,0,3,0,
            3,2,0,14,0,0,0,0,0,0,
            8,7,5,0,9,0,8,2,5,0,
            1,0,0,0,1,0,0,5,0,0,
            21,10,0,4,8,10,0,9,2,0,
            8,0,3,0,0,0,1,6,5,5,
            0,1,0,0,2,0,1,0,0,0,
            3,2,0,0,0,0,8,0,0,0,
            5,0,19,10,7,0,1,0,10,17,
            9,0,0,19,15,3,0,1,0,8,
            0,0,2,0,17,0,0,2,10,0,
            0,0,9,7,0,0,7,0,7,0,
            0,11,2,0,10,2,0,1,0,14,
            29,0,0,0,0,7,2,6,0,0,
            23,22,10,0,11,2,0,0,2,0,
            0,2,0,15,0,0,17,0,11,0,
            8,11,7,0,1,0,1,0,0,12,
            2,0,0,0,15,0,9,2,7,0,
            0,0,3,11,11,0,0,2,0,0,
            10,10,3,0,0,1,3,0,0,0,
            0,15,5,15,0,0,2,7,10,0,
            5,12,0,1,0,6,0,0,0,0,
            0,7,6,0,0,0,1,0,5,0,
            1,0,0,0,0,15,4,13,20,8,
            0,0,9,2,25,5,0,1,0,32,
            0,0,0,0,2,28,3,0,24,0,
            0,13,11,13,0,0,9,3,8,0,
            1,0,0,0,15,4,3,0,6,0,
            1,4,0,0,0,0,3,3,0,1,
            0,1,0,11,9,3,0,0,0,1,
            0,5,0,1,0,0,6,2,0,1,
            0,1,0,9,17,0,0,0,3,0,
            0,1,0,11,0,3,0,1,0,0,
            2,0,0,17,0,18,4,8,19,0,
            1,7,11,0,1,0,0,2,0,3,
            0,27,0,0,4,0,0,9,0,0,
            1,0,0,0,1,9,14,5,10,0,
            9,2,0,20,2,20,0,0,0,0,
            0,5,5,0,1,0,0,2,2,0,
            10,0,14,14,3,6,0,1,0,1,
            0,0,0,0,3,0,0,0,5,7,
            3,11,0,0,0,3,3,12,0,0,
            2,0,1,0,0,11,0,1,0,6,
            0,3,0,0,0,11,3,3,0,20,
            0,9,4,0,1,0,16,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            533,135,136,131,130,137,133,138,123,134,
            124,533,112,113,129,156,122,157,117,114,
            125,111,115,116,118,132,533,533,128,119,
            121,149,127,533,126,533,180,120,533,148,
            202,541,140,179,146,178,533,147,150,185,
            184,533,27,183,177,533,182,192,194,452,
            533,533,191,220,219,533,170,181,218,536,
            169,167,453,193,168,217,400,533,533,454,
            533,198,196,533,176,174,197,402,173,403,
            401,533,221,287,533,404,175,187,188,533,
            550,13,533,290,195,172,259,258,142,533,
            141,171,533,288,533,289,533,189,161,186,
            257,162,159,533,158,533,164,163,533,165,
            532,190,166,206,533,210,533,533,216,211,
            533,207,533,223,224,533,254,549,540,533,
            533,245,558,248,246,215,247,533,533,250,
            533,253,251,533,280,252,601,533,230,208,
            279,272,533,303,533,322,316,533,315,79,
            533,83,533,302,139,450,533,513,534,533,
            144,143,533,533,152,449,461,512,145,533,
            533,533,153,154,151,460,533,155,533,533,
            199,533,200,533,160,201,533,533,204,533,
            203,602,533,533,209,533,533,533,533,533,
            205,214,222,225,213,533,212,533,533,226,
            533,227,533,229,228,533,232,533,231,233,
            533,533,533,545,533,533,235,543,533,237,
            236,533,609,533,533,533,533,589,533,533,
            238,234,542,240,533,559,533,533,242,533,
            533,533,533,241,243,244,249,533,255,533,
            533,261,533,256,239,260,263,262,533,533,
            533,533,533,533,533,269,621,533,264,268,
            631,73,533,265,266,533,267,533,533,533,
            312,271,273,274,270,533,533,533,533,577,
            533,275,533,277,533,278,276,611,533,283,
            282,533,533,281,533,533,533,291,284,286,
            533,533,533,533,292,293,285,294,533,533,
            533,608,584,533,533,295,297,533,299,533,
            296,298,533,300,533,301,533,533,304,535,
            607,533,305,533,306,533,308,533,307,533,
            533,54,533,538,309,310,311,533,547,533,
            533,533,533,537,313,533,632,533,533,533,
            314,319,533,317,320,533,533,321,533,318,
            533,324,325,323,533,326,533,533,533,533,
            327,598,328,533,622,533,588,533,579,533,
            533,533,533,331,333,533,329,330,533,334,
            533,533,335,533,533,533,341,332,337,340,
            336,338,80,533,533,339,342,533,343,533,
            344,533,345,533,347,533,348,533,503,346,
            349,533,350,533,533,548,533,351,533,533,
            354,533,353,533,533,352,533,533,533,533,
            356,355,358,357,359,533,360,533,361,533,
            362,363,533,539,533,533,533,533,533,533,
            364,365,366,533,367,533,368,600,369,533,
            370,533,533,533,373,533,533,372,533,533,
            375,371,533,555,376,374,533,377,378,533,
            599,533,379,533,533,533,383,380,381,382,
            533,384,533,533,630,533,596,533,533,533,
            595,562,533,533,533,533,386,533,533,533,
            391,533,385,388,390,533,392,533,393,387,
            394,533,533,389,580,395,533,397,533,396,
            533,533,590,533,574,533,533,610,398,533,
            533,533,405,625,533,533,406,533,556,533,
            533,407,411,533,408,592,533,412,533,409,
            399,533,533,533,533,413,415,416,533,533,
            410,633,629,533,414,417,533,533,418,533,
            533,421,533,419,533,533,597,533,420,533,
            575,582,623,533,422,533,565,533,533,423,
            424,533,533,533,593,533,425,428,426,533,
            533,533,578,581,427,533,533,634,533,533,
            429,430,432,533,533,434,433,533,533,533,
            533,431,436,435,533,533,438,626,437,533,
            439,441,533,554,533,440,533,533,28,533,
            533,544,442,533,533,533,447,533,445,533,
            448,533,533,533,533,605,455,446,444,451,
            533,533,456,635,627,458,533,551,533,443,
            533,533,533,533,628,457,464,533,569,533,
            533,459,462,463,533,533,465,466,467,533,
            557,533,533,533,564,468,469,533,470,533,
            620,594,533,533,533,533,614,472,533,474,
            533,476,533,471,473,475,533,533,533,479,
            533,477,533,568,533,533,480,481,533,483,
            533,484,533,482,478,533,533,533,486,533,
            533,636,533,485,533,604,533,490,533,533,
            491,533,533,624,533,487,492,526,488,533,
            637,493,585,533,583,533,533,553,533,552,
            533,489,533,533,495,533,533,494,533,533,
            501,533,533,533,505,500,496,504,499,533,
            502,506,533,497,507,498,533,533,533,533,
            533,508,509,533,510,533,533,511,514,533,
            516,533,567,566,615,515,533,517,533,572,
            533,533,533,533,518,533,533,533,519,573,
            618,571,533,533,533,520,603,521,533,105,
            522,533,523,533,533,563,533,525,533,524,
            84,591,533,533,533,570,530,619,533,527,
            533,529,576,533,639,533,528
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 422,
           NT_OFFSET         = 54,
           LA_STATE_OFFSET   = 639,
           MAX_LA            = 1,
           NUM_RULES         = 106,
           NUM_NONTERMINALS  = 3,
           NUM_SYMBOLS       = 57,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 107,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 39,
           EOLT_SYMBOL       = 55,
           ACCEPT_ACTION     = 532,
           ERROR_ACTION      = 533;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
