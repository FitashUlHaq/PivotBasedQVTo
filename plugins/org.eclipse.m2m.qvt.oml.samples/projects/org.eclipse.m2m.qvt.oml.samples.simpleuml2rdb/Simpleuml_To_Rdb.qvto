/*
 * The SimpleUML to RDB Sample demonstrates how to use QVT transformations for 
 * transforming platform independent model to platform specific model. 
 * 
 * It also demonstrates the following basic features of QVT language: 
 * helper queries, mapping guards, and resolution operations.
 * 
 * Sample model pim.simpleuml is included to be used as an input for the transformation.
 */

modeltype UML uses 'http://www.eclipse.org/qvt/1.0.0/Operational/examples/simpleuml';
modeltype RDB uses 'http://www.eclipse.org/qvt/1.0.0/Operational/examples/rdb';
 
transformation Simpleuml_To_Rdb(in uml : UML, out RDB);


main() {
	uml.rootObjects()[UML::Model]->map model2RDBModel();
}

mapping UML::Model::model2RDBModel() : RDB::Model {
	name := self.name;
	schemas := self.map package2schemas()->asOrderedSet();
}

mapping UML::Package::package2schemas() : Sequence(RDB::Schema) {
	init {
		result := self.map package2schema()->asSequence()->
			union(self.getSubpackages()->map package2schemas()->flatten());
	}
}

mapping UML::Package::package2schema() : RDB::Schema 
	when { self.hasPersistentClasses() }
{
	name := self.name;
	elements := self.ownedElements[UML::Class]->map persistentClass2table()->asOrderedSet()
}

mapping UML::Class::persistentClass2table() : RDB::Table 
	when { self.isPersistent() }
{
	name := self.name;
	columns := self.map class2columns(self)->sortedBy(name);
	primaryKey := self.map class2primaryKey();
	foreignKeys := self.attributes.resolveIn(
					UML::Property::relationshipAttribute2foreignKey, 
					RDB::constraints::ForeignKey)->asOrderedSet();
}

mapping UML::Class::class2primaryKey() : RDB::constraints::PrimaryKey {
	name := 'PK' + self.name;
	includedColumns := self.resolveoneIn(UML::Class::persistentClass2table, RDB::Table).getPrimaryKeyColumns()
}

mapping UML::Class::class2columns(targetClass: UML::Class) : OrderedSet(RDB::TableColumn) {
	init {
		result := self.map dataType2columns(targetClass)->
			union(self.map generalizations2columns(targetClass))->asOrderedSet()
	}	
}

mapping UML::DataType::dataType2columns(in targetType : UML::DataType) : OrderedSet(RDB::TableColumn) {
	init {
		result := self.map primitiveAttributes2columns(targetType)->
			union(self.map enumerationAttributes2columns(targetType))->
			union(self.map relationshipAttributes2columns(targetType))->
			union(self.map assosiationAttributes2columns(targetType))->asOrderedSet()
	}
}

mapping UML::DataType::dataType2primaryKeyColumns(in prefix : String, in leaveIsPrimaryKey : Boolean, in targetType : UML::DataType) : OrderedSet(RDB::TableColumn) {
	init {           
		result := self.map dataType2columns(self)->select(isPrimaryKey)->
			collect(c | object RDB::TableColumn {
				name := prefix + '_' + c.name;
				domain := c.domain;
				type := object RDB::datatypes::PrimitiveDataType {
					name := c.type.name;
				};
				isPrimaryKey := leaveIsPrimaryKey
			})->asOrderedSet();
	}
}

mapping UML::DataType::primitiveAttributes2columns(in targetType: UML::DataType) : OrderedSet(RDB::TableColumn) {
	init {
		result := self.attributes->map primitiveAttribute2column(targetType)->asOrderedSet()
	}
}

mapping UML::Property::primitiveAttribute2column(in targetType: UML::DataType) : RDB::TableColumn 
	when { self.isPrimitive() }
{
	isPrimaryKey := self.isPrimaryKey();
	name := self.name;
	type := object RDB::datatypes::PrimitiveDataType { name := umlPrimitive2rdbPrimitive(self.type.name); };
}

mapping UML::DataType::enumerationAttributes2columns(in targetType: UML::DataType) : OrderedSet(RDB::TableColumn) {
	init {
		result := self.attributes->map enumerationAttribute2column(targetType)->asOrderedSet()
	}
}

mapping UML::Property::enumerationAttribute2column(in targetType: UML::DataType) : RDB::TableColumn 
	when { self.isEnumeration() }
{
	isPrimaryKey := self.isPrimaryKey();	
	name := self.name;
	type := object RDB::datatypes::PrimitiveDataType { name := 'int'; };
}

mapping UML::DataType::relationshipAttributes2columns(in targetType: UML::DataType) : OrderedSet(RDB::TableColumn) {
	init {
		result := self.attributes->map relationshipAttribute2foreignKey(targetType)->
			collect(includedColumns)->asOrderedSet();
	}
}

mapping UML::Property::relationshipAttribute2foreignKey(in targetType: UML::DataType) : RDB::constraints::ForeignKey 
	when { self.isRelationship() }
{
	name := 'FK' + self.name;
	includedColumns := self.type.asDataType().map dataType2primaryKeyColumns(self.name, self.isIdentifying(), targetType);
	referredUC := self.type.late resolveoneIn(UML::Class::class2primaryKey, RDB::constraints::PrimaryKey);
}

mapping UML::DataType::assosiationAttributes2columns(targetType : UML::DataType) : OrderedSet(RDB::TableColumn) {
	init {
		result := self.attributes[isAssosiation()]->
			collect(type.asDataType()->map dataType2columns(targetType))->asOrderedSet()
	}
}

mapping UML::Class::generalizations2columns(targetClass : UML::Class) : OrderedSet(RDB::TableColumn) {
	init {
		result := self.generalizations.general->map class2columns(targetClass)->flatten()->asOrderedSet();
	}
}


query UML::Package::getSubpackages() : OrderedSet(UML::Package) {
	return self.ownedElements[UML::Package]->asOrderedSet()
}

query UML::Type::asDataType() : UML::DataType {
	return self.oclAsType(UML::DataType)
}

query UML::Property::isPrimaryKey() : Boolean {
	return self.stereotype->includes('primaryKey')
}

query UML::Property::isIdentifying() : Boolean {
	return self.stereotype->includes('identifying')
}

query UML::Property::isPrimitive() : Boolean {
	return self.type.oclIsKindOf(UML::PrimitiveType)
}

query UML::Property::isEnumeration() : Boolean {
	return self.type.oclIsKindOf(UML::Enumeration)
}

query UML::Property::isRelationship() : Boolean {
	return self.type.oclIsKindOf(UML::DataType) and self.type.isPersistent()
}

query UML::Property::isAssosiation() : Boolean {
	return self.type.oclIsKindOf(UML::DataType) and not self.type.isPersistent()
}

query RDB::Table::getPrimaryKeyColumns() : OrderedSet(RDB::TableColumn) {
	return self.columns->select(isPrimaryKey)
}

query UML::ModelElement::isPersistent() : Boolean {
	return self.stereotype->includes('persistent')
}

query UML::Package::hasPersistentClasses() : Boolean {
	return self.ownedElements->exists(
		let c : UML::Class = oclAsType(UML::Class) in 
			c.oclIsUndefined() implies c.isPersistent())
}

helper umlPrimitive2rdbPrimitive(in name : String) : String {
	return if name = 'String' then 'varchar' else
		if name = 'Boolean' then 'int' else
			if name = 'Integer' then 'int' else
				name
			endif
		endif
	endif
}
