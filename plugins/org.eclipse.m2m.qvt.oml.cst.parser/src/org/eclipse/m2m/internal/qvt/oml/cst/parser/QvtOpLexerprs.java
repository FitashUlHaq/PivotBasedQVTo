/**
* <copyright>
*
* Copyright (c) 2005, 2007 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
*
* </copyright>
*
* $Id: QvtOpLexerprs.java,v 1.56 2009/02/04 15:33:23 sboyko Exp $
*/
/**
* <copyright>
*
* Copyright (c) 2006-2008 Borland Inc.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Borland - Initial API and implementation
*
* </copyright>
*
* $Id: QvtOpLexerprs.java,v 1.56 2009/02/04 15:33:23 sboyko Exp $
*/

package org.eclipse.m2m.internal.qvt.oml.cst.parser;

public class QvtOpLexerprs implements lpg.lpgjavaruntime.ParseTable, QvtOpLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,1,3,3,3,1,1,1,1,1,
            5,1,1,1,1,1,1,1,1,1,
            1,2,2,2,1,1,1,1,2,1,
            1,1,2,1,1,2,4,1,2,1,
            1,1,2,2,3,2,2,0,1,2,
            2,2,1,2,1,2,3,2,3,3,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,2,3,1,1,1,1,
            1,2,1,2,2,2,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,2,2,1,2,
            1,2,0,1,3,3,3,3,3,3,
            4,4,3,3,2,2,1,1,2,2,
            2,3,1,3,1,1,1,1,1,1,
            3,0,1
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,21,22,22,22,26,26,26,26,27,
            27,25,25,6,6,35,35,29,13,13,
            13,9,9,9,9,9,2,2,2,2,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,1,1,1,1,1,1,1,1,
            1,1,37,37,37,37,37,37,37,37,
            38,38,38,38,38,38,38,38,38,38,
            38,38,36,36,39,39,39,15,15,40,
            40,28,28,11,11,11,11,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,16,16,16,
            16,16,16,16,16,16,16,16,16,16,
            16,16,16,16,16,16,16,16,16,16,
            16,16,16,16,16,16,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,7,7,7,7,7,
            7,7,7,7,7,7,7,7,7,7,
            7,7,7,7,7,7,7,7,7,7,
            7,7,7,7,7,14,14,14,14,30,
            30,30,30,30,30,30,30,18,18,18,
            18,18,8,8,8,8,8,5,19,32,
            32,10,10,12,12,23,23,23,23,23,
            23,23,23,23,24,20,20,20,20,20,
            20,20,20,20,20,8,8,8,18,18,
            18,20,33,33,907,514,513,513,513,2,
            508,1293,54,515,1326,494,983,707,516,516,
            516,516,383,162,356,6,7,8,9,489,
            1304,54,354,400,516,516,516,407,463,463,
            463,463,463,1347,463,463,1005,463,417,434,
            479,203,517,517,517,517,517,1006,517,517,
            1352,454,1084,487,203,517,517,517,517,517,
            1344,517,517,43,454,422,505,1,47,47,
            47,47,1260,351,1271,446,47,1343,351,1345,
            446,47,1348,47,807,310,310,310,310,1009,
            370,499,499,499,472,370,1315,54,1332,54,
            499,310,310,310,507,312,312,312,312,312,
            1086,312,312,607,312,312,312,312,312,1346,
            312,312,102,45,45,45,45,1282,448,1087,
            1159,45,1239,448,1161,1350,45,1004,45,303,
            52,52,52,52,1089,165,164,164,164,1166,
            165,164,164,164,1327,1157,1328,1357,1243,54,
            1366,1367,1330,1349,1351,1353,1160,1368,526,52,
            52,44,526,422,526,526
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,98,99,
            100,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,66,67,68,
            69,70,71,72,73,74,75,76,77,78,
            79,80,81,82,83,84,85,86,87,88,
            89,90,91,92,93,94,95,96,97,98,
            99,100,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            98,99,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,0,0,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            98,99,100,0,0,103,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,98,99,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,98,99,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,98,99,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,0,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,98,99,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,0,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,98,99,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,0,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,0,0,0,0,100,101,0,1,
            2,3,4,5,6,7,8,9,10,14,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,0,69,70,71,
            72,77,0,0,102,0,0,79,0,1,
            2,3,4,5,6,7,8,9,10,16,
            12,13,14,15,101,0,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,0,72,0,0,
            0,75,0,0,76,0,1,2,3,4,
            5,6,7,8,9,10,16,12,13,14,
            15,0,0,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            65,66,67,75,75,0,0,0,0,0,
            0,76,0,1,2,3,4,5,6,7,
            8,9,10,15,12,13,0,101,16,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,0,0,69,0,
            71,0,1,2,3,4,5,6,7,8,
            9,10,0,0,0,0,0,0,0,0,
            0,0,0,11,11,11,0,11,11,17,
            11,17,17,12,13,0,0,0,12,0,
            0,0,0,0,0,0,11,11,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,68,68,0,68,73,74,
            0,0,0,0,0,80,81,0,0,0,
            0,0,70,0,69,0,0,0,0,0,
            0,78,0,0,0,100,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            102,0,102,0,102,0,0,0,0,0,
            0,0,0,0,0,0,0,0,101,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            526,573,573,573,573,573,573,573,573,573,
            573,573,573,573,573,573,573,573,573,573,
            573,573,573,573,573,573,573,573,573,573,
            573,573,573,573,573,573,573,573,573,573,
            573,573,573,573,573,573,573,573,573,573,
            573,573,573,573,573,573,573,573,573,573,
            573,573,573,573,573,573,573,573,573,573,
            573,573,472,573,573,573,573,573,573,572,
            573,573,573,573,573,573,573,573,573,573,
            573,573,573,573,573,573,573,573,573,573,
            573,526,571,571,571,571,571,571,571,571,
            571,571,571,571,571,571,571,571,571,571,
            571,571,571,571,571,571,571,571,571,571,
            571,571,571,571,571,571,571,571,571,571,
            571,571,571,571,571,571,571,571,571,571,
            571,571,571,571,571,571,571,571,571,571,
            571,571,571,571,571,571,571,571,571,571,
            571,571,571,576,571,571,571,571,571,571,
            537,571,571,571,571,571,571,571,571,571,
            571,571,571,571,571,571,571,571,571,571,
            571,571,313,517,517,517,517,517,517,517,
            517,517,517,517,517,517,517,517,517,517,
            517,517,517,517,517,517,517,517,517,517,
            517,517,517,517,517,517,517,517,517,517,
            517,517,517,517,517,517,517,517,517,517,
            517,517,517,517,517,517,517,517,517,517,
            517,517,517,517,517,517,517,517,517,517,
            504,517,517,517,517,517,517,517,517,517,
            517,517,517,517,517,517,517,517,517,517,
            517,517,517,517,517,517,517,517,517,517,
            517,517,10,578,578,578,578,578,578,578,
            578,578,578,578,578,578,578,578,578,578,
            578,578,578,578,578,578,578,578,578,578,
            578,578,578,578,578,578,578,578,578,578,
            578,578,578,578,578,578,578,578,578,578,
            578,578,578,578,578,578,578,578,578,578,
            578,578,578,578,578,578,578,578,578,578,
            578,578,578,578,578,578,578,578,578,578,
            578,578,48,526,578,578,578,578,578,578,
            578,578,578,578,578,578,578,578,578,578,
            578,578,578,526,526,578,526,463,463,463,
            463,463,463,463,463,463,463,463,463,463,
            463,463,463,463,463,463,463,463,463,463,
            463,463,463,463,463,463,463,463,463,463,
            463,463,463,463,463,463,463,463,463,463,
            463,463,463,463,463,463,463,463,463,463,
            463,463,463,463,463,463,463,463,463,463,
            463,463,463,463,506,463,463,463,463,463,
            463,463,463,463,463,463,463,463,463,463,
            463,463,463,463,463,463,463,463,463,463,
            463,463,463,463,463,463,314,838,838,838,
            838,838,838,838,838,838,838,838,838,838,
            838,838,838,838,838,838,838,838,838,838,
            838,838,838,838,838,838,838,838,838,838,
            838,838,838,838,838,838,838,838,838,838,
            838,838,838,838,838,838,838,838,838,838,
            838,838,838,838,838,838,838,838,838,838,
            838,838,838,838,504,838,838,838,838,838,
            838,838,838,838,838,838,838,838,838,838,
            838,838,838,838,838,838,838,838,838,838,
            838,838,838,838,838,838,526,838,838,838,
            838,838,838,838,838,838,838,838,838,838,
            838,838,838,838,838,838,838,838,838,838,
            838,838,838,838,838,838,838,838,838,838,
            838,838,838,838,838,838,838,838,838,838,
            838,838,838,838,838,838,838,838,838,838,
            838,838,838,838,838,838,838,838,838,838,
            838,838,838,838,512,838,838,838,838,838,
            838,838,838,838,838,838,838,838,838,838,
            838,838,838,838,838,838,838,838,838,838,
            838,838,838,838,838,838,342,516,516,516,
            516,516,516,516,516,516,516,516,516,516,
            516,516,516,516,516,516,516,516,516,516,
            516,516,516,516,516,516,516,516,516,516,
            516,516,516,516,516,516,516,516,516,516,
            516,516,516,516,516,516,516,516,516,516,
            516,516,516,516,516,516,516,516,516,516,
            516,516,516,516,516,516,516,516,516,516,
            516,526,516,516,516,516,516,516,516,516,
            516,516,516,516,516,516,516,516,516,516,
            516,516,516,516,516,480,343,836,836,836,
            836,836,836,836,836,836,836,836,836,836,
            836,836,836,836,836,836,836,836,836,836,
            836,836,836,836,836,836,836,836,836,836,
            836,836,836,836,836,836,836,836,836,836,
            836,836,836,836,836,836,836,836,836,836,
            836,836,836,836,836,836,836,836,836,836,
            836,836,836,836,836,836,836,836,836,836,
            836,526,836,836,836,836,836,836,836,836,
            836,836,836,836,836,836,836,836,836,836,
            836,836,836,836,836,480,526,514,514,514,
            514,514,514,514,514,514,514,547,513,513,
            513,513,402,429,513,513,513,513,513,513,
            513,513,513,513,513,513,513,513,513,513,
            513,513,513,513,513,513,513,513,513,513,
            513,513,513,513,513,513,513,513,513,513,
            513,513,513,513,513,513,513,513,513,513,
            513,513,513,513,377,469,427,432,541,515,
            515,357,526,386,410,460,515,515,556,383,
            397,391,859,560,553,554,551,552,566,557,
            543,544,526,526,38,327,515,404,526,370,
            370,370,370,370,370,370,370,370,370,482,
            499,499,499,499,850,510,499,499,499,499,
            499,499,499,499,499,499,499,499,499,499,
            499,499,499,499,499,499,499,499,499,499,
            499,499,499,499,499,499,499,499,499,499,
            499,499,499,499,499,499,499,499,499,499,
            499,499,499,499,499,499,526,843,511,842,
            844,565,526,35,525,16,526,845,1,691,
            691,691,691,691,691,691,691,691,691,484,
            690,690,690,690,531,526,690,690,690,690,
            690,690,690,690,690,690,690,690,690,690,
            690,690,690,690,690,690,690,690,690,690,
            690,690,690,690,690,690,690,690,690,690,
            690,690,690,690,690,690,690,690,690,690,
            690,690,690,690,690,690,526,362,526,309,
            36,867,526,526,692,315,691,691,691,691,
            691,691,691,691,691,691,858,690,690,690,
            690,526,526,690,690,690,690,690,690,690,
            690,690,690,690,690,690,690,690,690,690,
            690,690,690,690,690,690,690,690,690,690,
            690,690,690,690,690,690,690,690,690,690,
            690,690,690,690,690,690,690,690,690,690,
            690,690,690,834,343,526,526,526,526,526,
            526,692,6,580,580,580,580,580,580,580,
            580,580,580,507,422,422,526,530,439,526,
            351,351,351,351,351,351,351,351,351,351,
            526,446,446,446,446,446,446,446,446,446,
            446,526,448,448,448,448,448,448,448,448,
            448,448,58,580,580,580,580,580,580,580,
            580,580,580,57,580,580,580,580,580,580,
            580,580,580,580,60,580,580,580,580,580,
            580,580,580,580,580,12,526,307,477,3,
            424,59,580,580,580,580,580,580,580,580,
            580,580,20,32,19,14,328,13,163,33,
            53,7,161,549,851,548,526,855,852,550,
            860,857,555,422,422,323,320,311,563,526,
            526,526,526,526,526,526,848,847,526,526,
            526,526,526,526,526,526,526,526,526,526,
            526,526,526,526,833,833,526,833,688,688,
            526,526,526,526,526,688,688,526,526,526,
            526,526,856,526,577,526,526,526,526,526,
            526,485,526,526,526,688,526,526,526,526,
            526,526,526,526,526,526,526,526,526,526,
            526,526,526,526,526,526,526,526,526,526,
            1,526,6,526,12,526,526,526,526,526,
            526,526,526,526,526,526,526,526,314
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 54,
           NT_OFFSET         = 103,
           LA_STATE_OFFSET   = 869,
           MAX_LA            = 1,
           NUM_RULES         = 343,
           NUM_NONTERMINALS  = 40,
           NUM_SYMBOLS       = 143,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 344,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 102,
           EOLT_SYMBOL       = 104,
           ACCEPT_ACTION     = 525,
           ERROR_ACTION      = 526;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
