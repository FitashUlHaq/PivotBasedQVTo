/**
* <copyright>
*
* Copyright (c) 2005, 2007 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
*
* </copyright>
*
* $Id: QvtOpLexerprs.java,v 1.64 2009/02/27 12:16:46 aigdalov Exp $
*/
/**
* <copyright>
*
* Copyright (c) 2006-2008 Borland Inc.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Borland - Initial API and implementation
*
* </copyright>
*
* $Id: QvtOpLexerprs.java,v 1.64 2009/02/27 12:16:46 aigdalov Exp $
*/

package org.eclipse.m2m.internal.qvt.oml.cst.parser;

public class QvtOpLexerprs implements lpg.lpgjavaruntime.ParseTable, QvtOpLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,1,3,3,3,1,1,1,1,1,
            5,1,1,1,1,1,1,1,1,1,
            1,2,2,2,1,1,1,1,2,1,
            1,1,2,1,1,2,4,1,2,1,
            1,1,2,2,3,2,2,0,1,2,
            2,2,1,2,1,2,3,2,3,3,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,2,3,1,1,1,1,
            1,2,1,2,2,2,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,2,1,2,
            1,2,0,1,3,3,3,3,3,3,
            4,4,3,3,2,2,1,1,2,2,
            2,3,1,3,1,1,1,1,1,1,
            1,3,0,1
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,22,23,23,23,27,27,27,27,28,
            28,26,26,7,7,38,38,30,14,14,
            14,10,10,10,10,10,2,2,2,2,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,1,1,1,1,1,1,1,1,
            1,1,40,40,40,40,40,40,40,40,
            41,41,41,41,41,41,41,41,41,41,
            41,41,39,39,42,42,42,16,16,43,
            43,29,29,12,12,12,12,32,32,32,
            32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,18,18,8,8,33,33,
            33,33,6,15,15,15,15,31,31,31,
            31,31,31,31,31,34,34,34,34,19,
            19,19,19,9,9,9,9,9,21,35,
            35,11,11,13,13,24,24,24,24,24,
            24,24,24,24,25,20,20,20,20,20,
            20,20,20,20,20,9,9,9,19,19,
            19,19,20,36,36,905,509,495,495,495,
            1382,54,442,1393,54,510,1343,497,507,511,
            511,511,511,511,511,336,2,6,7,8,
            9,436,1404,54,372,455,511,511,607,512,
            512,512,512,512,512,1438,512,512,1179,408,
            1181,489,1415,401,447,607,512,512,512,512,
            512,512,162,512,512,1084,408,1432,490,307,
            421,421,421,421,421,421,1431,421,421,1433,
            421,706,290,290,290,290,290,290,806,292,
            292,292,292,292,292,1440,292,292,296,290,
            290,407,292,292,292,292,292,292,1255,292,
            292,1,47,47,47,47,203,52,52,52,
            52,47,1332,54,1418,431,47,1252,47,1007,
            262,262,262,262,262,1434,44,1254,465,460,
            102,45,45,45,45,1349,330,52,52,43,
            45,465,330,1360,352,45,1436,45,1420,54,
            352,1453,262,262,1107,333,502,502,502,1000,
            1416,333,1454,1456,1457,1437,502,1184,165,164,
            164,164,1258,165,164,164,164,1371,478,1439,
            1441,1455,1458,517,478,517,517
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,98,99,
            100,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,66,67,68,
            69,70,71,72,73,74,75,76,77,78,
            79,80,81,82,83,84,85,86,87,88,
            89,90,91,92,93,94,95,96,97,98,
            99,100,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,0,0,95,96,97,
            98,99,100,0,0,103,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,98,99,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,98,99,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,0,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,98,99,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,98,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            65,66,67,68,69,70,71,72,73,74,
            75,76,77,0,79,80,81,82,83,84,
            85,86,87,88,89,90,91,92,93,94,
            95,96,97,98,99,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            65,66,67,68,69,70,71,72,73,74,
            75,76,77,78,79,80,81,82,83,84,
            85,86,87,88,89,90,91,92,93,94,
            95,96,97,98,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,0,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,0,
            0,0,0,99,100,101,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,0,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,16,
            101,95,96,97,98,99,0,1,2,3,
            4,5,6,7,8,9,10,0,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,0,0,
            0,0,76,0,1,2,3,4,5,6,
            7,8,9,10,14,12,13,14,15,0,
            0,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,61,62,63,64,65,66,
            67,0,74,0,0,0,73,0,1,2,
            3,4,5,6,7,8,9,10,15,12,
            13,14,15,0,0,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,71,0,0,0,78,
            73,0,1,2,3,4,5,6,7,8,
            9,10,0,12,13,0,0,16,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,0,68,0,70,0,
            1,2,3,4,5,6,7,8,9,10,
            0,0,0,0,17,0,0,0,0,0,
            0,11,11,11,102,12,13,17,11,17,
            11,16,0,0,0,0,0,0,0,0,
            0,0,0,11,0,12,11,11,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,68,72,0,0,0,
            0,77,0,0,0,0,0,0,0,69,
            0,0,0,0,0,0,75,93,94,0,
            0,0,0,0,100,0,101,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,78,0,0,0,0,0,102,0,
            102,0,102,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,101,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            517,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,460,564,564,564,564,563,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,517,562,562,562,562,562,562,562,562,
            562,562,562,562,562,562,562,562,562,562,
            562,562,562,562,562,562,562,562,562,562,
            562,562,562,562,562,562,562,562,562,562,
            562,562,562,562,562,562,562,562,562,562,
            562,562,562,562,562,562,562,562,562,562,
            562,562,562,562,562,562,562,562,562,562,
            562,562,567,562,562,562,562,528,562,562,
            562,562,562,562,562,562,562,562,562,562,
            562,562,562,562,562,562,562,562,562,562,
            562,562,10,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,48,517,569,569,569,
            569,569,569,517,517,569,517,421,421,421,
            421,421,421,421,421,421,421,421,421,421,
            421,421,421,421,421,421,421,421,421,421,
            421,421,421,421,421,421,421,421,421,421,
            421,421,421,421,421,421,421,421,421,421,
            421,421,421,421,421,421,421,421,421,421,
            421,421,421,421,421,421,421,421,421,421,
            421,421,421,421,421,421,421,421,421,421,
            421,421,421,421,421,421,421,421,421,421,
            421,421,421,421,421,421,421,421,421,421,
            421,421,421,421,449,805,517,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,449,520,323,511,511,511,
            511,511,511,511,511,511,511,511,511,511,
            511,511,511,511,511,511,511,511,511,511,
            511,511,511,511,511,511,511,511,511,511,
            511,511,511,511,511,511,511,511,511,511,
            511,511,511,511,511,511,511,511,511,511,
            511,511,511,511,511,511,511,511,511,511,
            511,511,511,511,511,511,511,511,511,511,
            511,511,511,511,517,511,511,511,511,511,
            511,511,511,511,511,511,511,511,511,511,
            511,511,511,511,449,511,293,512,512,512,
            512,512,512,512,512,512,512,512,512,512,
            512,512,512,512,512,512,512,512,512,512,
            512,512,512,512,512,512,512,512,512,512,
            512,512,512,512,512,512,512,512,512,512,
            512,512,512,512,512,512,512,512,512,512,
            512,512,512,512,512,512,512,512,512,512,
            512,512,512,512,512,512,512,512,512,512,
            512,512,512,512,512,512,512,512,512,512,
            512,512,512,512,512,512,512,512,512,512,
            512,512,512,512,449,324,807,807,807,807,
            807,807,807,807,807,807,807,807,807,807,
            807,807,807,807,807,807,807,807,807,807,
            807,807,807,807,807,807,807,807,807,807,
            807,807,807,807,807,807,807,807,807,807,
            807,807,807,807,807,807,807,807,807,807,
            807,807,807,807,807,807,807,807,807,807,
            807,807,807,807,807,807,807,807,807,807,
            807,807,807,517,807,807,807,807,807,807,
            807,807,807,807,807,807,807,807,807,807,
            807,807,807,449,807,294,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,809,809,809,809,809,809,809,
            809,809,809,449,517,509,509,509,509,509,
            509,509,509,509,509,538,495,495,495,495,
            385,399,495,495,495,495,495,495,495,495,
            495,495,495,495,495,495,495,495,495,495,
            495,495,495,495,495,495,495,495,495,495,
            495,495,495,495,495,495,495,495,495,495,
            495,495,495,495,495,495,495,495,495,495,
            495,495,444,396,415,532,510,517,368,387,
            428,510,338,547,365,370,358,830,551,544,
            545,542,543,557,548,534,535,510,510,517,
            517,517,517,389,510,375,517,779,779,779,
            779,779,779,779,779,779,779,779,779,779,
            779,779,779,779,779,779,779,779,779,779,
            779,779,779,779,779,779,779,779,779,779,
            779,779,779,779,779,779,779,779,779,779,
            779,779,779,779,779,779,779,779,779,779,
            779,779,779,779,779,779,779,779,779,779,
            779,779,779,779,779,779,779,779,779,779,
            779,779,779,35,779,779,779,779,779,779,
            779,779,779,779,779,779,779,779,779,476,
            522,779,779,779,779,779,517,333,333,333,
            333,333,333,333,333,333,333,517,502,502,
            502,502,821,493,502,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,502,502,502,814,494,813,815,38,517,
            307,517,816,1,682,682,682,682,682,682,
            682,682,682,682,457,681,681,681,681,517,
            517,681,681,681,681,681,681,681,681,681,
            681,681,681,681,681,681,681,681,681,681,
            681,681,681,681,681,681,681,681,681,681,
            681,681,681,681,681,681,681,681,681,681,
            681,681,681,681,681,681,681,681,681,681,
            681,517,556,517,16,517,683,295,682,682,
            682,682,682,682,682,682,682,682,492,681,
            681,681,681,517,517,681,681,681,681,681,
            681,681,681,681,681,681,681,681,681,681,
            681,681,681,681,681,681,681,681,681,681,
            681,681,681,681,681,681,681,681,681,681,
            681,681,681,681,681,681,681,681,681,681,
            681,681,681,681,681,418,517,517,517,839,
            683,6,571,571,571,571,571,571,571,571,
            571,571,517,465,465,517,517,484,517,330,
            330,330,330,330,330,330,330,330,330,517,
            352,352,352,352,352,352,352,352,352,352,
            517,478,478,478,478,478,478,478,478,478,
            478,58,571,571,571,571,571,571,571,571,
            571,571,57,571,571,571,571,571,571,571,
            571,571,571,60,571,571,571,571,571,571,
            571,571,571,571,12,517,507,14,473,59,
            571,571,571,571,571,571,571,571,571,571,
            20,32,19,7,546,36,163,308,53,13,
            161,540,822,539,516,465,465,541,826,828,
            823,829,33,517,289,303,300,291,517,517,
            517,517,517,831,517,554,819,818,517,517,
            517,517,517,517,517,517,517,517,517,517,
            517,517,517,517,517,568,679,517,517,517,
            517,679,517,517,517,517,517,517,517,827,
            517,517,517,517,517,517,481,679,679,517,
            517,517,517,517,679,517,521,517,517,517,
            517,517,517,517,517,517,517,517,517,517,
            517,517,324,517,517,517,517,517,1,517,
            6,517,12,517,517,517,517,517,517,517,
            517,517,517,517,517,517,517,517,294
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 51,
           NT_OFFSET         = 103,
           LA_STATE_OFFSET   = 841,
           MAX_LA            = 1,
           NUM_RULES         = 324,
           NUM_NONTERMINALS  = 43,
           NUM_SYMBOLS       = 146,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 325,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 102,
           EOLT_SYMBOL       = 104,
           ACCEPT_ACTION     = 516,
           ERROR_ACTION      = 517;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
