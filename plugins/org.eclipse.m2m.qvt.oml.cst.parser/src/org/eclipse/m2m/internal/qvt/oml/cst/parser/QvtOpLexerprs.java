/**
* <copyright>
*
* Copyright (c) 2005, 2007 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
*
* </copyright>
*
* $Id: QvtOpLexerprs.java,v 1.47 2009/01/19 15:05:38 aigdalov Exp $
*/
/**
* <copyright>
*
* Copyright (c) 2006-2008 Borland Inc.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Borland - Initial API and implementation
*
* </copyright>
*
* $Id: QvtOpLexerprs.java,v 1.47 2009/01/19 15:05:38 aigdalov Exp $
*/

package org.eclipse.m2m.internal.qvt.oml.cst.parser;

public class QvtOpLexerprs implements lpg.lpgjavaruntime.ParseTable, QvtOpLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,1,3,3,3,1,1,1,1,1,
            5,1,1,1,1,1,1,1,1,1,
            1,2,2,2,1,1,1,1,2,1,
            1,1,2,1,1,2,4,1,2,1,
            1,1,2,2,3,2,2,0,1,2,
            2,2,1,2,1,2,3,2,3,3,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,2,3,1,1,1,1,
            1,2,1,2,2,2,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,2,2,1,2,
            1,2,0,1,3,3,3,3,3,3,
            3,4,4,3,3,1,2,2,1,1,
            2,2,2,3,1,3,1,1,1
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,21,22,22,22,26,26,26,26,27,
            27,25,25,6,6,35,35,29,13,13,
            13,9,9,9,9,9,2,2,2,2,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,1,1,1,1,1,1,1,1,
            1,1,37,37,37,37,37,37,37,37,
            38,38,38,38,38,38,38,38,38,38,
            38,38,36,36,39,39,39,15,15,40,
            40,28,28,11,11,11,11,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,16,16,16,
            16,16,16,16,16,16,16,16,16,16,
            16,16,16,16,16,16,16,16,16,16,
            16,16,16,16,16,16,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,7,7,7,7,7,
            7,7,7,7,7,7,7,7,7,7,
            7,7,7,7,7,7,7,7,7,7,
            7,7,7,7,7,14,14,14,14,30,
            30,30,30,30,30,30,30,18,18,18,
            18,18,8,8,8,8,8,5,19,32,
            32,10,10,12,12,33,23,23,23,23,
            23,23,23,23,23,24,20,20,20,20,
            20,20,20,20,20,20,20,8,8,8,
            707,513,512,512,512,2,454,1283,54,514,
            1244,493,1073,907,439,439,439,439,1338,162,
            352,6,7,8,9,476,1078,401,350,383,
            439,439,439,326,203,515,515,515,515,515,
            1080,515,515,1348,428,439,474,203,515,515,
            515,515,515,411,515,515,43,428,416,503,
            407,444,444,444,444,444,1000,444,444,1335,
            444,1,47,47,47,47,1250,347,1261,488,
            47,1334,347,1336,488,47,1339,47,507,312,
            312,312,312,312,1079,312,312,1316,459,809,
            310,310,310,310,607,312,312,312,312,312,
            1154,312,312,1231,1233,54,310,310,310,102,
            45,45,45,45,1272,490,1341,44,45,416,
            490,1294,54,45,801,45,303,52,52,52,
            52,1005,471,498,498,498,1318,471,1305,54,
            1322,54,498,1083,165,164,164,164,1158,165,
            164,164,164,1320,1152,1340,52,52,1354,1356,
            1357,1355,1358,1359,1362,1364,518,518
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,98,99,
            100,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,66,67,68,
            69,70,71,72,73,74,75,76,77,78,
            79,80,81,82,83,84,85,86,87,88,
            89,90,91,92,93,94,95,96,97,98,
            99,100,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            98,99,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            0,0,100,0,0,103,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,98,99,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,98,99,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,98,99,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            0,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            0,0,0,0,98,99,100,101,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,79,80,81,
            82,83,84,85,86,87,88,89,90,91,
            92,101,94,95,96,97,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,0,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,0,
            94,95,96,97,0,1,2,3,4,5,
            6,7,8,9,10,16,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,0,69,70,71,72,0,0,0,
            0,77,0,1,2,3,4,5,6,7,
            8,9,10,14,12,13,14,15,0,0,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            72,0,75,0,0,0,74,0,1,2,
            3,4,5,6,7,8,9,10,15,12,
            13,14,15,0,102,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,0,0,0,0,78,
            0,74,0,1,2,3,4,5,6,7,
            8,9,10,0,12,13,16,0,16,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,73,0,69,0,
            71,0,1,2,3,4,5,6,7,8,
            9,10,17,0,0,0,93,0,0,0,
            0,98,99,100,11,11,11,0,11,11,
            17,11,17,0,0,0,0,0,0,12,
            13,0,0,0,0,12,11,11,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,69,68,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,70,0,0,0,68,0,0,
            76,0,0,0,0,0,0,0,0,0,
            101,0,68,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,102,
            102,0,0,102,101,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            518,565,565,565,565,565,565,565,565,565,
            565,565,565,565,565,565,565,565,565,565,
            565,565,565,565,565,565,565,565,565,565,
            565,565,565,565,565,565,565,565,565,565,
            565,565,565,565,565,565,565,565,565,565,
            565,565,565,565,565,565,565,565,565,565,
            565,565,565,565,565,565,565,565,565,565,
            565,565,459,565,565,565,565,564,565,565,
            565,565,565,565,565,565,565,565,565,565,
            565,565,565,565,565,565,565,565,565,565,
            565,518,563,563,563,563,563,563,563,563,
            563,563,563,563,563,563,563,563,563,563,
            563,563,563,563,563,563,563,563,563,563,
            563,563,563,563,563,563,563,563,563,563,
            563,563,563,563,563,563,563,563,563,563,
            563,563,563,563,563,563,563,563,563,563,
            563,563,563,563,563,563,563,563,563,563,
            563,563,563,568,563,563,563,563,529,563,
            563,563,563,563,563,563,563,563,563,563,
            563,563,563,563,563,563,563,563,563,563,
            563,563,313,515,515,515,515,515,515,515,
            515,515,515,515,515,515,515,515,515,515,
            515,515,515,515,515,515,515,515,515,515,
            515,515,515,515,515,515,515,515,515,515,
            515,515,515,515,515,515,515,515,515,515,
            515,515,515,515,515,515,515,515,515,515,
            515,515,515,515,515,515,515,515,515,515,
            486,515,515,515,515,515,515,515,515,515,
            515,515,515,515,515,515,515,515,515,515,
            515,515,515,515,515,515,515,515,515,515,
            515,515,10,570,570,570,570,570,570,570,
            570,570,570,570,570,570,570,570,570,570,
            570,570,570,570,570,570,570,570,570,570,
            570,570,570,570,570,570,570,570,570,570,
            570,570,570,570,570,570,570,570,570,570,
            570,570,570,570,570,570,570,570,570,570,
            570,570,570,570,570,570,570,570,570,570,
            570,570,570,570,570,570,570,570,570,570,
            570,570,570,570,570,570,570,570,570,570,
            570,570,570,570,570,570,570,570,570,570,
            48,518,570,518,518,570,518,444,444,444,
            444,444,444,444,444,444,444,444,444,444,
            444,444,444,444,444,444,444,444,444,444,
            444,444,444,444,444,444,444,444,444,444,
            444,444,444,444,444,444,444,444,444,444,
            444,444,444,444,444,444,444,444,444,444,
            444,444,444,444,444,444,444,444,444,444,
            444,444,444,444,505,444,444,444,444,444,
            444,444,444,444,444,444,444,444,444,444,
            444,444,444,444,444,444,444,444,444,444,
            444,444,444,444,444,444,314,830,830,830,
            830,830,830,830,830,830,830,830,830,830,
            830,830,830,830,830,830,830,830,830,830,
            830,830,830,830,830,830,830,830,830,830,
            830,830,830,830,830,830,830,830,830,830,
            830,830,830,830,830,830,830,830,830,830,
            830,830,830,830,830,830,830,830,830,830,
            830,830,830,830,486,830,830,830,830,830,
            830,830,830,830,830,830,830,830,830,830,
            830,830,830,830,830,830,830,830,830,830,
            830,830,830,830,830,830,518,830,830,830,
            830,830,830,830,830,830,830,830,830,830,
            830,830,830,830,830,830,830,830,830,830,
            830,830,830,830,830,830,830,830,830,830,
            830,830,830,830,830,830,830,830,830,830,
            830,830,830,830,830,830,830,830,830,830,
            830,830,830,830,830,830,830,830,830,830,
            830,830,830,830,511,830,830,830,830,830,
            830,830,830,830,830,830,830,830,830,830,
            830,830,830,830,830,830,830,830,830,830,
            830,830,830,830,830,830,518,513,513,513,
            513,513,513,513,513,513,513,539,512,512,
            512,512,406,423,512,512,512,512,512,512,
            512,512,512,512,512,512,512,512,512,512,
            512,512,512,512,512,512,512,512,512,512,
            512,512,512,512,512,512,512,512,512,512,
            512,512,512,512,512,512,512,512,512,512,
            512,512,512,512,400,437,421,426,533,514,
            518,366,409,434,353,548,358,380,374,853,
            552,545,546,543,544,558,549,535,536,514,
            518,518,518,518,514,514,514,387,518,828,
            828,828,828,828,828,828,828,828,828,828,
            828,828,828,828,828,828,828,828,828,828,
            828,828,828,828,828,828,828,828,828,828,
            828,828,828,828,828,828,828,828,828,828,
            828,828,828,828,828,828,828,828,828,828,
            828,828,828,828,828,828,828,828,828,828,
            828,828,828,828,828,828,828,828,828,828,
            828,828,828,828,828,828,833,828,828,828,
            828,828,828,828,828,828,828,828,828,828,
            828,523,828,828,828,504,518,439,439,439,
            439,439,439,439,439,439,439,439,439,439,
            439,439,439,439,439,439,439,439,439,439,
            439,439,439,439,439,439,439,439,439,439,
            439,439,439,439,439,439,439,439,439,439,
            439,439,439,439,439,439,439,439,439,439,
            439,439,439,439,439,439,439,439,439,439,
            439,439,439,439,439,439,439,439,439,439,
            439,439,439,439,518,439,439,439,439,439,
            439,439,439,439,439,439,439,439,439,35,
            439,439,439,504,518,471,471,471,471,471,
            471,471,471,471,471,453,498,498,498,498,
            843,509,498,498,498,498,498,498,498,498,
            498,498,498,498,498,498,498,498,498,498,
            498,498,498,498,498,498,498,498,498,498,
            498,498,498,498,498,498,498,498,498,498,
            498,498,498,498,498,498,498,498,498,498,
            498,498,518,836,510,835,837,38,16,329,
            518,838,1,683,683,683,683,683,683,683,
            683,683,683,450,682,682,682,682,518,518,
            682,682,682,682,682,682,682,682,682,682,
            682,682,682,682,682,682,682,682,682,682,
            682,682,682,682,682,682,682,682,682,682,
            682,682,682,682,682,682,682,682,682,682,
            682,682,682,682,682,682,682,682,682,682,
            367,518,557,518,518,518,684,316,683,683,
            683,683,683,683,683,683,683,683,508,682,
            682,682,682,518,517,682,682,682,682,682,
            682,682,682,682,682,682,682,682,682,682,
            682,682,682,682,682,682,682,682,682,682,
            682,682,682,682,682,682,682,682,682,682,
            682,682,682,682,682,682,682,682,682,682,
            682,682,682,682,682,518,518,518,518,826,
            36,684,6,572,572,572,572,572,572,572,
            572,572,572,12,416,416,852,518,481,518,
            347,347,347,347,347,347,347,347,347,347,
            518,488,488,488,488,488,488,488,488,488,
            488,518,490,490,490,490,490,490,490,490,
            490,490,58,572,572,572,572,572,572,572,
            572,572,572,57,572,572,572,572,572,572,
            572,572,572,572,60,572,572,572,572,572,
            572,572,572,572,572,14,680,518,464,518,
            418,59,572,572,572,572,572,572,572,572,
            572,572,547,20,32,19,680,330,13,307,
            33,680,680,680,541,845,540,7,849,846,
            542,854,851,518,3,324,321,163,53,416,
            416,161,518,311,518,555,841,840,518,518,
            518,518,518,518,518,518,518,518,518,518,
            518,518,518,518,569,825,518,518,518,518,
            518,518,518,518,518,518,518,518,518,518,
            518,518,518,850,518,518,518,825,518,518,
            466,518,518,518,518,518,518,518,518,518,
            522,518,825,518,518,518,518,518,518,518,
            518,518,518,518,518,518,518,518,518,518,
            518,518,518,518,518,518,518,518,518,518,
            518,518,518,518,518,518,518,518,518,1,
            6,518,518,12,314
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 52,
           NT_OFFSET         = 103,
           LA_STATE_OFFSET   = 857,
           MAX_LA            = 1,
           NUM_RULES         = 339,
           NUM_NONTERMINALS  = 40,
           NUM_SYMBOLS       = 143,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 340,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 102,
           EOLT_SYMBOL       = 104,
           ACCEPT_ACTION     = 517,
           ERROR_ACTION      = 518;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
