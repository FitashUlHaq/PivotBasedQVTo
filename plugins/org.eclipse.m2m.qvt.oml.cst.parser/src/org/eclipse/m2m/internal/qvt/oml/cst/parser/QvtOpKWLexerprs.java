/**
* <copyright>
*
* Copyright (c) 2007 Borland Software Corporation
* 
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     Borland Software Corporation - initial API and implementation
*
* </copyright>
*
* $Id: QvtOpKWLexerprs.java,v 1.8 2008/09/25 17:35:30 aigdalov Exp $
*/
/**
* <copyright>
*
* Copyright (c) 2006, 2007 Borland Inc.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Borland - Initial API and implementation
*
* </copyright>
*
* $Id: QvtOpKWLexerprs.java,v 1.8 2008/09/25 17:35:30 aigdalov Exp $
*/

package org.eclipse.m2m.internal.qvt.oml.cst.parser;

public class QvtOpKWLexerprs implements lpg.lpgjavaruntime.ParseTable, QvtOpKWLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            4,4,2,4,4,5,3,2,3,3,
            7,3,2,4,5,3,3,8,10,10,
            7,6,6,8,3,3,7,6,6,13,
            8,7,11,11,9,8,14,12,12,12,
            6,7,16,4,7,5,6,7,7,10,
            4,10,1,3,5,3,6,14,6,7,
            9,9,6,8,6,6,7,5,6,5,
            4,3,13,10,12,8,3,4,4,3,
            6,4,7,10,9,12,10,13,12,15,
            9,4,5,7,9,6,7,8,8,6,
            6,4,4,6,4,7,8,9,10,13,
            16,7,6
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            1,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,117,53,151,188,196,
            29,43,194,203,198,107,127,205,211,213,
            218,219,110,54,128,131,123,141,91,126,
            93,34,45,117,145,57,104,206,222,224,
            225,227,226,228,231,232,142,40,235,153,
            239,240,241,156,63,242,244,157,246,249,
            251,254,256,257,163,258,262,259,267,261,
            268,272,273,277,278,280,282,281,285,290,
            291,293,295,296,299,85,166,73,297,16,
            169,284,306,300,70,308,309,311,312,310,
            319,321,323,325,322,326,327,330,331,332,
            337,336,171,339,342,348,350,351,340,354,
            173,353,357,362,364,366,358,370,95,367,
            373,375,376,378,109,380,383,381,387,389,
            392,386,394,162,398,401,403,397,405,407,
            408,409,410,413,418,420,421,423,422,177,
            427,430,428,432,435,436,439,442,183,443,
            445,447,448,78,450,452,453,454,457,460,
            463,465,467,468,458,471,477,478,469,479,
            470,483,484,488,491,492,496,497,499,501,
            503,507,508,511,512,513,515,518,519,521,
            524,525,527,528,531,533,538,539,543,537,
            546,547,548,549,551,550,561,559,553,563,
            564,565,567,569,572,573,575,577,578,585,
            586,588,582,590,592,599,601,595,147,603,
            605,607,606,610,611,612,614,616,615,617,
            620,626,623,624,628,633,635,637,640,636,
            645,642,52,648,649,650,653,651,655,657,
            659,661,663,664,668,670,671,674,676,677,
            679,681,682,684,692,678,693,696,697,698,
            699,705,701,702,713,704,715,718,719,720,
            721,723,727,728,722,729,733,734,735,737,
            739,746,744,748,749,750,753,755,756,757,
            762,766,764,767,770,774,775,776,777,778,
            779,782,785,787,190,783,53,794,789,780,
            799,791,801,800,180,804,807,808,811,810,
            816,817,818,822,826,827,828,819,831,836,
            837,839,843,841,846,848,850,853,856,860,
            857,829,864,862,866,868,869,872,874,876,
            878,879,880,882,883,884,888,886,892,895,
            896,903,901,899,907,909,912,905,916,917,
            918,919,922,921,923,925,926,927,930,937,
            941,945,942,946,935,950,953,955,193,956,
            959,960,962,965,966,968,970,973,972,974,
            979,983,984,978,988,987,992,993,995,996,
            998,999,1000,1006,1001,1002,1012,1013,1017,1007,
            572,572
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,0,0,17,18,19,
            20,21,22,8,24,25,26,12,0,29,
            30,31,32,0,34,7,3,9,38,0,
            7,2,0,10,0,12,7,3,4,5,
            8,0,0,0,10,22,0,5,2,3,
            7,5,0,10,2,3,22,5,17,0,
            14,2,0,21,18,6,14,0,9,28,
            28,30,31,11,0,23,14,36,19,20,
            0,1,0,16,0,11,6,5,8,9,
            16,9,10,0,1,2,0,1,0,0,
            18,17,9,4,8,9,0,8,9,3,
            4,27,0,1,2,0,0,0,25,21,
            0,37,6,39,9,27,9,12,8,9,
            0,0,26,35,0,19,0,6,8,9,
            0,7,0,1,13,0,0,2,6,3,
            4,0,0,19,2,0,20,2,0,1,
            0,6,0,3,6,20,0,7,17,0,
            4,9,0,1,12,9,24,0,27,0,
            40,4,0,0,1,0,14,0,9,20,
            5,9,0,6,0,0,17,0,29,17,
            0,1,0,8,12,3,12,0,0,1,
            3,0,1,0,0,0,0,0,1,4,
            0,0,9,7,0,5,2,13,0,0,
            0,0,11,0,4,0,5,8,0,4,
            0,13,9,0,4,0,0,0,0,11,
            0,0,9,7,7,4,0,0,2,2,
            15,0,0,15,2,4,0,0,1,0,
            0,0,22,0,0,9,2,8,7,0,
            0,1,0,4,0,0,0,5,0,0,
            5,5,4,23,10,0,1,0,0,0,
            0,0,13,6,31,4,8,7,0,10,
            0,0,0,5,0,0,0,1,7,0,
            0,0,3,13,12,0,0,13,0,0,
            1,0,4,13,8,4,15,0,23,0,
            0,4,0,0,19,6,0,0,8,6,
            8,0,1,0,1,0,0,1,12,0,
            5,14,0,4,0,0,4,0,4,0,
            0,6,0,1,5,0,0,7,0,12,
            4,0,4,0,1,4,0,0,13,2,
            0,1,0,1,0,1,0,0,0,0,
            1,5,0,17,6,3,9,0,1,0,
            0,0,0,3,5,3,0,0,7,0,
            1,0,1,7,0,0,2,2,0,12,
            2,0,0,2,0,1,0,0,1,0,
            4,0,0,0,1,4,0,0,6,0,
            1,12,0,1,0,1,0,0,0,0,
            0,4,15,3,18,33,0,0,0,10,
            4,4,0,0,18,7,18,0,1,6,
            0,0,1,3,12,0,0,0,0,3,
            0,1,0,1,9,7,0,0,1,3,
            0,0,0,3,0,1,4,0,0,8,
            0,1,4,0,0,8,0,0,0,5,
            0,5,0,10,7,5,0,0,0,7,
            3,3,0,7,2,0,0,0,0,0,
            0,5,0,6,2,6,8,7,0,14,
            0,1,0,0,0,7,0,1,0,7,
            6,0,0,10,0,0,0,0,10,7,
            3,0,8,7,0,0,2,0,3,0,
            9,0,5,22,0,6,2,6,0,1,
            0,1,0,1,0,0,0,3,2,0,
            0,0,7,0,0,0,0,1,5,0,
            10,6,0,0,15,0,3,0,1,10,
            16,20,0,8,0,0,0,15,4,0,
            1,0,10,7,0,10,2,0,0,0,
            0,2,0,5,0,8,0,5,0,5,
            0,11,0,0,2,2,10,0,1,0,
            0,30,14,0,5,0,0,0,0,6,
            0,0,2,0,24,2,10,10,18,11,
            9,0,0,2,19,0,0,0,0,2,
            0,0,1,0,0,5,0,11,16,11,
            15,7,0,1,0,12,2,0,0,0,
            0,0,0,5,2,8,0,0,0,3,
            11,11,0,0,0,2,0,10,0,3,
            19,3,10,0,16,0,1,0,0,0,
            16,2,0,6,0,0,0,5,10,16,
            6,0,1,0,9,0,0,1,12,0,
            5,2,9,0,0,0,0,0,0,0,
            2,0,0,6,0,1,0,1,0,7,
            0,1,16,0,13,21,8,4,0,0,
            0,26,2,0,6,32,0,0,29,0,
            0,2,13,3,11,0,0,0,0,3,
            13,0,1,8,7,0,0,0,0,4,
            0,25,5,3,16,0,0,11,0,1,
            0,5,0,15,9,0,4,0,3,0,
            3,11,0,1,0,0,0,8,3,0,
            1,0,6,0,1,0,1,0,0,2,
            9,0,1,0,1,0,8,0,0,0,
            3,0,0,0,1,0,11,0,6,0,
            3,0,1,15,0,0,2,18,0,4,
            0,20,0,1,0,5,0,1,0,11,
            2,0,8,28,3,0,0,0,0,4,
            0,0,0,1,0,0,0,0,8,0,
            14,10,8,8,0,6,0,1,21,21,
            0,0,2,17,0,0,2,6,14,0,
            0,6,0,1,0,0,2,2,0,0,
            2,0,3,14,0,0,1,0,1,0,
            9,0,0,0,10,3,5,0,0,6,
            11,3,0,0,1,3,0,0,2,12,
            3,0,0,1,0,0,1,0,0,0,
            0,0,11,9,7,0,0,1,3,8,
            11,0,0,0,3,3,0,17,0,21,
            4,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            572,143,144,139,138,146,145,131,142,141,
            132,124,119,120,137,572,572,130,125,122,
            121,133,118,263,123,126,140,264,572,136,
            127,129,135,572,134,149,190,150,128,572,
            580,220,572,189,572,188,219,195,194,193,
            151,572,27,572,192,187,572,487,202,204,
            169,201,572,168,232,231,191,230,429,13,
            575,271,572,488,203,274,229,572,272,431,
            489,432,430,261,572,233,260,433,273,270,
            572,180,572,640,572,579,179,184,178,177,
            597,186,183,572,208,206,572,157,572,572,
            185,304,207,166,156,155,572,165,167,197,
            198,307,572,174,173,572,572,572,205,313,
            572,305,158,306,182,315,170,181,172,171,
            572,572,196,314,572,159,572,217,176,175,
            572,199,572,222,218,572,572,228,223,236,
            237,572,572,200,588,572,413,258,572,266,
            572,259,572,643,265,227,572,289,322,572,
            335,297,572,343,296,334,243,572,321,83,
            571,147,87,572,152,572,573,572,485,496,
            148,551,572,154,572,572,484,572,495,550,
            572,161,572,209,153,162,160,572,572,164,
            163,572,210,572,572,572,572,572,214,213,
            572,572,211,644,572,215,221,212,572,572,
            572,572,216,572,226,572,234,225,572,238,
            572,224,235,572,240,572,572,572,572,239,
            572,572,241,242,244,245,572,572,246,584,
            589,572,572,652,582,248,572,572,250,572,
            572,572,247,572,572,249,628,251,581,572,
            572,598,572,253,572,572,572,254,572,572,
            256,262,257,252,255,572,268,572,572,572,
            572,572,269,275,267,278,276,277,572,279,
            572,572,572,664,572,572,572,285,283,572,
            77,572,674,280,281,572,572,282,572,572,
            294,572,290,286,288,291,287,572,284,572,
            572,616,572,572,654,292,572,572,293,295,
            298,572,300,572,677,572,572,308,299,572,
            301,302,572,303,572,572,309,572,310,572,
            572,311,572,651,316,572,572,317,572,312,
            623,572,318,572,320,319,572,572,650,323,
            572,324,572,325,572,327,572,572,54,572,
            577,328,572,326,330,331,329,572,586,572,
            572,572,572,576,675,332,572,572,333,572,
            337,572,339,336,572,572,574,340,572,338,
            341,572,572,342,572,345,572,572,347,572,
            346,572,572,572,351,349,572,572,350,572,
            665,348,572,627,572,618,572,572,572,572,
            572,354,355,356,352,344,572,572,572,361,
            357,358,572,572,353,360,359,572,364,363,
            572,572,366,365,362,572,572,572,572,368,
            572,370,572,371,367,369,572,572,373,372,
            572,572,572,374,572,587,376,572,572,375,
            572,379,378,572,572,377,572,572,572,381,
            572,382,572,380,383,384,572,572,572,385,
            386,387,572,389,388,572,572,572,572,572,
            572,390,572,391,642,394,392,393,572,578,
            572,395,572,572,572,396,572,400,572,397,
            399,572,572,398,572,572,572,572,401,403,
            405,572,404,641,572,572,406,572,407,572,
            408,572,635,402,572,409,673,410,572,411,
            572,412,572,638,572,572,572,637,601,572,
            572,572,414,572,572,572,572,420,418,572,
            416,419,572,572,415,572,423,572,685,421,
            619,417,572,422,572,572,572,613,594,572,
            426,572,424,425,572,427,629,572,572,572,
            572,653,572,668,572,434,572,435,572,595,
            572,436,572,572,440,631,437,572,441,572,
            572,428,438,572,442,572,572,572,572,444,
            572,572,446,572,439,448,672,450,443,445,
            447,572,572,449,676,572,572,572,572,453,
            572,572,454,572,572,666,572,452,451,621,
            639,614,572,604,572,455,456,572,572,572,
            572,572,572,458,460,457,572,572,572,617,
            620,459,572,572,572,678,572,461,572,464,
            684,465,462,572,632,572,466,572,572,572,
            463,470,572,468,572,572,572,669,469,467,
            471,572,593,572,472,572,572,475,473,572,
            583,476,474,572,28,572,572,572,572,572,
            480,572,572,479,572,482,572,483,572,486,
            572,590,648,572,481,478,491,490,572,572,
            572,670,679,572,493,477,572,572,492,572,
            572,671,494,499,497,572,572,572,572,501,
            498,572,596,500,502,572,572,572,572,503,
            572,608,636,505,603,572,572,504,572,663,
            572,634,572,514,506,572,633,572,657,572,
            508,507,572,510,572,572,572,509,511,572,
            512,572,513,572,515,572,607,572,572,517,
            516,572,519,572,520,572,518,572,572,572,
            522,572,572,572,680,572,521,572,525,572,
            646,572,527,667,572,572,528,523,572,529,
            572,524,572,681,572,530,572,622,572,624,
            592,572,531,526,591,572,572,572,572,532,
            572,572,572,538,572,572,84,572,537,572,
            533,536,539,540,572,542,572,543,534,535,
            572,572,544,541,572,572,545,546,606,572,
            572,547,572,548,572,572,549,552,572,572,
            553,572,658,605,572,572,556,572,611,572,
            554,572,572,572,555,557,612,572,572,558,
            610,661,572,572,647,559,572,572,561,560,
            645,572,572,562,572,572,564,572,110,572,
            88,572,602,563,565,572,572,683,630,568,
            609,572,572,572,569,662,572,567,572,566,
            615
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 454,
           NT_OFFSET         = 54,
           LA_STATE_OFFSET   = 685,
           MAX_LA            = 1,
           NUM_RULES         = 113,
           NUM_NONTERMINALS  = 3,
           NUM_SYMBOLS       = 57,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 114,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 40,
           EOLT_SYMBOL       = 55,
           ACCEPT_ACTION     = 571,
           ERROR_ACTION      = 572;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
