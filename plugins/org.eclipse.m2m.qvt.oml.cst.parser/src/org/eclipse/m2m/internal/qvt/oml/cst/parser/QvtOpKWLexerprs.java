/**
* <copyright>
*
* Copyright (c) 2007 Borland Software Corporation
* 
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*     Borland Software Corporation - initial API and implementation
*
* </copyright>
*
* $Id: QvtOpKWLexerprs.java,v 1.2 2008/04/24 12:15:21 sboyko Exp $
*/
/**
* <copyright>
*
* Copyright (c) 2006, 2007 Borland Inc.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Borland - Initial API and implementation
*
* </copyright>
*
* $Id: QvtOpKWLexerprs.java,v 1.2 2008/04/24 12:15:21 sboyko Exp $
*/

package org.eclipse.m2m.internal.qvt.oml.cst.parser;

public class QvtOpKWLexerprs implements lpg.lpgjavaruntime.ParseTable, QvtOpKWLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            4,4,2,4,4,5,3,2,3,3,
            7,3,2,4,5,3,3,8,10,10,
            7,6,6,8,3,3,7,6,6,13,
            8,7,11,11,9,8,14,12,12,12,
            6,7,16,4,7,5,6,7,7,10,
            4,10,1,3,5,3,6,14,6,7,
            9,9,6,8,6,6,7,5,6,5,
            4,3,13,10,12,8,3,4,4,3,
            6,4,7,10,9,12,10,13,12,15,
            9,4,5,7,9,6,7,8,8,6,
            6,4,4,6,4,7,8,9,10,13,
            16
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            1,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,115,53,175,191,73,123,192,
            84,190,197,107,128,193,206,61,208,209,
            110,29,212,127,124,137,91,42,93,34,
            45,117,140,57,104,215,216,213,96,218,
            220,226,228,219,88,142,229,150,232,234,
            235,139,63,236,237,159,240,238,243,248,
            250,251,152,252,256,253,261,254,262,266,
            267,271,272,274,277,255,279,283,285,288,
            289,290,292,153,155,166,297,16,167,275,
            300,291,70,303,305,307,294,308,310,311,
            316,312,319,317,320,327,322,323,329,331,
            40,332,339,341,342,344,333,347,170,346,
            349,355,357,359,360,362,95,367,365,371,
            370,372,350,373,379,381,382,383,385,390,
            391,171,393,396,398,394,400,402,404,406,
            408,414,415,405,418,419,420,174,423,424,
            426,428,431,432,435,439,185,436,442,440,
            445,447,448,449,450,451,454,457,461,464,
            455,466,459,468,475,476,467,477,478,481,
            483,486,491,495,490,497,498,501,503,506,
            507,510,511,513,515,516,482,518,520,522,
            526,527,530,532,536,537,528,540,541,543,
            539,548,549,552,553,556,557,558,560,562,
            565,566,568,570,571,578,579,581,575,583,
            585,592,594,588,596,597,599,601,600,604,
            606,605,608,611,609,620,612,610,614,623,
            627,628,632,630,634,637,52,638,639,641,
            642,645,648,649,650,651,652,655,660,658,
            662,665,666,668,670,672,673,677,683,684,
            676,687,688,689,690,693,698,695,704,697,
            706,707,711,710,712,717,722,714,713,718,
            730,720,731,735,726,733,737,740,739,742,
            745,744,746,754,752,756,759,761,748,762,
            764,766,767,768,771,774,776,172,772,53,
            781,778,769,787,788,792,791,165,795,796,
            797,799,801,800,809,807,815,813,811,818,
            819,824,820,825,831,833,828,838,840,826,
            844,846,847,836,850,851,853,854,856,859,
            860,863,857,866,870,871,872,873,874,877,
            876,881,884,883,892,890,888,896,898,902,
            901,903,894,906,910,911,912,913,915,916,
            917,919,928,930,933,936,937,926,938,944,
            939,187,946,947,950,951,954,955,957,959,
            962,961,963,968,972,973,967,977,976,981,
            982,984,985,987,988,989,995,990,991,1001,
            1002,918,996,565,565
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,0,0,17,18,19,
            20,21,22,8,24,25,26,12,0,29,
            30,31,32,0,34,7,3,37,10,0,
            7,0,3,10,0,12,7,3,4,5,
            9,0,0,12,10,22,0,5,2,3,
            0,5,0,3,2,3,22,5,17,0,
            14,2,0,21,18,6,14,5,9,28,
            28,30,31,0,1,23,35,0,19,20,
            0,1,0,6,0,0,6,5,8,9,
            13,9,10,0,1,2,0,1,13,0,
            18,17,9,4,8,9,0,8,9,3,
            4,27,0,0,1,2,0,0,25,7,
            36,9,38,6,8,9,0,0,0,0,
            2,0,26,2,8,9,7,20,7,0,
            1,0,0,2,0,6,2,19,0,20,
            6,3,4,11,0,0,0,1,16,0,
            0,0,6,0,0,24,11,4,9,14,
            9,12,9,19,0,1,0,17,17,0,
            0,0,0,29,4,9,0,27,14,8,
            0,12,6,17,12,0,1,0,0,1,
            3,0,0,39,0,0,1,0,0,0,
            9,9,8,4,7,0,1,0,0,11,
            2,0,5,0,0,0,0,0,4,0,
            5,8,0,4,13,9,4,0,11,0,
            0,0,0,0,0,0,9,7,7,4,
            0,0,2,2,15,0,0,15,2,4,
            0,0,1,0,0,22,0,23,0,9,
            2,8,0,7,0,1,4,0,0,0,
            0,0,5,0,5,4,0,4,10,0,
            1,5,0,13,0,31,0,0,6,0,
            0,0,8,7,5,0,0,10,0,0,
            1,0,0,13,13,7,0,12,0,3,
            0,0,0,1,13,4,8,15,0,23,
            0,0,4,0,4,0,0,6,0,0,
            20,8,6,8,0,1,0,1,0,0,
            12,0,0,5,0,4,0,1,4,0,
            0,0,0,14,4,6,27,5,0,1,
            0,0,0,12,0,4,4,7,4,0,
            0,1,0,0,2,0,1,0,1,0,
            1,0,13,0,0,0,5,0,1,5,
            17,6,9,0,0,1,3,0,0,0,
            3,3,0,0,1,0,7,0,1,7,
            0,0,2,2,0,0,2,12,0,0,
            2,0,1,4,0,1,0,0,0,0,
            0,1,4,0,0,6,0,1,0,12,
            0,1,16,0,1,0,0,0,33,4,
            3,18,18,15,0,0,0,0,4,4,
            0,0,0,7,18,0,1,10,6,0,
            0,10,12,3,0,1,0,0,9,3,
            0,1,0,1,7,0,0,1,3,0,
            0,1,0,4,0,0,1,0,4,0,
            8,0,5,0,5,0,0,0,7,0,
            5,0,3,7,3,0,0,2,0,0,
            0,14,0,7,5,7,6,0,0,1,
            8,0,0,6,2,0,0,0,7,0,
            1,0,7,6,0,0,10,0,0,0,
            0,10,7,3,0,8,7,0,0,2,
            0,3,0,9,0,5,22,0,6,2,
            6,0,1,0,1,0,0,1,0,0,
            0,3,2,0,0,0,7,0,0,0,
            0,0,5,0,19,10,6,8,15,0,
            1,10,0,19,16,3,0,0,15,0,
            4,0,1,0,7,2,0,0,0,10,
            0,0,2,5,0,8,5,0,0,0,
            0,0,5,2,0,11,2,0,10,0,
            1,0,5,14,0,0,30,0,0,0,
            6,0,0,2,24,0,0,10,2,18,
            11,9,0,0,2,20,0,0,0,0,
            2,16,0,10,0,1,0,0,11,7,
            11,15,5,0,1,0,0,2,12,0,
            0,0,0,0,8,5,0,0,2,0,
            11,0,11,10,3,0,1,10,16,0,
            0,2,0,3,0,16,0,3,0,0,
            2,0,6,0,0,0,5,0,16,10,
            6,0,9,0,1,0,5,12,0,1,
            0,0,2,0,9,0,0,0,0,2,
            0,0,6,0,1,0,1,0,7,32,
            0,16,21,13,4,8,0,0,1,26,
            0,0,6,2,0,0,0,29,0,0,
            0,3,2,13,0,11,0,8,0,13,
            0,3,0,7,0,1,4,0,0,0,
            25,11,5,0,0,0,3,0,9,5,
            0,1,0,8,16,0,4,0,11,0,
            3,6,3,0,1,0,0,1,3,0,
            0,1,0,0,1,0,0,2,0,0,
            1,9,0,1,15,0,8,11,3,0,
            0,0,0,0,1,0,0,0,6,3,
            0,1,0,0,15,2,4,0,18,0,
            19,0,1,0,5,0,1,0,11,2,
            0,0,0,28,3,0,4,14,8,0,
            0,0,0,1,0,0,0,0,0,8,
            10,4,8,8,6,0,21,0,1,0,
            21,2,0,17,2,0,0,0,0,14,
            2,6,6,0,1,0,0,2,2,0,
            0,14,3,0,0,1,0,1,0,9,
            0,0,0,10,3,5,0,0,6,11,
            3,0,0,1,3,0,0,2,12,3,
            0,0,1,0,0,1,0,0,0,0,
            0,11,9,7,0,0,1,3,8,11,
            0,0,0,3,3,0,17,0,21,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            565,141,142,137,136,144,143,129,140,139,
            130,122,117,118,135,565,565,128,123,119,
            120,131,116,261,121,124,138,262,565,134,
            125,127,133,565,132,167,188,126,166,565,
            573,565,636,187,565,186,287,193,192,191,
            180,565,27,179,190,185,565,480,200,202,
            565,199,565,160,230,229,189,228,422,13,
            568,269,565,481,201,272,227,146,270,424,
            482,425,423,565,150,231,426,565,268,271,
            565,178,565,215,565,565,177,182,176,175,
            216,184,181,565,206,204,565,155,210,565,
            183,302,205,164,154,153,565,163,165,195,
            196,305,565,565,172,171,565,565,203,147,
            303,148,304,156,170,169,565,565,565,565,
            226,565,194,218,174,173,197,157,217,565,
            220,565,565,581,565,221,256,225,565,198,
            257,234,235,572,565,565,565,264,590,565,
            565,83,263,565,565,241,259,331,295,258,
            478,294,330,489,565,339,87,318,477,565,
            565,565,565,488,145,544,565,317,566,149,
            565,151,152,543,158,565,159,565,565,162,
            161,565,565,564,565,565,208,565,565,565,
            168,209,207,211,637,565,212,565,565,214,
            219,565,213,565,565,565,565,565,224,565,
            232,223,565,236,222,233,238,565,237,565,
            565,565,565,565,565,565,239,240,242,243,
            565,565,244,577,582,565,565,645,575,246,
            565,565,248,565,565,245,565,250,565,247,
            621,249,565,574,565,591,251,565,565,565,
            565,565,252,565,254,255,565,276,253,565,
            266,260,565,267,565,265,565,565,273,565,
            565,565,274,275,657,565,565,277,565,565,
            283,77,565,278,280,281,565,279,565,667,
            565,565,565,292,284,288,286,285,565,282,
            565,565,289,565,609,565,565,290,565,565,
            647,291,293,296,565,298,565,670,565,565,
            297,565,565,299,565,301,565,306,307,565,
            565,565,565,300,308,309,311,312,565,644,
            565,565,565,310,565,616,314,313,315,565,
            565,316,565,565,319,565,320,565,321,565,
            323,565,643,565,565,54,324,565,570,668,
            322,326,325,565,565,579,327,565,565,565,
            569,328,565,565,333,565,329,565,335,332,
            565,565,567,336,565,565,337,334,565,565,
            338,565,341,342,565,343,565,565,565,565,
            565,347,345,565,565,346,565,658,565,344,
            565,620,633,565,611,565,565,565,340,350,
            352,348,349,351,565,565,565,565,353,354,
            565,565,565,356,355,565,360,357,359,565,
            565,374,358,361,565,362,565,565,363,364,
            565,366,565,367,365,565,565,369,368,565,
            565,580,565,370,565,565,373,565,372,565,
            371,565,375,565,376,565,565,565,377,565,
            378,565,380,379,381,565,565,382,565,565,
            565,571,565,383,384,387,385,565,565,389,
            386,565,565,388,635,565,565,565,390,565,
            394,565,391,393,565,565,392,565,565,565,
            565,395,397,399,565,398,634,565,565,400,
            565,401,565,402,565,628,396,565,403,666,
            404,565,405,565,406,565,565,631,565,565,
            565,630,594,565,565,565,408,565,565,565,
            565,565,412,565,407,410,413,416,409,565,
            414,415,565,411,612,417,565,565,606,565,
            587,565,419,565,418,622,565,565,565,420,
            565,565,646,661,565,427,428,565,565,565,
            565,565,588,433,565,429,624,565,430,565,
            434,565,435,431,565,565,421,565,565,565,
            437,565,565,439,432,565,565,665,441,436,
            438,440,565,565,442,669,565,565,565,565,
            446,444,565,443,565,447,565,565,445,607,
            614,632,659,565,597,565,565,449,448,565,
            565,565,565,565,450,451,565,565,453,565,
            613,565,452,454,610,565,459,455,625,565,
            565,671,565,457,565,456,565,458,565,565,
            463,565,461,565,565,565,662,565,460,462,
            464,565,465,565,586,565,576,466,565,468,
            565,28,469,565,467,565,565,565,565,473,
            565,565,472,565,475,565,476,565,479,470,
            565,641,471,474,483,484,565,565,583,663,
            565,565,486,672,565,565,565,485,565,565,
            565,492,664,487,565,490,565,493,565,491,
            565,494,565,495,565,589,496,565,565,565,
            601,497,629,565,565,565,498,565,499,627,
            565,656,565,502,596,565,626,565,500,565,
            650,506,501,565,503,565,565,505,504,565,
            565,508,565,565,600,565,565,510,565,565,
            512,509,565,513,507,565,511,514,515,565,
            565,565,565,565,673,565,565,565,518,639,
            565,520,565,565,660,521,522,565,516,565,
            517,565,674,565,523,565,615,565,617,585,
            565,565,565,519,584,565,525,526,524,565,
            565,565,565,531,565,565,84,565,565,530,
            529,608,532,533,535,565,527,565,536,565,
            528,537,565,534,538,565,565,565,565,599,
            542,539,540,565,541,565,565,545,546,565,
            565,598,651,565,565,549,565,604,565,547,
            565,565,565,548,550,605,565,565,551,603,
            654,565,565,640,552,565,565,554,553,638,
            565,565,555,565,565,557,565,110,565,88,
            565,595,556,558,565,565,676,623,561,602,
            565,565,565,562,655,565,560,565,559
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 449,
           NT_OFFSET         = 54,
           LA_STATE_OFFSET   = 676,
           MAX_LA            = 1,
           NUM_RULES         = 111,
           NUM_NONTERMINALS  = 3,
           NUM_SYMBOLS       = 57,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 112,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 39,
           EOLT_SYMBOL       = 55,
           ACCEPT_ACTION     = 564,
           ERROR_ACTION      = 565;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
