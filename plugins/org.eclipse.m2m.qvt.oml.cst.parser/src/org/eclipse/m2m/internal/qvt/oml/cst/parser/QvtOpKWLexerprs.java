/**
* <copyright>
*
* Copyright (c) 2005, 2007 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
*
* </copyright>
*
* $Id: QvtOpKWLexerprs.java,v 1.11 2008/10/13 13:05:00 aigdalov Exp $
*/
/**
* <copyright>
*
* Copyright (c) 2006-2008 Borland Inc.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Borland - Initial API and implementation
*
* </copyright>
*
* $Id: QvtOpKWLexerprs.java,v 1.11 2008/10/13 13:05:00 aigdalov Exp $
*/

package org.eclipse.m2m.internal.qvt.oml.cst.parser;

public class QvtOpKWLexerprs implements lpg.lpgjavaruntime.ParseTable, QvtOpKWLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            4,4,2,4,4,5,3,2,3,3,
            7,3,2,4,5,3,3,8,10,10,
            7,6,6,8,3,3,7,6,6,13,
            8,7,11,11,9,8,14,12,12,12,
            6,7,16,4,7,5,6,7,7,10,
            4,10,1,3,5,3,6,14,6,7,
            9,9,6,8,6,6,7,5,6,5,
            4,3,13,10,12,8,3,4,4,3,
            6,4,7,10,9,12,10,13,12,15,
            9,4,5,7,9,6,7,8,8,6,
            6,4,4,6,4,7,8,9,10,13,
            16,7,6,7
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            1,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,118,53,191,24,
            128,29,192,53,199,202,108,126,201,209,
            212,214,218,98,127,216,138,110,140,91,
            141,42,34,45,118,151,57,80,220,221,
            223,224,79,226,233,235,193,72,152,227,
            155,236,238,239,160,61,242,241,120,244,
            245,251,252,253,257,16,258,259,254,260,
            266,270,267,273,274,276,278,280,279,282,
            281,289,291,293,292,294,157,163,164,295,
            171,166,299,304,301,68,306,307,309,313,
            308,319,310,320,321,322,325,326,328,333,
            335,336,337,181,338,339,341,347,349,351,
            354,173,355,358,361,364,366,359,367,369,
            76,374,376,378,377,379,104,384,385,387,
            388,393,395,390,400,176,396,404,406,402,
            408,410,412,411,413,416,422,424,425,427,
            426,186,431,434,432,436,439,440,443,446,
            129,418,449,452,453,447,455,457,459,462,
            458,468,470,472,460,475,466,477,478,483,
            484,485,486,489,490,488,497,503,504,499,
            507,509,511,513,515,519,521,517,491,522,
            526,527,528,530,532,533,535,536,539,544,
            545,549,543,552,553,554,555,557,556,567,
            565,559,569,570,571,573,575,578,579,581,
            583,584,591,592,594,588,596,598,605,607,
            601,609,610,612,614,613,617,618,621,622,
            623,624,626,634,627,632,636,638,644,639,
            646,647,652,648,655,656,65,659,660,661,
            664,662,666,668,670,672,674,675,679,682,
            681,683,685,688,690,691,694,700,705,699,
            695,706,708,711,714,710,715,722,726,728,
            718,731,716,732,734,735,736,739,740,741,
            744,743,747,748,751,752,756,758,762,759,
            764,767,770,771,773,777,774,781,782,784,
            763,69,787,788,791,792,789,798,800,187,
            796,114,804,806,311,809,810,816,807,177,
            812,817,819,821,825,822,826,828,833,836,
            837,838,839,841,845,846,849,853,847,852,
            859,860,863,866,870,861,865,872,874,875,
            877,878,881,884,887,888,889,890,892,893,
            894,897,896,901,903,907,908,910,914,916,
            918,919,913,923,926,928,929,931,930,932,
            934,935,936,939,946,951,955,952,956,959,
            960,963,965,189,966,969,972,961,976,977,
            979,937,981,982,983,985,990,991,994,995,
            997,996,1000,1002,1003,1005,1008,1009,1010,1014,
            1015,1016,1018,1022,1024,577,577
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,0,16,2,18,19,
            20,21,22,0,24,25,26,4,0,29,
            30,31,32,0,34,7,3,9,38,24,
            7,0,0,10,0,12,5,3,4,5,
            9,10,0,1,10,22,0,16,2,3,
            0,5,2,3,0,5,22,0,0,2,
            14,0,16,6,14,0,9,6,0,0,
            1,2,18,23,13,7,19,20,9,21,
            0,1,28,18,30,31,6,0,8,9,
            36,4,27,0,25,8,9,0,1,0,
            1,2,37,0,39,8,9,0,5,0,
            3,4,3,4,21,0,0,0,0,1,
            27,6,5,7,21,16,10,0,35,0,
            0,28,14,26,19,8,9,8,9,9,
            0,0,12,2,0,1,0,7,7,0,
            6,2,0,0,2,0,1,11,6,19,
            0,6,0,17,11,0,0,14,8,20,
            0,9,12,3,12,0,0,7,0,4,
            0,0,0,18,9,9,20,9,0,8,
            0,0,27,11,18,29,18,6,0,1,
            12,0,12,0,3,0,3,0,1,0,
            0,1,0,0,9,0,0,8,2,4,
            40,9,0,1,0,0,13,0,0,5,
            0,0,4,0,0,8,5,4,13,9,
            0,0,0,0,4,11,0,0,0,0,
            9,2,4,7,7,0,0,15,15,0,
            4,2,0,0,2,0,1,0,0,0,
            0,0,9,2,4,8,7,22,0,1,
            0,0,0,0,0,5,5,4,0,5,
            0,23,10,0,1,0,0,0,0,0,
            0,6,0,13,8,7,4,10,0,0,
            0,0,13,5,0,0,1,0,7,31,
            3,12,0,13,0,0,0,0,0,29,
            0,4,4,8,4,13,0,23,0,15,
            0,1,6,0,0,19,8,0,0,6,
            0,1,8,0,1,0,0,0,0,12,
            5,13,4,0,1,0,0,0,0,4,
            14,4,6,0,0,1,0,0,5,0,
            12,4,0,7,0,0,4,2,4,0,
            1,0,13,0,1,0,1,0,1,0,
            0,0,0,1,5,0,6,0,3,18,
            9,0,1,0,0,0,0,3,5,3,
            0,0,7,0,1,0,1,7,0,0,
            2,2,0,12,2,0,0,2,0,1,
            33,0,0,1,0,4,0,0,0,0,
            4,0,1,17,6,0,12,0,1,0,
            1,0,1,16,0,16,0,0,4,3,
            15,4,0,0,0,0,4,0,0,0,
            0,7,0,6,4,10,0,1,0,16,
            12,12,0,0,1,3,0,9,0,3,
            0,1,0,1,0,7,0,3,0,1,
            0,0,1,3,8,0,0,0,1,0,
            4,0,0,8,0,0,5,5,0,10,
            5,7,0,0,0,7,3,3,0,7,
            2,0,0,0,0,0,0,5,0,6,
            2,6,8,7,0,14,0,1,0,0,
            0,7,0,1,0,7,6,0,0,10,
            0,0,0,0,10,7,3,0,8,7,
            0,0,2,0,3,0,9,0,5,22,
            0,6,2,6,0,1,0,1,0,0,
            1,0,0,0,3,2,0,0,2,7,
            0,0,0,0,0,0,0,5,20,6,
            10,0,15,0,1,0,10,0,0,8,
            3,20,17,0,1,0,0,0,10,4,
            15,0,1,7,0,0,2,10,0,0,
            0,0,2,0,5,0,8,0,5,0,
            5,0,11,0,0,2,2,10,0,1,
            0,0,0,14,0,30,5,0,6,0,
            0,0,2,0,0,24,16,10,0,0,
            11,2,9,19,0,0,2,0,10,0,
            0,17,2,0,0,0,7,0,11,5,
            15,0,1,8,11,0,1,0,1,12,
            0,0,2,0,0,0,5,2,0,0,
            0,3,0,0,11,11,0,0,2,10,
            0,0,10,3,3,0,1,0,0,19,
            17,0,0,0,17,2,0,6,10,0,
            0,5,0,0,17,6,0,1,5,9,
            0,0,1,0,12,2,0,0,0,9,
            0,0,0,2,32,0,6,0,1,0,
            1,13,7,0,17,0,0,4,0,0,
            1,0,26,8,6,0,0,2,0,13,
            0,0,11,3,0,0,2,0,3,8,
            0,13,0,1,7,0,0,0,0,4,
            0,25,5,3,0,0,0,11,0,1,
            5,0,0,9,3,17,4,11,0,0,
            0,3,0,1,0,0,6,8,3,0,
            1,0,1,0,0,1,0,0,2,15,
            0,1,9,0,1,8,0,0,0,0,
            3,0,0,0,1,0,0,11,6,3,
            0,1,0,15,2,16,0,0,1,0,
            4,20,0,0,5,0,1,0,0,2,
            8,3,0,28,11,0,4,0,0,0,
            0,0,1,0,0,0,0,8,0,14,
            10,8,8,0,6,0,1,11,21,21,
            0,0,2,18,0,0,2,6,0,0,
            0,6,0,1,0,0,2,2,0,9,
            2,0,14,14,3,0,0,1,0,1,
            0,0,0,3,0,10,5,3,6,0,
            0,1,3,0,0,0,0,3,2,0,
            1,0,0,1,0,12,11,0,0,0,
            9,7,3,0,0,0,0,0,3,11,
            3,0,8,0,1,4,0,0,21,0,
            0,18,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            577,144,145,140,139,147,146,132,143,142,
            133,125,120,121,138,577,126,593,131,123,
            122,134,119,577,124,127,141,148,577,137,
            128,130,136,577,135,150,191,151,129,245,
            585,577,577,190,577,189,185,196,195,194,
            187,184,577,153,193,188,577,186,203,205,
            577,202,233,232,577,231,192,13,28,273,
            580,577,204,276,230,577,274,218,577,577,
            209,207,434,234,219,649,275,272,208,483,
            577,181,436,307,437,435,180,577,179,178,
            438,167,310,577,206,166,168,577,158,577,
            175,174,308,27,309,157,156,577,492,577,
            198,199,238,239,316,577,577,577,577,346,
            318,159,149,170,493,237,169,577,317,577,
            577,494,578,197,160,173,172,177,176,183,
            577,577,182,221,577,223,577,200,220,577,
            224,229,577,577,260,577,268,584,261,201,
            577,267,577,602,263,577,577,262,265,228,
            577,299,266,648,298,577,83,291,87,338,
            577,577,577,325,337,490,501,556,577,152,
            577,577,324,217,489,500,555,155,577,162,
            154,577,161,577,163,577,164,577,165,577,
            577,211,577,577,171,577,577,210,222,214,
            576,212,577,215,577,577,213,577,577,216,
            577,577,227,577,577,226,235,240,225,236,
            577,577,577,577,242,241,577,577,577,577,
            243,248,247,244,246,577,577,594,657,577,
            250,589,577,577,587,577,252,577,577,577,
            577,577,251,633,255,253,586,249,577,603,
            577,577,577,577,577,256,258,259,577,264,
            577,254,257,577,270,577,577,577,577,577,
            577,277,577,271,278,279,280,281,577,577,
            577,577,282,669,577,577,287,577,285,269,
            679,283,77,284,577,577,577,577,577,497,
            577,292,293,290,621,288,577,286,577,289,
            577,296,294,577,577,659,295,577,577,297,
            577,302,300,577,682,577,577,577,577,301,
            303,304,306,577,311,577,577,577,577,312,
            305,313,314,577,577,656,577,577,319,577,
            315,628,577,320,577,577,321,326,322,577,
            323,577,655,577,327,577,328,577,330,577,
            54,577,577,582,331,577,333,577,334,329,
            332,577,591,577,577,577,577,581,680,335,
            577,577,336,577,340,577,342,339,577,577,
            579,343,577,341,344,577,577,345,577,348,
            347,577,577,350,577,349,577,577,577,577,
            352,577,354,645,353,577,351,577,670,577,
            632,577,623,355,577,356,577,577,357,359,
            358,360,577,577,577,577,361,577,577,577,
            577,363,577,367,380,364,577,368,577,362,
            365,366,577,577,370,369,577,371,577,372,
            577,374,577,375,577,373,577,376,577,377,
            577,577,592,378,379,577,577,577,383,577,
            382,577,577,381,577,577,385,386,577,384,
            388,387,577,577,577,389,390,391,577,393,
            392,577,577,577,577,577,577,394,577,395,
            647,398,396,397,577,583,577,399,577,577,
            577,400,577,404,577,401,403,577,577,402,
            577,577,577,577,405,407,409,577,408,646,
            577,577,410,577,411,577,412,577,640,406,
            577,413,678,414,577,415,577,416,577,577,
            643,577,577,577,642,606,577,577,419,418,
            577,577,577,577,577,577,577,423,417,424,
            421,577,420,577,425,577,426,577,577,427,
            428,422,624,577,690,577,577,577,429,599,
            618,577,431,430,577,577,634,432,577,577,
            577,577,658,577,673,577,439,577,440,577,
            600,577,441,577,577,445,636,442,577,446,
            577,577,577,443,577,433,447,577,449,577,
            577,577,451,577,577,444,448,677,577,577,
            450,453,452,681,577,577,454,577,455,577,
            577,456,458,577,577,577,619,577,457,671,
            644,577,459,462,626,577,609,577,691,460,
            577,577,461,577,577,577,463,465,577,577,
            577,622,577,577,625,464,577,577,683,466,
            577,577,467,469,470,577,471,577,577,689,
            637,577,577,577,468,475,577,473,474,577,
            577,674,577,577,472,476,577,598,588,477,
            577,577,480,577,478,481,577,577,577,479,
            577,577,577,485,482,577,484,577,487,577,
            488,486,491,577,653,577,577,495,577,577,
            595,577,675,496,498,577,577,684,577,499,
            577,577,502,504,577,577,676,577,506,505,
            577,503,577,601,507,577,577,577,577,508,
            577,613,641,510,577,577,577,509,577,668,
            639,577,577,511,662,608,638,512,577,577,
            577,513,577,515,577,577,518,514,516,577,
            517,577,520,577,577,612,577,577,522,519,
            577,524,521,577,525,523,577,577,577,577,
            527,577,577,577,685,577,577,526,530,651,
            577,532,577,672,533,528,577,577,686,577,
            534,529,577,577,535,577,627,577,577,597,
            536,596,577,531,629,577,537,577,577,577,
            577,577,543,577,577,84,577,542,577,538,
            541,544,545,577,547,577,548,615,539,540,
            577,577,549,546,577,577,550,551,577,577,
            577,552,577,553,577,577,554,557,577,559,
            558,577,611,610,663,577,577,561,577,616,
            577,577,577,562,577,560,617,666,563,577,
            577,652,564,577,577,577,577,650,566,577,
            567,577,577,569,577,565,607,110,577,577,
            568,570,635,88,577,577,577,577,574,614,
            667,577,573,577,688,620,577,577,571,577,
            577,572
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 458,
           NT_OFFSET         = 54,
           LA_STATE_OFFSET   = 691,
           MAX_LA            = 1,
           NUM_RULES         = 114,
           NUM_NONTERMINALS  = 3,
           NUM_SYMBOLS       = 57,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 115,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 40,
           EOLT_SYMBOL       = 55,
           ACCEPT_ACTION     = 576,
           ERROR_ACTION      = 577;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
